
MolaTact3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800cb58  0800cb58  0001cb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d050  0800d050  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d050  0800d050  0001d050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d058  0800d058  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d05c  0800d05c  0001d05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000282c  200001dc  0800d23c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a08  0800d23c  00022a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274f4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000442f  00000000  00000000  00047700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  0004bb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0004d060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024313  00000000  00000000  0004e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000144c2  00000000  00000000  000726bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6efc  00000000  00000000  00086b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014da79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006424  00000000  00000000  0014daf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb3c 	.word	0x0800cb3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800cb3c 	.word	0x0800cb3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fd81 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f008 fce0 	bl	80098a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd99 	bl	8001a42 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd61 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000214 	.word	0x20000214

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000214 	.word	0x20000214

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_Delay+0x40>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e033      	b.n	800104e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f008 fc7e 	bl	80098f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001016:	f023 0302 	bic.w	r3, r3, #2
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fa8a 	bl	800153c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	e001      	b.n	8001044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Start_DMA+0x1e>
 8001072:	2302      	movs	r3, #2
 8001074:	e0cc      	b.n	8001210 <HAL_ADC_Start_DMA+0x1b8>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	d018      	beq.n	80010be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_ADC_Start_DMA+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5e      	ldr	r2, [pc, #376]	; (800121c <HAL_ADC_Start_DMA+0x1c4>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9a      	lsrs	r2, r3, #18
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b0:	e002      	b.n	80010b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f9      	bne.n	80010b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80a0 	bne.w	800120e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110c:	d106      	bne.n	800111c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f023 0206 	bic.w	r2, r3, #6
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
 800111a:	e002      	b.n	8001122 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <HAL_ADC_Start_DMA+0x1cc>)
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <HAL_ADC_Start_DMA+0x1d0>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	4a3a      	ldr	r2, [pc, #232]	; (800122c <HAL_ADC_Start_DMA+0x1d4>)
 8001144:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800114e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800115e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	334c      	adds	r3, #76	; 0x4c
 800117a:	4619      	mov	r1, r3
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f000 fd1a 	bl	8001bb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d015      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <HAL_ADC_Start_DMA+0x1dc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Start_DMA+0x158>
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_ADC_Start_DMA+0x1e0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d129      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_ADC_Start_DMA+0x1c8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d823      	bhi.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11c      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e013      	b.n	800120e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_ADC_Start_DMA+0x1d8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10e      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000008 	.word	0x20000008
 800121c:	431bde83 	.word	0x431bde83
 8001220:	40012300 	.word	0x40012300
 8001224:	08001735 	.word	0x08001735
 8001228:	080017ef 	.word	0x080017ef
 800122c:	0800180b 	.word	0x0800180b
 8001230:	40012000 	.word	0x40012000
 8001234:	40012100 	.word	0x40012100
 8001238:	40012200 	.word	0x40012200

0800123c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADC_Stop_DMA+0x1a>
 8001252:	2302      	movs	r3, #2
 8001254:	e038      	b.n	80012c8 <HAL_ADC_Stop_DMA+0x8c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d120      	bne.n	80012be <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800128a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fcf1 	bl	8001c78 <HAL_DMA_Abort>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80012a8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1c>
 8001310:	2302      	movs	r3, #2
 8001312:	e105      	b.n	8001520 <HAL_ADC_ConfigChannel+0x228>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d925      	bls.n	8001370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68d9      	ldr	r1, [r3, #12]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43da      	mvns	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	400a      	ands	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	4603      	mov	r3, r0
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4403      	add	r3, r0
 8001362:	3b1e      	subs	r3, #30
 8001364:	409a      	lsls	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e022      	b.n	80013b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	400a      	ands	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4403      	add	r3, r0
 80013ac:	409a      	lsls	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b05      	subs	r3, #5
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
 8001406:	e04c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b0c      	cmp	r3, #12
 800140e:	d824      	bhi.n	800145a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43da      	mvns	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	400a      	ands	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b23      	subs	r3, #35	; 0x23
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e023      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b41      	subs	r3, #65	; 0x41
 800146c:	221f      	movs	r2, #31
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	400a      	ands	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b41      	subs	r3, #65	; 0x41
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_ADC_ConfigChannel+0x234>)
 80014a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_ADC_ConfigChannel+0x238>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x1e6>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d11b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_ADC_ConfigChannel+0x23c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_ADC_ConfigChannel+0x240>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	0c9a      	lsrs	r2, r3, #18
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001508:	e002      	b.n	8001510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3b01      	subs	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f9      	bne.n	800150a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	40012000 	.word	0x40012000
 8001534:	20000008 	.word	0x20000008
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <ADC_Init+0x1f0>)
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	021a      	lsls	r2, r3, #8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <ADC_Init+0x1f4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6899      	ldr	r1, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e00f      	b.n	800163a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001638:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0202 	bic.w	r2, r2, #2
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	005a      	lsls	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001676:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	3b01      	subs	r3, #1
 8001694:	035a      	lsls	r2, r3, #13
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e007      	b.n	80016b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	051a      	lsls	r2, r3, #20
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f2:	025a      	lsls	r2, r3, #9
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	029a      	lsls	r2, r3, #10
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13c      	bne.n	80017c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12b      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800176c:	2b00      	cmp	r3, #0
 800176e:	d127      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001788:	2b00      	cmp	r3, #0
 800178a:	d119      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0220 	bic.w	r2, r2, #32
 800179a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fd85 	bl	80012d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017c6:	e00e      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff fd85 	bl	80012e4 <HAL_ADC_ErrorCallback>
}
 80017da:	e004      	b.n	80017e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f005 fb53 	bl	8006ea8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f043 0204 	orr.w	r2, r3, #4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff fd5a 	bl	80012e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fa84 	bl	8000f74 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fa6b 	bl	8000f74 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fae7 	bl	8002134 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa9e 	bl	80020c8 <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	223f      	movs	r2, #63	; 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f010803f 	.word	0xf010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e048      	b.n	8001c70 <HAL_DMA_Start_IT+0xb8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d137      	bne.n	8001c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fa30 	bl	800206c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	223f      	movs	r2, #63	; 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e005      	b.n	8001c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c86:	f7ff f975 	bl	8000f74 <HAL_GetTick>
 8001c8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d008      	beq.n	8001caa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e052      	b.n	8001d50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0216 	bic.w	r2, r2, #22
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_DMA_Abort+0x62>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0208 	bic.w	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfa:	e013      	b.n	8001d24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfc:	f7ff f93a 	bl	8000f74 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d90c      	bls.n	8001d24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e015      	b.n	8001d50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1e4      	bne.n	8001cfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	223f      	movs	r2, #63	; 0x3f
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_DMA_IRQHandler+0x258>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a92      	ldr	r2, [pc, #584]	; (8001fb4 <HAL_DMA_IRQHandler+0x25c>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2204      	movs	r2, #4
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2210      	movs	r2, #16
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2210      	movs	r2, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e01f      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e016      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0208 	bic.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2220      	movs	r2, #32
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808e 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8086 	beq.w	8001ff6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2220      	movs	r2, #32
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d136      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x1da>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d07d      	beq.n	8002062 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
        }
        return;
 8001f6e:	e078      	b.n	8002062 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d030      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e02b      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e022      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d032      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d022      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d307      	bcc.n	800203e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f2      	bne.n	8002022 <HAL_DMA_IRQHandler+0x2ca>
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800203e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e000      	b.n	8002064 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002062:	bf00      	nop
    }
  }
}
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b10      	subs	r3, #16
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <DMA_CalcBaseAndBitshift+0x64>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d909      	bls.n	800210a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	; 0x58
 8002108:	e007      	b.n	800211a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	0800cd6c 	.word	0x0800cd6c

08002134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d855      	bhi.n	8002200 <DMA_CheckFifoParam+0xcc>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <DMA_CheckFifoParam+0x28>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800217f 	.word	0x0800217f
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002201 	.word	0x08002201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d045      	beq.n	8002204 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e042      	b.n	8002204 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002186:	d13f      	bne.n	8002208 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e03c      	b.n	8002208 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	d121      	bne.n	80021dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d836      	bhi.n	800220c <DMA_CheckFifoParam+0xd8>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <DMA_CheckFifoParam+0x70>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bb 	.word	0x080021bb
 80021ac:	080021b5 	.word	0x080021b5
 80021b0:	080021cd 	.word	0x080021cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e02f      	b.n	800221a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ca:	e021      	b.n	8002210 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d4:	d11e      	bne.n	8002214 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021da:	e01b      	b.n	8002214 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <DMA_CheckFifoParam+0xb4>
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d003      	beq.n	80021ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e6:	e018      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      break;
 80021ec:	e015      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      break;
 80021fe:	e00b      	b.n	8002218 <DMA_CheckFifoParam+0xe4>
      break;
 8002200:	bf00      	nop
 8002202:	e00a      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002204:	bf00      	nop
 8002206:	e008      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002208:	bf00      	nop
 800220a:	e006      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 800220c:	bf00      	nop
 800220e:	e004      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
 8002212:	e002      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;   
 8002214:	bf00      	nop
 8002216:	e000      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002218:	bf00      	nop
    }
  } 
  
  return status; 
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_FLASH_Program+0xa0>)
 800223c:	7e1b      	ldrb	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_FLASH_Program+0x1e>
 8002242:	2302      	movs	r3, #2
 8002244:	e03b      	b.n	80022be <HAL_FLASH_Program+0x96>
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_FLASH_Program+0xa0>)
 8002248:	2201      	movs	r2, #1
 800224a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800224c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002250:	f000 f870 	bl	8002334 <FLASH_WaitForLastOperation>
 8002254:	4603      	mov	r3, r0
 8002256:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d12b      	bne.n	80022b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002264:	783b      	ldrb	r3, [r7, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	f000 f917 	bl	800249c <FLASH_Program_Byte>
 800226e:	e016      	b.n	800229e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002276:	883b      	ldrh	r3, [r7, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	68b8      	ldr	r0, [r7, #8]
 800227c:	f000 f8ea 	bl	8002454 <FLASH_Program_HalfWord>
 8002280:	e00d      	b.n	800229e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d105      	bne.n	8002294 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	68b8      	ldr	r0, [r7, #8]
 800228e:	f000 f8bf 	bl	8002410 <FLASH_Program_Word>
 8002292:	e004      	b.n	800229e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f000 f88b 	bl	80023b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800229e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022a2:	f000 f847 	bl	8002334 <FLASH_WaitForLastOperation>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_FLASH_Program+0xa4>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_FLASH_Program+0xa4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_FLASH_Program+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000218 	.word	0x20000218
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_FLASH_Unlock+0x38>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0b      	bge.n	80022fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_FLASH_Unlock+0x38>)
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_FLASH_Unlock+0x3c>)
 80022e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_FLASH_Unlock+0x38>)
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_FLASH_Unlock+0x40>)
 80022ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_FLASH_Unlock+0x38>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da01      	bge.n	80022fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40023c00 	.word	0x40023c00
 800230c:	45670123 	.word	0x45670123
 8002310:	cdef89ab 	.word	0xcdef89ab

08002314 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_FLASH_Lock+0x1c>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_FLASH_Lock+0x1c>)
 800231e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002322:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40023c00 	.word	0x40023c00

08002334 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <FLASH_WaitForLastOperation+0x78>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002346:	f7fe fe15 	bl	8000f74 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800234c:	e010      	b.n	8002370 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d00c      	beq.n	8002370 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <FLASH_WaitForLastOperation+0x38>
 800235c:	f7fe fe0a 	bl	8000f74 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d201      	bcs.n	8002370 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e019      	b.n	80023a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <FLASH_WaitForLastOperation+0x7c>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <FLASH_WaitForLastOperation+0x7c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <FLASH_WaitForLastOperation+0x7c>)
 800238a:	2201      	movs	r2, #1
 800238c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <FLASH_WaitForLastOperation+0x7c>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800239a:	f000 f8a1 	bl	80024e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
  
}  
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000218 	.word	0x20000218
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80023b4:	b490      	push	{r4, r7}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4a0b      	ldr	r2, [pc, #44]	; (800240c <FLASH_Program_DoubleWord+0x58>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80023ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	0013      	movs	r3, r2
 80023f8:	2400      	movs	r4, #0
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	3204      	adds	r2, #4
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bc90      	pop	{r4, r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00

08002410 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <FLASH_Program_Word+0x40>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <FLASH_Program_Word+0x40>)
 8002420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <FLASH_Program_Word+0x40>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <FLASH_Program_Word+0x40>)
 800242c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <FLASH_Program_Word+0x40>)
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	4a06      	ldr	r2, [pc, #24]	; (8002450 <FLASH_Program_Word+0x40>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	601a      	str	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40023c00 	.word	0x40023c00

08002454 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <FLASH_Program_HalfWord+0x44>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	801a      	strh	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00

0800249c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <FLASH_Program_Byte+0x40>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	701a      	strb	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 80024fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 80024fe:	2210      	movs	r2, #16
 8002500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 8002518:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 800251c:	2220      	movs	r2, #32
 800251e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 8002536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 8002554:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	4a05      	ldr	r2, [pc, #20]	; (8002588 <FLASH_SetErrorCode+0xa8>)
 8002572:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <FLASH_SetErrorCode+0xa4>)
 8002576:	2202      	movs	r2, #2
 8002578:	60da      	str	r2, [r3, #12]
  }
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40023c00 	.word	0x40023c00
 8002588:	20000218 	.word	0x20000218

0800258c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800259e:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_FLASHEx_Erase+0xd8>)
 80025a0:	7e1b      	ldrb	r3, [r3, #24]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_FLASHEx_Erase+0x1e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e058      	b.n	800265c <HAL_FLASHEx_Erase+0xd0>
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_FLASHEx_Erase+0xd8>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025b4:	f7ff febe 	bl	8002334 <FLASH_WaitForLastOperation>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d148      	bne.n	8002654 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 f844 	bl	800266c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e8:	f7ff fea4 	bl	8002334 <FLASH_WaitForLastOperation>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_FLASHEx_Erase+0xdc>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_FLASHEx_Erase+0xdc>)
 80025f6:	f023 0304 	bic.w	r3, r3, #4
 80025fa:	6113      	str	r3, [r2, #16]
 80025fc:	e028      	b.n	8002650 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	e01c      	b.n	8002640 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4619      	mov	r1, r3
 800260e:	68b8      	ldr	r0, [r7, #8]
 8002610:	f000 f850 	bl	80026b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002614:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002618:	f7ff fe8c 	bl	8002334 <FLASH_WaitForLastOperation>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_FLASHEx_Erase+0xdc>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <HAL_FLASHEx_Erase+0xdc>)
 8002626:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800262a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	601a      	str	r2, [r3, #0]
          break;
 8002638:	e00a      	b.n	8002650 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3301      	adds	r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4413      	add	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3da      	bcc.n	8002606 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002650:	f000 f878 	bl	8002744 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_FLASHEx_Erase+0xd8>)
 8002656:	2200      	movs	r2, #0
 8002658:	761a      	strb	r2, [r3, #24]

  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000218 	.word	0x20000218
 8002668:	40023c00 	.word	0x40023c00

0800266c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <FLASH_MassErase+0x44>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <FLASH_MassErase+0x44>)
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <FLASH_MassErase+0x44>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <FLASH_MassErase+0x44>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <FLASH_MassErase+0x44>)
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	4313      	orrs	r3, r2
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <FLASH_MassErase+0x44>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6113      	str	r3, [r2, #16]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e010      	b.n	80026f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d103      	bne.n	80026de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80026d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e009      	b.n	80026f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d103      	bne.n	80026ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e002      	b.n	80026f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80026ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	490f      	ldr	r1, [pc, #60]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 8002710:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4313      	orrs	r3, r2
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <FLASH_Erase_Sector+0x8c>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6113      	str	r3, [r2, #16]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40023c00 	.word	0x40023c00

08002744 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <FLASH_FlushCaches+0x88>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	2b00      	cmp	r3, #0
 8002752:	d017      	beq.n	8002784 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <FLASH_FlushCaches+0x88>)
 800275a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800275e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <FLASH_FlushCaches+0x88>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002776:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <FLASH_FlushCaches+0x88>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <FLASH_FlushCaches+0x88>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <FLASH_FlushCaches+0x88>)
 8002796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <FLASH_FlushCaches+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <FLASH_FlushCaches+0x88>)
 80027a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <FLASH_FlushCaches+0x88>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <FLASH_FlushCaches+0x88>)
 80027ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <FLASH_FlushCaches+0x88>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <FLASH_FlushCaches+0x88>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	6013      	str	r3, [r2, #0]
  }
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e16b      	b.n	8002ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ec:	2201      	movs	r2, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 815a 	bne.w	8002abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x4a>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b12      	cmp	r3, #18
 8002818:	d123      	bne.n	8002862 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d00b      	beq.n	80028b6 <HAL_GPIO_Init+0xe6>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80b4 	beq.w	8002abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <HAL_GPIO_Init+0x308>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a5e      	ldr	r2, [pc, #376]	; (8002ad8 <HAL_GPIO_Init+0x308>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b5c      	ldr	r3, [pc, #368]	; (8002ad8 <HAL_GPIO_Init+0x308>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_GPIO_Init+0x30c>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x310>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_GPIO_Init+0x314>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x318>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_GPIO_Init+0x31c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x21a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_GPIO_Init+0x320>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x216>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_GPIO_Init+0x324>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x212>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <HAL_GPIO_Init+0x328>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_GPIO_Init+0x32c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x20a>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e00e      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029da:	2308      	movs	r3, #8
 80029dc:	e00c      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029de:	2306      	movs	r3, #6
 80029e0:	e00a      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029e2:	2305      	movs	r3, #5
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x228>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4934      	ldr	r1, [pc, #208]	; (8002adc <HAL_GPIO_Init+0x30c>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3a:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_GPIO_Init+0x330>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f ae90 	bls.w	80027ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3724      	adds	r7, #36	; 0x24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40021400 	.word	0x40021400
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e22d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	4ba3      	ldr	r3, [pc, #652]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b9d      	ldr	r3, [pc, #628]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b99      	ldr	r3, [pc, #612]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e208      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b91      	ldr	r3, [pc, #580]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a90      	ldr	r2, [pc, #576]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a8a      	ldr	r2, [pc, #552]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a87      	ldr	r2, [pc, #540]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a83      	ldr	r2, [pc, #524]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f9c0 	bl	8000f74 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f9bc 	bl	8000f74 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1cd      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe f9ac 	bl	8000f74 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe f9a8 	bl	8000f74 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1b9      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e18d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4952      	ldr	r1, [pc, #328]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e03a      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x2b0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe f961 	bl	8000f74 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe f95d 	bl	8000f74 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e16e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <HAL_RCC_OscConfig+0x2b0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f940 	bl	8000f74 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f93c 	bl	8000f74 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e14d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d030      	beq.n	8002d84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCC_OscConfig+0x2b4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe f920 	bl	8000f74 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fe f91c 	bl	8000f74 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e12d      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
 8002d56:	e015      	b.n	8002d84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x2b4>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f909 	bl	8000f74 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe f905 	bl	8000f74 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e116      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a0 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d121      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f8cb 	bl	8000f74 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e011      	b.n	8002e06 <HAL_RCC_OscConfig+0x2ce>
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
 8002df0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe f8be 	bl	8000f74 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0cf      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
 8002e1a:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a65      	ldr	r2, [pc, #404]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	e01c      	b.n	8002e62 <HAL_RCC_OscConfig+0x32a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a5f      	ldr	r2, [pc, #380]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a5c      	ldr	r2, [pc, #368]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0x32a>
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a59      	ldr	r2, [pc, #356]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe f883 	bl	8000f74 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe f87f 	bl	8000f74 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e08e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCC_OscConfig+0x33a>
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f86d 	bl	8000f74 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe f869 	bl	8000f74 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e078      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a3a      	ldr	r2, [pc, #232]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d064      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eda:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d05c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d141      	bne.n	8002f72 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_RCC_OscConfig+0x480>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f83e 	bl	8000f74 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe f83a 	bl	8000f74 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04b      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	491d      	ldr	r1, [pc, #116]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCC_OscConfig+0x480>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe f813 	bl	8000f74 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f80f 	bl	8000f74 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e020      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x41a>
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_OscConfig+0x480>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fd fffc 	bl	8000f74 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fd fff8 	bl	8000f74 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e009      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_OscConfig+0x47c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x448>
 8002f9e:	e001      	b.n	8002fa4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	42470060 	.word	0x42470060

08002fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0ca      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d90c      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b64      	ldr	r3, [pc, #400]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b6      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b52      	ldr	r3, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a51      	ldr	r2, [pc, #324]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494c      	ldr	r1, [pc, #304]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d044      	beq.n	80030dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d119      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07d      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d003      	beq.n	800307a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06d      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e065      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4933      	ldr	r1, [pc, #204]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ac:	f7fd ff62 	bl	8000f74 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fd ff5e 	bl	8000f74 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e04d      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d20c      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCC_ClockConfig+0x1b4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e030      	b.n	8003166 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4915      	ldr	r1, [pc, #84]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490d      	ldr	r1, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f81d 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8003146:	4601      	mov	r1, r0
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	fa21 f303 	lsr.w	r3, r1, r3
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800315e:	2000      	movs	r0, #0
 8003160:	f7fd fec4 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	0800cd74 	.word	0x0800cd74
 800317c:	20000008 	.word	0x20000008

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003196:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d007      	beq.n	80031b2 <HAL_RCC_GetSysClockFreq+0x32>
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d008      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x38>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 808d 	bne.w	80032c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80031ae:	60bb      	str	r3, [r7, #8]
       break;
 80031b0:	e08c      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031b4:	60bb      	str	r3, [r7, #8]
      break;
 80031b6:	e089      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b8:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c2:	4b45      	ldr	r3, [pc, #276]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d023      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	ea03 0501 	and.w	r5, r3, r1
 80031e4:	ea04 0602 	and.w	r6, r4, r2
 80031e8:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ea:	fb02 f106 	mul.w	r1, r2, r6
 80031ee:	2200      	movs	r2, #0
 80031f0:	fb02 f205 	mul.w	r2, r2, r5
 80031f4:	440a      	add	r2, r1
 80031f6:	493a      	ldr	r1, [pc, #232]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80031f8:	fba5 0101 	umull	r0, r1, r5, r1
 80031fc:	1853      	adds	r3, r2, r1
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	461a      	mov	r2, r3
 8003208:	4623      	mov	r3, r4
 800320a:	f7fd fccd 	bl	8000ba8 <__aeabi_uldivmod>
 800320e:	4603      	mov	r3, r0
 8003210:	460c      	mov	r4, r1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e049      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	f04f 0400 	mov.w	r4, #0
 8003220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	ea03 0501 	and.w	r5, r3, r1
 800322c:	ea04 0602 	and.w	r6, r4, r2
 8003230:	4629      	mov	r1, r5
 8003232:	4632      	mov	r2, r6
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	0154      	lsls	r4, r2, #5
 800323e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003242:	014b      	lsls	r3, r1, #5
 8003244:	4619      	mov	r1, r3
 8003246:	4622      	mov	r2, r4
 8003248:	1b49      	subs	r1, r1, r5
 800324a:	eb62 0206 	sbc.w	r2, r2, r6
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	f04f 0400 	mov.w	r4, #0
 8003256:	0194      	lsls	r4, r2, #6
 8003258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800325c:	018b      	lsls	r3, r1, #6
 800325e:	1a5b      	subs	r3, r3, r1
 8003260:	eb64 0402 	sbc.w	r4, r4, r2
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	00e2      	lsls	r2, r4, #3
 800326e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003272:	00d9      	lsls	r1, r3, #3
 8003274:	460b      	mov	r3, r1
 8003276:	4614      	mov	r4, r2
 8003278:	195b      	adds	r3, r3, r5
 800327a:	eb44 0406 	adc.w	r4, r4, r6
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	02a2      	lsls	r2, r4, #10
 8003288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800328c:	0299      	lsls	r1, r3, #10
 800328e:	460b      	mov	r3, r1
 8003290:	4614      	mov	r4, r2
 8003292:	4618      	mov	r0, r3
 8003294:	4621      	mov	r1, r4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	461a      	mov	r2, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	f7fd fc82 	bl	8000ba8 <__aeabi_uldivmod>
 80032a4:	4603      	mov	r3, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0c1b      	lsrs	r3, r3, #16
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	3301      	adds	r3, #1
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	60bb      	str	r3, [r7, #8]
      break;
 80032c4:	e002      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032cc:	68bb      	ldr	r3, [r7, #8]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	017d7840 	.word	0x017d7840

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000008 	.word	0x20000008

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4601      	mov	r1, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	0800cd84 	.word	0x0800cd84

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffdc 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800332c:	4601      	mov	r1, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0b5b      	lsrs	r3, r3, #13
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	0800cd84 	.word	0x0800cd84

0800334c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e056      	b.n	800340c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f006 fb7d 	bl	8009a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	ea42 0103 	orr.w	r1, r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	f003 0104 	and.w	r1, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_SPI_Transmit+0x22>
 8003432:	2302      	movs	r3, #2
 8003434:	e11e      	b.n	8003674 <HAL_SPI_Transmit+0x260>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800343e:	f7fd fd99 	bl	8000f74 <HAL_GetTick>
 8003442:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003458:	e103      	b.n	8003662 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_SPI_Transmit+0x52>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800346a:	e0fa      	b.n	8003662 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88fa      	ldrh	r2, [r7, #6]
 8003484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b2:	d107      	bne.n	80034c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d007      	beq.n	80034e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ea:	d14b      	bne.n	8003584 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_SPI_Transmit+0xe6>
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d13e      	bne.n	8003578 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800351e:	e02b      	b.n	8003578 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d112      	bne.n	8003554 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	86da      	strh	r2, [r3, #54]	; 0x36
 8003552:	e011      	b.n	8003578 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003554:	f7fd fd0e 	bl	8000f74 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d803      	bhi.n	800356c <HAL_SPI_Transmit+0x158>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d102      	bne.n	8003572 <HAL_SPI_Transmit+0x15e>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003576:	e074      	b.n	8003662 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ce      	bne.n	8003520 <HAL_SPI_Transmit+0x10c>
 8003582:	e04c      	b.n	800361e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_SPI_Transmit+0x17e>
 800358c:	8afb      	ldrh	r3, [r7, #22]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d140      	bne.n	8003614 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035b8:	e02c      	b.n	8003614 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d113      	bne.n	80035f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ee:	e011      	b.n	8003614 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f0:	f7fd fcc0 	bl	8000f74 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d803      	bhi.n	8003608 <HAL_SPI_Transmit+0x1f4>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d102      	bne.n	800360e <HAL_SPI_Transmit+0x1fa>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003612:	e026      	b.n	8003662 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1cd      	bne.n	80035ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fba4 	bl	8003d70 <SPI_EndRxTxTransaction>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e000      	b.n	8003662 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003672:	7ffb      	ldrb	r3, [r7, #31]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003698:	d112      	bne.n	80036c0 <HAL_SPI_Receive+0x44>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f8e9 	bl	800388e <HAL_SPI_TransmitReceive>
 80036bc:	4603      	mov	r3, r0
 80036be:	e0e2      	b.n	8003886 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_Receive+0x52>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e0db      	b.n	8003886 <HAL_SPI_Receive+0x20a>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d6:	f7fd fc4d 	bl	8000f74 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036ec:	e0c2      	b.n	8003874 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Receive+0x7e>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036fe:	e0b9      	b.n	8003874 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2204      	movs	r2, #4
 8003704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003746:	d107      	bne.n	8003758 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003756:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d007      	beq.n	8003776 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d162      	bne.n	8003844 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800377e:	e02e      	b.n	80037de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d115      	bne.n	80037ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f103 020c 	add.w	r2, r3, #12
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b8:	e011      	b.n	80037de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ba:	f7fd fbdb 	bl	8000f74 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d803      	bhi.n	80037d2 <HAL_SPI_Receive+0x156>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_Receive+0x15c>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037dc:	e04a      	b.n	8003874 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1cb      	bne.n	8003780 <HAL_SPI_Receive+0x104>
 80037e8:	e031      	b.n	800384e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d113      	bne.n	8003820 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	b292      	uxth	r2, r2
 8003804:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	1c9a      	adds	r2, r3, #2
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800381e:	e011      	b.n	8003844 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003820:	f7fd fba8 	bl	8000f74 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d803      	bhi.n	8003838 <HAL_SPI_Receive+0x1bc>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d102      	bne.n	800383e <HAL_SPI_Receive+0x1c2>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003842:	e017      	b.n	8003874 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1cd      	bne.n	80037ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa27 	bl	8003ca6 <SPI_EndRxTransaction>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
 8003870:	e000      	b.n	8003874 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003872:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08c      	sub	sp, #48	; 0x30
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x26>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e18a      	b.n	8003bca <HAL_SPI_TransmitReceive+0x33c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038bc:	f7fd fb5a 	bl	8000f74 <HAL_GetTick>
 80038c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d00f      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x70>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e4:	d107      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x68>
 80038ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d003      	beq.n	80038fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
 80038f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038fc:	e15b      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x82>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x82>
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003916:	e14e      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b04      	cmp	r3, #4
 8003922:	d003      	beq.n	800392c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2205      	movs	r2, #5
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	887a      	ldrh	r2, [r7, #2]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d007      	beq.n	8003980 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003988:	d178      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x10a>
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d166      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039bc:	e053      	b.n	8003a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d11b      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x176>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0x176>
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d113      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	881a      	ldrh	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	1c9a      	adds	r2, r3, #2
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d119      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x1b8>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d014      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	b292      	uxth	r2, r2
 8003a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a46:	f7fd fa95 	bl	8000f74 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d807      	bhi.n	8003a66 <HAL_SPI_TransmitReceive+0x1d8>
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d003      	beq.n	8003a66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a64:	e0a7      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1a6      	bne.n	80039be <HAL_SPI_TransmitReceive+0x130>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1a1      	bne.n	80039be <HAL_SPI_TransmitReceive+0x130>
 8003a7a:	e07c      	b.n	8003b76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x1fc>
 8003a84:	8b7b      	ldrh	r3, [r7, #26]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d16b      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ab0:	e057      	b.n	8003b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d11c      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x26c>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <HAL_SPI_TransmitReceive+0x26c>
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d114      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d119      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x2ae>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d014      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b3c:	f7fd fa1a 	bl	8000f74 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d803      	bhi.n	8003b54 <HAL_SPI_TransmitReceive+0x2c6>
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x2cc>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b60:	e029      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1a2      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x224>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d19d      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8f8 	bl	8003d70 <SPI_EndRxTxTransaction>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b92:	e010      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	e000      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3730      	adds	r7, #48	; 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	603b      	str	r3, [r7, #0]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be2:	e04c      	b.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d048      	beq.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bec:	f7fd f9c2 	bl	8000f74 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d902      	bls.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d13d      	bne.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d111      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	d004      	beq.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d107      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d10f      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e00f      	b.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1a3      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af02      	add	r7, sp, #8
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	d111      	bne.n	8003ce0 <SPI_EndRxTransaction+0x3a>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc4:	d004      	beq.n	8003cd0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d107      	bne.n	8003ce0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce8:	d12a      	bne.n	8003d40 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d012      	beq.n	8003d1a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2180      	movs	r1, #128	; 0x80
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff ff67 	bl	8003bd2 <SPI_WaitFlagStateUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02d      	beq.n	8003d66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e026      	b.n	8003d68 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2101      	movs	r1, #1
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff54 	bl	8003bd2 <SPI_WaitFlagStateUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01a      	beq.n	8003d66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e013      	b.n	8003d68 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2101      	movs	r1, #1
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff41 	bl	8003bd2 <SPI_WaitFlagStateUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e000      	b.n	8003d68 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <SPI_EndRxTxTransaction+0x7c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <SPI_EndRxTxTransaction+0x80>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0d5b      	lsrs	r3, r3, #21
 8003d88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9a:	d112      	bne.n	8003dc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff13 	bl	8003bd2 <SPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d0f2      	beq.n	8003dc2 <SPI_EndRxTxTransaction+0x52>
 8003ddc:	e000      	b.n	8003de0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003dde:	bf00      	nop
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000008 	.word	0x20000008
 8003df0:	165e9f81 	.word	0x165e9f81

08003df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01d      	b.n	8003e42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f005 ff4e 	bl	8009cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f000 fc0e 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b06      	cmp	r3, #6
 8003e72:	d007      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e01d      	b.n	8003ee0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f005 fec3 	bl	8009c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f000 fbbf 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fe94 	bl	8004c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_TIM_PWM_Start+0x74>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_PWM_Start+0x2c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <HAL_TIM_PWM_Start+0x78>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_PWM_Start+0x30>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_PWM_Start+0x32>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d007      	beq.n	8003f50 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010400 	.word	0x40010400

08003f64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e083      	b.n	8004080 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f005 fddb 	bl	8009b48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa8:	f023 0307 	bic.w	r3, r3, #7
 8003fac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 fb4b 	bl	8004654 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004004:	f023 030c 	bic.w	r3, r3, #12
 8004008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	4313      	orrs	r3, r2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	011a      	lsls	r2, r3, #4
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	031b      	lsls	r3, r3, #12
 8004034:	4313      	orrs	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	4313      	orrs	r3, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_TIM_Encoder_Start+0x16>
 8004098:	2b04      	cmp	r3, #4
 800409a:	d008      	beq.n	80040ae <HAL_TIM_Encoder_Start+0x26>
 800409c:	e00f      	b.n	80040be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fdbe 	bl	8004c28 <TIM_CCxChannelCmd>
      break;
 80040ac:	e016      	b.n	80040dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	2104      	movs	r1, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fdb6 	bl	8004c28 <TIM_CCxChannelCmd>
      break;
 80040bc:	e00e      	b.n	80040dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2201      	movs	r2, #1
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fdae 	bl	8004c28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	2104      	movs	r1, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fda7 	bl	8004c28 <TIM_CCxChannelCmd>
      break;
 80040da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d122      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d11b      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0202 	mvn.w	r2, #2
 8004122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fa6c 	bl	8004616 <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fa5e 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa6f 	bl	800462a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d122      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d11b      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0204 	mvn.w	r2, #4
 8004176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa42 	bl	8004616 <HAL_TIM_IC_CaptureCallback>
 8004192:	e005      	b.n	80041a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fa34 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fa45 	bl	800462a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d122      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11b      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0208 	mvn.w	r2, #8
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2204      	movs	r2, #4
 80041d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa18 	bl	8004616 <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa0a 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa1b 	bl	800462a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d122      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0210 	mvn.w	r2, #16
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2208      	movs	r2, #8
 8004224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9ee 	bl	8004616 <HAL_TIM_IC_CaptureCallback>
 800423a:	e005      	b.n	8004248 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f9e0 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9f1 	bl	800462a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10e      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0201 	mvn.w	r2, #1
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f002 fcc5 	bl	8006c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d10e      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fd35 	bl	8004d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d10e      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f9b6 	bl	800463e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d10e      	bne.n	80042fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0220 	mvn.w	r2, #32
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fcff 	bl	8004cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800431e:	2302      	movs	r3, #2
 8004320:	e0b4      	b.n	800448c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	f200 809f 	bhi.w	8004478 <HAL_TIM_PWM_ConfigChannel+0x170>
 800433a:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004375 	.word	0x08004375
 8004344:	08004479 	.word	0x08004479
 8004348:	08004479 	.word	0x08004479
 800434c:	08004479 	.word	0x08004479
 8004350:	080043b5 	.word	0x080043b5
 8004354:	08004479 	.word	0x08004479
 8004358:	08004479 	.word	0x08004479
 800435c:	08004479 	.word	0x08004479
 8004360:	080043f7 	.word	0x080043f7
 8004364:	08004479 	.word	0x08004479
 8004368:	08004479 	.word	0x08004479
 800436c:	08004479 	.word	0x08004479
 8004370:	08004437 	.word	0x08004437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fa0a 	bl	8004794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0208 	orr.w	r2, r2, #8
 800438e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	619a      	str	r2, [r3, #24]
      break;
 80043b2:	e062      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fa5a 	bl	8004874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	619a      	str	r2, [r3, #24]
      break;
 80043f4:	e041      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 faaf 	bl	8004960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0208 	orr.w	r2, r2, #8
 8004410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0204 	bic.w	r2, r2, #4
 8004420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69d9      	ldr	r1, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	61da      	str	r2, [r3, #28]
      break;
 8004434:	e021      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fb03 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69d9      	ldr	r1, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	021a      	lsls	r2, r3, #8
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	61da      	str	r2, [r3, #28]
      break;
 8004476:	e000      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004478:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_TIM_ConfigClockSource+0x18>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e0a6      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x166>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d067      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x120>
 80044e4:	2b40      	cmp	r3, #64	; 0x40
 80044e6:	d80b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x6c>
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d073      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x140>
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d802      	bhi.n	80044f6 <HAL_TIM_ConfigClockSource+0x62>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06f      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044f4:	e078      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d06c      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x140>
 80044fa:	2b30      	cmp	r3, #48	; 0x30
 80044fc:	d06a      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044fe:	e073      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d00d      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0x8c>
 8004504:	2b70      	cmp	r3, #112	; 0x70
 8004506:	d804      	bhi.n	8004512 <HAL_TIM_ConfigClockSource+0x7e>
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d033      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0xe0>
 800450c:	2b60      	cmp	r3, #96	; 0x60
 800450e:	d041      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004510:	e06a      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	d066      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x152>
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451c:	d017      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800451e:	e063      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f000 fb5a 	bl	8004be8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004542:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
      break;
 800454c:	e04c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f000 fb43 	bl	8004be8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004570:	609a      	str	r2, [r3, #8]
      break;
 8004572:	e039      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	f000 fab7 	bl	8004af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2150      	movs	r1, #80	; 0x50
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fb10 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 8004592:	e029      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	461a      	mov	r2, r3
 80045a2:	f000 fad6 	bl	8004b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2160      	movs	r1, #96	; 0x60
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fb00 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80045b2:	e019      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f000 fa97 	bl	8004af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2140      	movs	r1, #64	; 0x40
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 faf0 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80045d2:	e009      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 fae7 	bl	8004bb2 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a40      	ldr	r2, [pc, #256]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d00f      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3d      	ldr	r2, [pc, #244]	; (800476c <TIM_Base_SetConfig+0x118>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3c      	ldr	r2, [pc, #240]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3b      	ldr	r2, [pc, #236]	; (8004774 <TIM_Base_SetConfig+0x120>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3a      	ldr	r2, [pc, #232]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <TIM_Base_SetConfig+0x114>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d02b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b4:	d027      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2c      	ldr	r2, [pc, #176]	; (800476c <TIM_Base_SetConfig+0x118>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d023      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <TIM_Base_SetConfig+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <TIM_Base_SetConfig+0x120>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a29      	ldr	r2, [pc, #164]	; (8004778 <TIM_Base_SetConfig+0x124>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d017      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <TIM_Base_SetConfig+0x128>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a27      	ldr	r2, [pc, #156]	; (8004780 <TIM_Base_SetConfig+0x12c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <TIM_Base_SetConfig+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_Base_SetConfig+0x134>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a24      	ldr	r2, [pc, #144]	; (800478c <TIM_Base_SetConfig+0x138>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a23      	ldr	r2, [pc, #140]	; (8004790 <TIM_Base_SetConfig+0x13c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <TIM_Base_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0xf8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <TIM_Base_SetConfig+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800
 8004788:	40001800 	.word	0x40001800
 800478c:	40001c00 	.word	0x40001c00
 8004790:	40002000 	.word	0x40002000

08004794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f023 0302 	bic.w	r3, r3, #2
 80047dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a20      	ldr	r2, [pc, #128]	; (800486c <TIM_OC1_SetConfig+0xd8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC1_SetConfig+0x64>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <TIM_OC1_SetConfig+0xdc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10c      	bne.n	8004812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0308 	bic.w	r3, r3, #8
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a15      	ldr	r2, [pc, #84]	; (800486c <TIM_OC1_SetConfig+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_OC1_SetConfig+0x8e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <TIM_OC1_SetConfig+0xdc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d111      	bne.n	8004846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400

08004874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0210 	bic.w	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0320 	bic.w	r3, r3, #32
 80048be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a22      	ldr	r2, [pc, #136]	; (8004958 <TIM_OC2_SetConfig+0xe4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC2_SetConfig+0x68>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <TIM_OC2_SetConfig+0xe8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <TIM_OC2_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_OC2_SetConfig+0x94>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <TIM_OC2_SetConfig+0xe8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d113      	bne.n	8004930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40010400 	.word	0x40010400

08004960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <TIM_OC3_SetConfig+0xe0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC3_SetConfig+0x66>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <TIM_OC3_SetConfig+0xe4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d10d      	bne.n	80049e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <TIM_OC3_SetConfig+0xe0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC3_SetConfig+0x92>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <TIM_OC3_SetConfig+0xe4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d113      	bne.n	8004a1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40010400 	.word	0x40010400

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <TIM_OC4_SetConfig+0xa4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x68>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <TIM_OC4_SetConfig+0xa8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 030a 	bic.w	r3, r3, #10
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	031b      	lsls	r3, r3, #12
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f043 0307 	orr.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e032      	b.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e03f      	b.n	8004db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f005 f87a 	bl	8009e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f90b 	bl	8004f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b088      	sub	sp, #32
 8004dc2:	af02      	add	r7, sp, #8
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	f040 8083 	bne.w	8004ee6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_UART_Transmit+0x2e>
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e07b      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Transmit+0x40>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e074      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2221      	movs	r2, #33	; 0x21
 8004e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e14:	f7fc f8ae 	bl	8000f74 <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e26:	e042      	b.n	8004eae <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3e:	d122      	bne.n	8004e86 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f850 	bl	8004ef0 <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e046      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3302      	adds	r3, #2
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	e017      	b.n	8004eae <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	e013      	b.n	8004eae <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2180      	movs	r1, #128	; 0x80
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f82d 	bl	8004ef0 <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e023      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	60ba      	str	r2, [r7, #8]
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1b7      	bne.n	8004e28 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f814 	bl	8004ef0 <UART_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00a      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e000      	b.n	8004ee8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
  }
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f00:	e02c      	b.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d028      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f10:	f7fc f830 	bl	8000f74 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d21d      	bcs.n	8004f5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e00f      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d0c3      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004fc4:	f023 030c 	bic.w	r3, r3, #12
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	f040 80e4 	bne.w	80051bc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4aab      	ldr	r2, [pc, #684]	; (80052a8 <UART_SetConfig+0x324>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <UART_SetConfig+0x84>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4aaa      	ldr	r2, [pc, #680]	; (80052ac <UART_SetConfig+0x328>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d16c      	bne.n	80050e2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005008:	f7fe f98c 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 800500c:	4602      	mov	r2, r0
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009a      	lsls	r2, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	4aa3      	ldr	r2, [pc, #652]	; (80052b0 <UART_SetConfig+0x32c>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	011c      	lsls	r4, r3, #4
 800502c:	f7fe f97a 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005030:	4602      	mov	r2, r0
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009a      	lsls	r2, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fbb2 f5f3 	udiv	r5, r2, r3
 8005046:	f7fe f96d 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 800504a:	4602      	mov	r2, r0
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009a      	lsls	r2, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	4a93      	ldr	r2, [pc, #588]	; (80052b0 <UART_SetConfig+0x32c>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2264      	movs	r2, #100	; 0x64
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	1aeb      	subs	r3, r5, r3
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	4a8e      	ldr	r2, [pc, #568]	; (80052b0 <UART_SetConfig+0x32c>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005082:	441c      	add	r4, r3
 8005084:	f7fe f94e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005088:	4602      	mov	r2, r0
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009a      	lsls	r2, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fbb2 f5f3 	udiv	r5, r2, r3
 800509e:	f7fe f941 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009a      	lsls	r2, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <UART_SetConfig+0x32c>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	; 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1aeb      	subs	r3, r5, r3
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a78      	ldr	r2, [pc, #480]	; (80052b0 <UART_SetConfig+0x32c>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 0207 	and.w	r2, r3, #7
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4422      	add	r2, r4
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	e154      	b.n	800538c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80050e2:	f7fe f90b 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80050e6:	4602      	mov	r2, r0
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009a      	lsls	r2, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	4a6c      	ldr	r2, [pc, #432]	; (80052b0 <UART_SetConfig+0x32c>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	011c      	lsls	r4, r3, #4
 8005106:	f7fe f8f9 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 800510a:	4602      	mov	r2, r0
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009a      	lsls	r2, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005120:	f7fe f8ec 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005124:	4602      	mov	r2, r0
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009a      	lsls	r2, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fbb2 f3f3 	udiv	r3, r2, r3
 800513a:	4a5d      	ldr	r2, [pc, #372]	; (80052b0 <UART_SetConfig+0x32c>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2264      	movs	r2, #100	; 0x64
 8005144:	fb02 f303 	mul.w	r3, r2, r3
 8005148:	1aeb      	subs	r3, r5, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <UART_SetConfig+0x32c>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515c:	441c      	add	r4, r3
 800515e:	f7fe f8cd 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005162:	4602      	mov	r2, r0
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009a      	lsls	r2, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fbb2 f5f3 	udiv	r5, r2, r3
 8005178:	f7fe f8c0 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 800517c:	4602      	mov	r2, r0
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009a      	lsls	r2, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	4a47      	ldr	r2, [pc, #284]	; (80052b0 <UART_SetConfig+0x32c>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	2264      	movs	r2, #100	; 0x64
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	1aeb      	subs	r3, r5, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	3332      	adds	r3, #50	; 0x32
 80051a6:	4a42      	ldr	r2, [pc, #264]	; (80052b0 <UART_SetConfig+0x32c>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	f003 0207 	and.w	r2, r3, #7
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4422      	add	r2, r4
 80051b8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80051ba:	e0e7      	b.n	800538c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a39      	ldr	r2, [pc, #228]	; (80052a8 <UART_SetConfig+0x324>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <UART_SetConfig+0x24c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a38      	ldr	r2, [pc, #224]	; (80052ac <UART_SetConfig+0x328>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d171      	bne.n	80052b4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80051d0:	f7fe f8a8 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <UART_SetConfig+0x32c>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	011c      	lsls	r4, r3, #4
 80051f4:	f7fe f896 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009a      	lsls	r2, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	fbb2 f5f3 	udiv	r5, r2, r3
 800520e:	f7fe f889 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005212:	4602      	mov	r2, r0
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <UART_SetConfig+0x32c>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2264      	movs	r2, #100	; 0x64
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	1aeb      	subs	r3, r5, r3
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	3332      	adds	r3, #50	; 0x32
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <UART_SetConfig+0x32c>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005248:	441c      	add	r4, r3
 800524a:	f7fe f86b 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 800524e:	4602      	mov	r2, r0
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009a      	lsls	r2, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	fbb2 f5f3 	udiv	r5, r2, r3
 8005264:	f7fe f85e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8005268:	4602      	mov	r2, r0
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <UART_SetConfig+0x32c>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2264      	movs	r2, #100	; 0x64
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	1aeb      	subs	r3, r5, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <UART_SetConfig+0x32c>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4422      	add	r2, r4
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	e071      	b.n	800538c <UART_SetConfig+0x408>
 80052a8:	40011000 	.word	0x40011000
 80052ac:	40011400 	.word	0x40011400
 80052b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80052b4:	f7fe f822 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	009a      	lsls	r2, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	4a31      	ldr	r2, [pc, #196]	; (8005394 <UART_SetConfig+0x410>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	011c      	lsls	r4, r3, #4
 80052d8:	f7fe f810 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009a      	lsls	r2, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80052f2:	f7fe f803 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80052f6:	4602      	mov	r2, r0
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009a      	lsls	r2, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	4a21      	ldr	r2, [pc, #132]	; (8005394 <UART_SetConfig+0x410>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2264      	movs	r2, #100	; 0x64
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	1aeb      	subs	r3, r5, r3
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	3332      	adds	r3, #50	; 0x32
 8005320:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <UART_SetConfig+0x410>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532c:	441c      	add	r4, r3
 800532e:	f7fd ffe5 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005332:	4602      	mov	r2, r0
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f5f3 	udiv	r5, r2, r3
 8005348:	f7fd ffd8 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 800534c:	4602      	mov	r2, r0
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009a      	lsls	r2, r3, #2
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <UART_SetConfig+0x410>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2264      	movs	r2, #100	; 0x64
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	1aeb      	subs	r3, r5, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	3332      	adds	r3, #50	; 0x32
 8005376:	4a07      	ldr	r2, [pc, #28]	; (8005394 <UART_SetConfig+0x410>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 020f 	and.w	r2, r3, #15
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4422      	add	r2, r4
 8005388:	609a      	str	r2, [r3, #8]
}
 800538a:	e7ff      	b.n	800538c <UART_SetConfig+0x408>
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bdb0      	pop	{r4, r5, r7, pc}
 8005394:	51eb851f 	.word	0x51eb851f

08005398 <Set_PID_Params>:

#include "global.h"


void Set_PID_Params(PID_Gain *gain, float Kp, float Ki, float Kd)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80053a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80053a8:	ed87 1a00 	vstr	s2, [r7]
	gain->Kp = Kp;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	601a      	str	r2, [r3, #0]
	gain->Ki = Ki;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	605a      	str	r2, [r3, #4]
	gain->Kd = Kd;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	609a      	str	r2, [r3, #8]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <Set_Search_Params>:


void Set_Search_Params(motion *motion, float velocity, float acceleration)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80053d6:	edc7 0a01 	vstr	s1, [r7, #4]
	motion->velocity = velocity;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	605a      	str	r2, [r3, #4]
	motion->acceleration = acceleration;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	609a      	str	r2, [r3, #8]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <Set_Trapezoid_Params>:
//Store parameters for Trapezoid Acceleration
//+++++++++++++++++++++++++++++++++++++++++++++++

void Set_Trapezoid_Params( trapezoid *trapezoid, float distance, float acceleration,
                float initial_velocity, float terminal_velocity, float max_velocity )
{
 80053f2:	b480      	push	{r7}
 80053f4:	b087      	sub	sp, #28
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6178      	str	r0, [r7, #20]
 80053fa:	ed87 0a04 	vstr	s0, [r7, #16]
 80053fe:	edc7 0a03 	vstr	s1, [r7, #12]
 8005402:	ed87 1a02 	vstr	s2, [r7, #8]
 8005406:	edc7 1a01 	vstr	s3, [r7, #4]
 800540a:	ed87 2a00 	vstr	s4, [r7]
	trapezoid->reverse_flag = 0;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	775a      	strb	r2, [r3, #29]
	//バック&右ターンの処理
	if(distance < 0.0f){
 8005414:	edd7 7a04 	vldr	s15, [r7, #16]
 8005418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005420:	d508      	bpl.n	8005434 <Set_Trapezoid_Params+0x42>
		trapezoid -> reverse_flag = 1;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2201      	movs	r2, #1
 8005426:	775a      	strb	r2, [r3, #29]
		distance *= -1.0f;
 8005428:	edd7 7a04 	vldr	s15, [r7, #16]
 800542c:	eef1 7a67 	vneg.f32	s15, s15
 8005430:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	//trapezoid構造体にパラメータを格納
  trapezoid->distance = distance;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	601a      	str	r2, [r3, #0]
  trapezoid->acceleration = acceleration;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	605a      	str	r2, [r3, #4]
  trapezoid->initial_velocity = initial_velocity;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	60da      	str	r2, [r3, #12]
  trapezoid->terminal_velocity = terminal_velocity;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	611a      	str	r2, [r3, #16]
  trapezoid->max_velocity = max_velocity;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	609a      	str	r2, [r3, #8]

  if ( acceleration != 0.0f ){
 8005452:	edd7 7a03 	vldr	s15, [r7, #12]
 8005456:	eef5 7a40 	vcmp.f32	s15, #0.0
 800545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545e:	d02e      	beq.n	80054be <Set_Trapezoid_Params+0xcc>
    trapezoid->accel_distance = ( max_velocity * max_velocity - initial_velocity * initial_velocity ) / ( 2.0f * acceleration );
 8005460:	ed97 7a00 	vldr	s14, [r7]
 8005464:	edd7 7a00 	vldr	s15, [r7]
 8005468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800546c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005470:	edd7 7a02 	vldr	s15, [r7, #8]
 8005474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005478:	ee77 6a67 	vsub.f32	s13, s14, s15
 800547c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005480:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	edc3 7a05 	vstr	s15, [r3, #20]
    trapezoid->decel_distance = ( max_velocity * max_velocity - terminal_velocity * terminal_velocity ) / ( 2.0f * acceleration );
 800548e:	ed97 7a00 	vldr	s14, [r7]
 8005492:	edd7 7a00 	vldr	s15, [r7]
 8005496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800549a:	edd7 6a01 	vldr	s13, [r7, #4]
 800549e:	edd7 7a01 	vldr	s15, [r7, #4]
 80054a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80054aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80054ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	edc3 7a06 	vstr	s15, [r3, #24]
  } else {
    trapezoid->accel_distance = 0.0f;
    trapezoid->decel_distance = 0.0f;
  }
}
 80054bc:	e007      	b.n	80054ce <Set_Trapezoid_Params+0xdc>
    trapezoid->accel_distance = 0.0f;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	615a      	str	r2, [r3, #20]
    trapezoid->decel_distance = 0.0f;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <Acceleration_Control>:
 *		motion *target:目標情報を格納
 *		trapezoid *trapezoid:台形加速情報を読み込み
 */
//+++++++++++++++++++++++++++++++++++++++++++++++
void Acceleration_Control( motion *target, trapezoid *trapezoid )
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  if ( target->distance < trapezoid->accel_distance ){
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	ed93 7a00 	vldr	s14, [r3]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80054f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f8:	d518      	bpl.n	800552c <Acceleration_Control+0x52>
	  if ( target->velocity < trapezoid->max_velocity ){
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	edd3 7a02 	vldr	s15, [r3, #8]
 8005506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800550a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550e:	d504      	bpl.n	800551a <Acceleration_Control+0x40>
		  target->acceleration = trapezoid->acceleration;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]
  //Calculate Target Distance & Velocity
  //v=at, x= v_0*t+(at^2)/2 これを無限に繰り返すことでtargetを更新していく
  //target->velocity += target->acceleration * TIM4_INTERVAL;
  //target->distance += (target->velocity) * TIM4_INTERVAL + (target->acceleration) * TIM4_INTERVAL * TIM4_INTERVAL / 2.0f;

}
 8005518:	e050      	b.n	80055bc <Acceleration_Control+0xe2>
		  target->acceleration = 0.0f;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	609a      	str	r2, [r3, #8]
		  target->velocity = trapezoid->max_velocity;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]
}
 800552a:	e047      	b.n	80055bc <Acceleration_Control+0xe2>
  } else if ( target->distance < trapezoid->distance - trapezoid->decel_distance){
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	ed93 7a00 	vldr	s14, [r3]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	edd3 6a00 	vldr	s13, [r3]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	edd3 7a06 	vldr	s15, [r3, #24]
 800553e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	d518      	bpl.n	800557e <Acceleration_Control+0xa4>
	  if ( target->velocity < trapezoid->max_velocity ){
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	edd3 7a02 	vldr	s15, [r3, #8]
 8005558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005560:	d504      	bpl.n	800556c <Acceleration_Control+0x92>
		  target->acceleration = trapezoid->acceleration;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
}
 800556a:	e027      	b.n	80055bc <Acceleration_Control+0xe2>
		  target->acceleration = 0.0f;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	609a      	str	r2, [r3, #8]
		  target->velocity = trapezoid->max_velocity;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	605a      	str	r2, [r3, #4]
}
 800557c:	e01e      	b.n	80055bc <Acceleration_Control+0xe2>
  } else if ( target->velocity > trapezoid->terminal_velocity ){
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	ed93 7a01 	vldr	s14, [r3, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	edd3 7a04 	vldr	s15, [r3, #16]
 800558a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005592:	dd08      	ble.n	80055a6 <Acceleration_Control+0xcc>
    target->acceleration = -trapezoid->acceleration;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	edd3 7a01 	vldr	s15, [r3, #4]
 800559a:	eef1 7a67 	vneg.f32	s15, s15
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80055a4:	e00a      	b.n	80055bc <Acceleration_Control+0xe2>
	target->acceleration = 0.0f;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
    target->velocity = trapezoid->terminal_velocity;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]
    trapezoid->flag = 0;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <Calculate_Target>:

void Calculate_Target( motion *target )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  target->velocity += target->acceleration * TIM4_INTERVAL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80055dc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800563c <Calculate_Target+0x74>
 80055e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80055e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	edc3 7a01 	vstr	s15, [r3, #4]
  target->distance += target->velocity * TIM4_INTERVAL + target->acceleration * TIM4_INTERVAL * TIM4_INTERVAL / 2.0f;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	ed93 7a00 	vldr	s14, [r3]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80055fa:	eddf 6a10 	vldr	s13, [pc, #64]	; 800563c <Calculate_Target+0x74>
 80055fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	edd3 7a02 	vldr	s15, [r3, #8]
 8005608:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800563c <Calculate_Target+0x74>
 800560c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005610:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800563c <Calculate_Target+0x74>
 8005614:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005618:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800561c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	edc3 7a00 	vstr	s15, [r3]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	3a83126f 	.word	0x3a83126f

08005640 <integralDistance>:

void integralDistance( float *velocity, float *distance )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  *distance += *velocity * TIM4_INTERVAL;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	ed93 7a00 	vldr	s14, [r3]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edd3 7a00 	vldr	s15, [r3]
 8005656:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005674 <integralDistance+0x34>
 800565a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800565e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	edc3 7a00 	vstr	s15, [r3]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	3a83126f 	.word	0x3a83126f

08005678 <PID_Control>:
トルク.左 = 速度制御量 - 角度制御量 - 壁制御量;
 */

void PID_Control(motion *target, motion *left, motion *right, PID_info *store ,
		PID_Gain *gain ,duty *duty, trapezoid *trapezoid, uint8_t rotation_flag)
{
 8005678:	b480      	push	{r7}
 800567a:	b08f      	sub	sp, #60	; 0x3c
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  int32_t duty_l, duty_r;
  float error_l, error_r;
  float diff_l, diff_r;
  float Kp, Ki, Kd;

  Kp = gain->Kp;
 8005686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Ki = gain->Ki;
 800568c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
  Kd = gain->Kd;
 8005692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	627b      	str	r3, [r7, #36]	; 0x24

  if ( trapezoid->reverse_flag == 1 ){
 8005698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569a:	7f5b      	ldrb	r3, [r3, #29]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d115      	bne.n	80056ce <PID_Control+0x56>
    left->velocity = -1.0f * ( left->velocity + right->velocity ) / 2.0f;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80056ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056b2:	eeb1 7a67 	vneg.f32	s14, s15
 80056b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	edc3 7a01 	vstr	s15, [r3, #4]
    right->velocity = left->velocity;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	e012      	b.n	80056f4 <PID_Control+0x7c>
  } else {
    left->velocity = ( left->velocity + right->velocity ) / 2.0f;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80056da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	edc3 7a01 	vstr	s15, [r3, #4]
    right->velocity = left->velocity;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]
  }

  //wall control

  if (rotation_flag){
 80056f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <PID_Control+0xb0>
    left->velocity += side_wall_control_value;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8005702:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <PID_Control+0x234>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	edc3 7a01 	vstr	s15, [r3, #4]
    right->velocity += side_wall_control_value;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	ed93 7a01 	vldr	s14, [r3, #4]
 8005718:	4b64      	ldr	r3, [pc, #400]	; (80058ac <PID_Control+0x234>)
 800571a:	edd3 7a00 	vldr	s15, [r3]
 800571e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	edc3 7a01 	vstr	s15, [r3, #4]
  }
*/


  //Calculate error
  error_l = ( target->velocity - left->velocity );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	ed93 7a01 	vldr	s14, [r3, #4]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	edd3 7a01 	vldr	s15, [r3, #4]
 8005734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005738:	edc7 7a08 	vstr	s15, [r7, #32]
  error_r = ( target->velocity - right->velocity );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	edd3 7a01 	vldr	s15, [r3, #4]
 8005748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800574c:	edc7 7a07 	vstr	s15, [r7, #28]

  //偏差の変化量を計算
  diff_l = error_l - (store->previous_error_l);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	edd3 7a00 	vldr	s15, [r3]
 8005756:	ed97 7a08 	vldr	s14, [r7, #32]
 800575a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800575e:	edc7 7a06 	vstr	s15, [r7, #24]
  diff_r = error_r - (store->previous_error_r);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	edd3 7a02 	vldr	s15, [r3, #8]
 8005768:	ed97 7a07 	vldr	s14, [r7, #28]
 800576c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005770:	edc7 7a05 	vstr	s15, [r7, #20]

  //積分値を計算
  store->sum_l += (error_l + (store->previous_error_l))/ 2.0f * TIM4_INTERVAL;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	ed93 7a01 	vldr	s14, [r3, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	edd3 6a00 	vldr	s13, [r3]
 8005780:	edd7 7a08 	vldr	s15, [r7, #32]
 8005784:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005788:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800578c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005790:	eddf 6a47 	vldr	s13, [pc, #284]	; 80058b0 <PID_Control+0x238>
 8005794:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	edc3 7a01 	vstr	s15, [r3, #4]
  store->sum_r += (error_r + (store->previous_error_r))/ 2.0f * TIM4_INTERVAL;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80057ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80057b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80057ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80057be:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80058b0 <PID_Control+0x238>
 80057c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80057c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	edc3 7a03 	vstr	s15, [r3, #12]

  //出力を計算
  duty_l = (int16_t)(Kp * error_l + Ki * (store->sum_l) + Kd * diff_l);
 80057d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80057d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80057d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	edd3 6a01 	vldr	s13, [r3, #4]
 80057e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80057f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80057f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005802:	ee17 3a90 	vmov	r3, s15
 8005806:	b21b      	sxth	r3, r3
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
  duty_r = (int16_t)(Kp + error_r + Ki * (store->sum_r) + Kd * diff_r);
 800580a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800580e:	edd7 7a07 	vldr	s15, [r7, #28]
 8005812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	edd3 6a03 	vldr	s13, [r3, #12]
 800581c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005828:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800582c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800583c:	ee17 3a90 	vmov	r3, s15
 8005840:	b21b      	sxth	r3, r3
 8005842:	633b      	str	r3, [r7, #48]	; 0x30

  //previous_errorに格納
  store->previous_error_l = error_l;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	601a      	str	r2, [r3, #0]
  store->previous_error_r = error_r;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	609a      	str	r2, [r3, #8]


  if (rotation_flag){
 8005850:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <PID_Control+0x1e6>
    duty_l = -1 * duty_l;
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	425b      	negs	r3, r3
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if(trapezoid->reverse_flag)
 800585e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005860:	7f5b      	ldrb	r3, [r3, #29]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <PID_Control+0x1fc>
  {
	  duty_l = -1 * duty_l;
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	425b      	negs	r3, r3
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
	  duty_r = -1 * duty_r;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	425b      	negs	r3, r3
 8005872:	633b      	str	r3, [r7, #48]	; 0x30
  }

  	  duty->left += duty_l;
 8005874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800587a:	b29a      	uxth	r2, r3
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	b29b      	uxth	r3, r3
 8005880:	4413      	add	r3, r2
 8005882:	b29b      	uxth	r3, r3
 8005884:	b21a      	sxth	r2, r3
 8005886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005888:	801a      	strh	r2, [r3, #0]
  	  duty->right += duty_r;
 800588a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005890:	b29a      	uxth	r2, r3
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	b29b      	uxth	r3, r3
 8005896:	4413      	add	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	b21a      	sxth	r2, r3
 800589c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589e:	805a      	strh	r2, [r3, #2]
}
 80058a0:	bf00      	nop
 80058a2:	373c      	adds	r7, #60	; 0x3c
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	200028c4 	.word	0x200028c4
 80058b0:	3a83126f 	.word	0x3a83126f

080058b4 <Side_Wall_Control>:
//Set_Trapezoid_Params
//->interrupt.c
//+++++++++++++++++++++++++++++++++++++++++++++++

void Side_Wall_Control(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
	float error = 0.0f;
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	607b      	str	r3, [r7, #4]
	side_wall_control_value = 0.0f;
 80058c0:	4b5e      	ldr	r3, [pc, #376]	; (8005a3c <Side_Wall_Control+0x188>)
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
	float diff_value = 7.0f;
 80058c8:	4b5d      	ldr	r3, [pc, #372]	; (8005a40 <Side_Wall_Control+0x18c>)
 80058ca:	603b      	str	r3, [r7, #0]

	if(MF.FLAG.SIDE_WALL_CTRL && (trans_target.velocity > 300.0f) && (difference.sideL < diff_value) && (difference.sideR < diff_value)){
 80058cc:	4b5d      	ldr	r3, [pc, #372]	; (8005a44 <Side_Wall_Control+0x190>)
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a2 	beq.w	8005a20 <Side_Wall_Control+0x16c>
 80058dc:	4b5a      	ldr	r3, [pc, #360]	; (8005a48 <Side_Wall_Control+0x194>)
 80058de:	edd3 7a01 	vldr	s15, [r3, #4]
 80058e2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005a4c <Side_Wall_Control+0x198>
 80058e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ee:	f340 8097 	ble.w	8005a20 <Side_Wall_Control+0x16c>
 80058f2:	4b57      	ldr	r3, [pc, #348]	; (8005a50 <Side_Wall_Control+0x19c>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	ed97 7a00 	vldr	s14, [r7]
 8005902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590a:	f340 8089 	ble.w	8005a20 <Side_Wall_Control+0x16c>
 800590e:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <Side_Wall_Control+0x19c>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	ed97 7a00 	vldr	s14, [r7]
 800591e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	dd7b      	ble.n	8005a20 <Side_Wall_Control+0x16c>

		//左右共に制御閾値より大きい時
		if((sensor_data.sideL > control_threshold.sideL) && (sensor_data.sideR > control_threshold.sideR)){
 8005928:	4b4a      	ldr	r3, [pc, #296]	; (8005a54 <Side_Wall_Control+0x1a0>)
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <Side_Wall_Control+0x1a4>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	429a      	cmp	r2, r3
 8005932:	d91c      	bls.n	800596e <Side_Wall_Control+0xba>
 8005934:	4b47      	ldr	r3, [pc, #284]	; (8005a54 <Side_Wall_Control+0x1a0>)
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <Side_Wall_Control+0x1a4>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	429a      	cmp	r2, r3
 800593e:	d916      	bls.n	800596e <Side_Wall_Control+0xba>
	//	if(wall_data.sideL == 1 && wall_data.sideR == 1){
		      error = (float)((sensor_data.sideL - base_data.sideL)
 8005940:	4b44      	ldr	r3, [pc, #272]	; (8005a54 <Side_Wall_Control+0x1a0>)
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <Side_Wall_Control+0x1a8>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	1ad2      	subs	r2, r2, r3
		    		  	  -(sensor_data.sideR - base_data.sideR));
 800594a:	4b44      	ldr	r3, [pc, #272]	; (8005a5c <Side_Wall_Control+0x1a8>)
 800594c:	68d9      	ldr	r1, [r3, #12]
 800594e:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <Side_Wall_Control+0x1a0>)
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	1acb      	subs	r3, r1, r3
 8005954:	4413      	add	r3, r2
		      error = (float)((sensor_data.sideL - base_data.sideL)
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	edc7 7a01 	vstr	s15, [r7, #4]
		      Front_LED_Light(0,1,0);
 8005962:	2200      	movs	r2, #0
 8005964:	2101      	movs	r1, #1
 8005966:	2000      	movs	r0, #0
 8005968:	f001 faac 	bl	8006ec4 <Front_LED_Light>
 800596c:	e041      	b.n	80059f2 <Side_Wall_Control+0x13e>
		}

		//左右共に制御閾値より小さい時
		else if((sensor_data.sideL <= control_threshold.sideL)&&(sensor_data.sideR <= control_threshold.sideR)){
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <Side_Wall_Control+0x1a0>)
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <Side_Wall_Control+0x1a4>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d80e      	bhi.n	8005998 <Side_Wall_Control+0xe4>
 800597a:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <Side_Wall_Control+0x1a0>)
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <Side_Wall_Control+0x1a4>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	429a      	cmp	r2, r3
 8005984:	d808      	bhi.n	8005998 <Side_Wall_Control+0xe4>
	//	else if(wall_data.sideL == 0 && wall_data.sideR == 0){
			error = 0.0f;
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	607b      	str	r3, [r7, #4]
		      Front_LED_Light(0,0,0);
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	2000      	movs	r0, #0
 8005992:	f001 fa97 	bl	8006ec4 <Front_LED_Light>
 8005996:	e02c      	b.n	80059f2 <Side_Wall_Control+0x13e>

		}

		//右だけ制御閾値より大きい時
		else if(sensor_data.sideR > control_threshold.sideR){
 8005998:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <Side_Wall_Control+0x1a0>)
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <Side_Wall_Control+0x1a4>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d914      	bls.n	80059ce <Side_Wall_Control+0x11a>
			//	else if(wall_data.sideR == 1 && wall_data.sideL ==  0){

			error = (float) -2.0f * (sensor_data.sideR - base_data.sideR);
 80059a4:	4b2b      	ldr	r3, [pc, #172]	; (8005a54 <Side_Wall_Control+0x1a0>)
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <Side_Wall_Control+0x1a8>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80059ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059be:	edc7 7a01 	vstr	s15, [r7, #4]
		      Front_LED_Light(0,0,1);
 80059c2:	2201      	movs	r2, #1
 80059c4:	2100      	movs	r1, #0
 80059c6:	2000      	movs	r0, #0
 80059c8:	f001 fa7c 	bl	8006ec4 <Front_LED_Light>
 80059cc:	e011      	b.n	80059f2 <Side_Wall_Control+0x13e>

		}
		//左だけ制御閾値より大きい時
		else {
			error = (float) 2.0f * (sensor_data.sideL - base_data.sideL);
 80059ce:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <Side_Wall_Control+0x1a0>)
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <Side_Wall_Control+0x1a8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059e4:	edc7 7a01 	vstr	s15, [r7, #4]
		      Front_LED_Light(1,0,0);
 80059e8:	2200      	movs	r2, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	2001      	movs	r0, #1
 80059ee:	f001 fa69 	bl	8006ec4 <Front_LED_Light>

		}

		//上限下限設定
	    if ( error > 100.0f ){
 80059f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80059f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005a60 <Side_Wall_Control+0x1ac>
 80059fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	dd02      	ble.n	8005a0a <Side_Wall_Control+0x156>
		        error = 100.0f;
 8005a04:	4b17      	ldr	r3, [pc, #92]	; (8005a64 <Side_Wall_Control+0x1b0>)
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	e00a      	b.n	8005a20 <Side_Wall_Control+0x16c>
		} else if ( error < -100.0f ){
 8005a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005a68 <Side_Wall_Control+0x1b4>
 8005a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1a:	d501      	bpl.n	8005a20 <Side_Wall_Control+0x16c>
		        error = -100.0f;
 8005a1c:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <Side_Wall_Control+0x1b8>)
 8005a1e:	607b      	str	r3, [r7, #4]
		}
	}

	side_wall_control_value = sensor_gain.Kp * error;
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <Side_Wall_Control+0x1bc>)
 8005a22:	ed93 7a00 	vldr	s14, [r3]
 8005a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <Side_Wall_Control+0x188>)
 8005a30:	edc3 7a00 	vstr	s15, [r3]

	} else {
		sidewall_control_value = 0.0f;
}
*/
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200028c4 	.word	0x200028c4
 8005a40:	40e00000 	.word	0x40e00000
 8005a44:	200029dc 	.word	0x200029dc
 8005a48:	200026f4 	.word	0x200026f4
 8005a4c:	43960000 	.word	0x43960000
 8005a50:	200025a4 	.word	0x200025a4
 8005a54:	20000238 	.word	0x20000238
 8005a58:	200026d4 	.word	0x200026d4
 8005a5c:	20002684 	.word	0x20002684
 8005a60:	42c80000 	.word	0x42c80000
 8005a64:	42c80000 	.word	0x42c80000
 8005a68:	c2c80000 	.word	0xc2c80000
 8005a6c:	c2c80000 	.word	0xc2c80000
 8005a70:	200026e8 	.word	0x200026e8

08005a74 <Front_Wall_Control>:
// 前壁制御
// 前壁制御フラグON・前壁有・速度が低くなってきたら制御をかける
//+++++++++++++++++++++++++++++++++++++++++++++++

void Front_Wall_Control( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  if ( MF.FLAG.FRONT_WALL_CTRL == 1 && (wall_info & 0x80) && trans_machine.velocity < 200.0f ){
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <Front_Wall_Control+0x64>)
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d11f      	bne.n	8005ac6 <Front_Wall_Control+0x52>
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <Front_Wall_Control+0x68>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	da1a      	bge.n	8005ac6 <Front_Wall_Control+0x52>
 8005a90:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <Front_Wall_Control+0x6c>)
 8005a92:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a96:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8005ae4 <Front_Wall_Control+0x70>
 8005a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa2:	d510      	bpl.n	8005ac6 <Front_Wall_Control+0x52>
    front_wall_control_value = (float) 0.2f * (sensor_data.frontL - control_threshold.frontL);
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <Front_Wall_Control+0x74>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b10      	ldr	r3, [pc, #64]	; (8005aec <Front_Wall_Control+0x78>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005af0 <Front_Wall_Control+0x7c>
 8005aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <Front_Wall_Control+0x80>)
 8005ac0:	edc3 7a00 	vstr	s15, [r3]
 8005ac4:	e003      	b.n	8005ace <Front_Wall_Control+0x5a>
  } else {
    front_wall_control_value = 0.0f;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <Front_Wall_Control+0x80>)
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	200029dc 	.word	0x200029dc
 8005adc:	2000231c 	.word	0x2000231c
 8005ae0:	200029f0 	.word	0x200029f0
 8005ae4:	43480000 	.word	0x43480000
 8005ae8:	20000238 	.word	0x20000238
 8005aec:	200026d4 	.word	0x200026d4
 8005af0:	3e4ccccd 	.word	0x3e4ccccd
 8005af4:	200024ac 	.word	0x200024ac

08005af8 <Motor_Init>:
 */

#include "global.h"


void Motor_Init(){
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3)!=HAL_OK)
 8005afc:	2108      	movs	r1, #8
 8005afe:	480c      	ldr	r0, [pc, #48]	; (8005b30 <Motor_Init+0x38>)
 8005b00:	f7fe f9f2 	bl	8003ee8 <HAL_TIM_PWM_Start>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <Motor_Init+0x1c>
	  {
		  printf("Ch3 Start Error\r\n");
 8005b0a:	480a      	ldr	r0, [pc, #40]	; (8005b34 <Motor_Init+0x3c>)
 8005b0c:	f005 f8a6 	bl	800ac5c <puts>
		  Error_Handler();
 8005b10:	f001 ffde 	bl	8007ad0 <Error_Handler>
	  }

	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4)!=HAL_OK)
 8005b14:	210c      	movs	r1, #12
 8005b16:	4806      	ldr	r0, [pc, #24]	; (8005b30 <Motor_Init+0x38>)
 8005b18:	f7fe f9e6 	bl	8003ee8 <HAL_TIM_PWM_Start>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <Motor_Init+0x34>
	  {
		  printf("Ch4 Start Error\r\n");
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <Motor_Init+0x40>)
 8005b24:	f005 f89a 	bl	800ac5c <puts>
		  Error_Handler();
 8005b28:	f001 ffd2 	bl	8007ad0 <Error_Handler>
	  }
}
 8005b2c:	bf00      	nop
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200024b0 	.word	0x200024b0
 8005b34:	0800cb58 	.word	0x0800cb58
 8005b38:	0800cb6c 	.word	0x0800cb6c

08005b3c <Straight_Mode>:
//Straight_Mode
// 加速パラメータを直進モードに設定->走行フラグを立てる
//+++++++++++++++++++++++++++++++++++++++++++++++
void Straight_Mode( float distance, float acceleration, float initial_velocity,
		float terminal_velocity, float max_velocity)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	ed87 0a05 	vstr	s0, [r7, #20]
 8005b46:	edc7 0a04 	vstr	s1, [r7, #16]
 8005b4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8005b4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005b52:	ed87 2a01 	vstr	s4, [r7, #4]

	Set_Trapezoid_Params( &trans_trapezoid_params, distance, acceleration,
 8005b56:	ed97 2a01 	vldr	s4, [r7, #4]
 8005b5a:	edd7 1a02 	vldr	s3, [r7, #8]
 8005b5e:	ed97 1a03 	vldr	s2, [r7, #12]
 8005b62:	edd7 0a04 	vldr	s1, [r7, #16]
 8005b66:	ed97 0a05 	vldr	s0, [r7, #20]
 8005b6a:	4807      	ldr	r0, [pc, #28]	; (8005b88 <Straight_Mode+0x4c>)
 8005b6c:	f7ff fc41 	bl	80053f2 <Set_Trapezoid_Params>
		  initial_velocity, terminal_velocity, max_velocity );

	trans_trapezoid_params.flag = 1;//走行フラグ
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <Straight_Mode+0x4c>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	771a      	strb	r2, [r3, #28]
	trans_target.velocity = trans_trapezoid_params.initial_velocity;
 8005b76:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <Straight_Mode+0x4c>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <Straight_Mode+0x50>)
 8005b7c:	6053      	str	r3, [r2, #4]
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200025c0 	.word	0x200025c0
 8005b8c:	200026f4 	.word	0x200026f4

08005b90 <Stay_Straight>:
//Stay_Drive <- waitStraight
// 直進モード続行
//+++++++++++++++++++++++++++++++++++++++++++++++

void Stay_Straight(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0

	while(trans_trapezoid_params.flag == 1){
 8005b94:	bf00      	nop
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <Stay_Straight+0x74>)
 8005b98:	7f1b      	ldrb	r3, [r3, #28]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d0fa      	beq.n	8005b96 <Stay_Straight+0x6>

	}
	//reset target
	trans_target.distance = 0.0f;
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <Stay_Straight+0x78>)
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
	trans_target.velocity = trans_trapezoid_params.terminal_velocity;
 8005ba8:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <Stay_Straight+0x74>)
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <Stay_Straight+0x78>)
 8005bae:	6053      	str	r3, [r2, #4]
	trans_target.acceleration = 0.0f;
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <Stay_Straight+0x78>)
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	609a      	str	r2, [r3, #8]

	//reset PID
	trans_info.previous_error_l = 0.0f;
 8005bb8:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <Stay_Straight+0x7c>)
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
	trans_info.previous_error_r = 0.0f;
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <Stay_Straight+0x7c>)
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
	trans_info.sum_l = 0.0f;
 8005bc8:	4b10      	ldr	r3, [pc, #64]	; (8005c0c <Stay_Straight+0x7c>)
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]
	trans_info.sum_r = 0.0f;
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <Stay_Straight+0x7c>)
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	60da      	str	r2, [r3, #12]

	//reset reverse flag
	trans_trapezoid_params.reverse_flag = 0;//後退フラグ
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <Stay_Straight+0x74>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	775a      	strb	r2, [r3, #29]
	rot_trapezoid_params.reverse_flag = 0;//右ターンフラグ
 8005bde:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <Stay_Straight+0x80>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	775a      	strb	r2, [r3, #29]

	MF.FLAG.SIDE_WALL_CTRL = 0;
 8005be4:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <Stay_Straight+0x84>)
 8005be6:	8813      	ldrh	r3, [r2, #0]
 8005be8:	f36f 03c3 	bfc	r3, #3, #1
 8005bec:	8013      	strh	r3, [r2, #0]
	MF.FLAG.FRONT_WALL_CTRL = 0;
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <Stay_Straight+0x84>)
 8005bf0:	8813      	ldrh	r3, [r2, #0]
 8005bf2:	f36f 1304 	bfc	r3, #4, #1
 8005bf6:	8013      	strh	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	200025c0 	.word	0x200025c0
 8005c08:	200026f4 	.word	0x200026f4
 8005c0c:	20002734 	.word	0x20002734
 8005c10:	20002714 	.word	0x20002714
 8005c14:	200029dc 	.word	0x200029dc

08005c18 <Rotation_Mode>:
//Rotation_Mode
//回転モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++
void Rotation_Mode( float angle, float angular_acceleration,
		float max_angular_velocity, float machine_velocity )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c22:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c26:	ed87 1a01 	vstr	s2, [r7, #4]
 8005c2a:	edc7 1a00 	vstr	s3, [r7]
	Set_Trapezoid_Params( &rot_trapezoid_params, angle, angular_acceleration,
 8005c2e:	ed97 2a01 	vldr	s4, [r7, #4]
 8005c32:	eddf 1a11 	vldr	s3, [pc, #68]	; 8005c78 <Rotation_Mode+0x60>
 8005c36:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005c78 <Rotation_Mode+0x60>
 8005c3a:	edd7 0a02 	vldr	s1, [r7, #8]
 8005c3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c42:	480e      	ldr	r0, [pc, #56]	; (8005c7c <Rotation_Mode+0x64>)
 8005c44:	f7ff fbd5 	bl	80053f2 <Set_Trapezoid_Params>
		  	  	  	  0.0f, 0.0f, max_angular_velocity );

  rot_target.velocity = 0.0f;
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <Rotation_Mode+0x68>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]
  trans_target.acceleration = 0.0f;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <Rotation_Mode+0x6c>)
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	609a      	str	r2, [r3, #8]
  trans_target.velocity = machine_velocity;
 8005c58:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <Rotation_Mode+0x6c>)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6053      	str	r3, [r2, #4]

  rot_trapezoid_params.flag = 1;//走行フラグ
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <Rotation_Mode+0x64>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	771a      	strb	r2, [r3, #28]

  Stay_Rotation();
 8005c64:	f000 f810 	bl	8005c88 <Stay_Rotation>
  rot_trapezoid_params.flag = 0;//走行フラグ
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <Rotation_Mode+0x64>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	771a      	strb	r2, [r3, #28]

}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	20002714 	.word	0x20002714
 8005c80:	20002508 	.word	0x20002508
 8005c84:	200026f4 	.word	0x200026f4

08005c88 <Stay_Rotation>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//Stay_Rotation <- setRotation
// 回転モード続行
//+++++++++++++++++++++++++++++++++++++++++++++++

void Stay_Rotation(){
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
	//フラグが立っている間は回転
	while(rot_trapezoid_params.flag){
 8005c8c:	bf00      	nop
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <Stay_Rotation+0x40>)
 8005c90:	7f1b      	ldrb	r3, [r3, #28]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1fa      	bne.n	8005c8e <Stay_Rotation+0x6>
	}

	//初期化
	trans_target.distance = 0.0f;
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <Stay_Rotation+0x44>)
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

	rot_target.acceleration = 0.0f;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <Stay_Rotation+0x48>)
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	609a      	str	r2, [r3, #8]
	rot_target.velocity = 0.0f;
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <Stay_Rotation+0x48>)
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	605a      	str	r2, [r3, #4]
	rot_target.distance = 0.0f;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <Stay_Rotation+0x48>)
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
	rot_info.previous_error_l = 0.0f;
	rot_info.previous_error_r = 0.0f;
	rot_info.sum_l = 0.0f;
	rot_info.sum_r = 0.0f;
*/
	rot_trapezoid_params.reverse_flag = 0;
 8005cb8:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <Stay_Rotation+0x40>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	775a      	strb	r2, [r3, #29]
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	20002714 	.word	0x20002714
 8005ccc:	200026f4 	.word	0x200026f4
 8005cd0:	20002508 	.word	0x20002508

08005cd4 <Wait_Motion>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//Wait_Motion <- waitMotion
// 動作終了を待機
//+++++++++++++++++++++++++++++++++++++++++++++++

void Wait_Motion(volatile int32_t time_ms){
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	  motion_counter = 0;
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <Wait_Motion+0x48>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]

	  rot_info.sum_l = 0.0f;
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <Wait_Motion+0x4c>)
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
	  rot_info.sum_r= 0.0f;
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <Wait_Motion+0x4c>)
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	60da      	str	r2, [r3, #12]

	  while( motion_counter < time_ms ){
 8005cf2:	bf00      	nop
 8005cf4:	4b09      	ldr	r3, [pc, #36]	; (8005d1c <Wait_Motion+0x48>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	dbfa      	blt.n	8005cf4 <Wait_Motion+0x20>
	    // 動作をしない

	  }
	  rot_info.sum_l = 0.0f;
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <Wait_Motion+0x4c>)
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	605a      	str	r2, [r3, #4]
	  rot_info.sum_r= 0.0f;
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <Wait_Motion+0x4c>)
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	60da      	str	r2, [r3, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	200025bc 	.word	0x200025bc
 8005d20:	20002700 	.word	0x20002700

08005d24 <Wait_Slalom_Out>:


void Wait_Slalom_Out(void){
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0

	while(trans_trapezoid_params.flag){
 8005d28:	bf00      	nop
 8005d2a:	4b16      	ldr	r3, [pc, #88]	; (8005d84 <Wait_Slalom_Out+0x60>)
 8005d2c:	7f1b      	ldrb	r3, [r3, #28]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1fa      	bne.n	8005d2a <Wait_Slalom_Out+0x6>

	}
	trans_target.acceleration = 0.0f;
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <Wait_Slalom_Out+0x64>)
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	609a      	str	r2, [r3, #8]
	trans_target.distance = 0.0f;
 8005d3c:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <Wait_Slalom_Out+0x64>)
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
	trans_target.velocity = trans_trapezoid_params.terminal_velocity;
 8005d44:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <Wait_Slalom_Out+0x60>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <Wait_Slalom_Out+0x64>)
 8005d4a:	6053      	str	r3, [r2, #4]

	trans_trapezoid_params.reverse_flag = 0;
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <Wait_Slalom_Out+0x60>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	775a      	strb	r2, [r3, #29]

	trans_info.previous_error_l = 0.0f;
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <Wait_Slalom_Out+0x68>)
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
	trans_info.previous_error_r = 0.0f;
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <Wait_Slalom_Out+0x68>)
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	609a      	str	r2, [r3, #8]
	trans_info.sum_l = 0.0f;
 8005d62:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <Wait_Slalom_Out+0x68>)
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	605a      	str	r2, [r3, #4]
	trans_info.sum_r = 0.0f;
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <Wait_Slalom_Out+0x68>)
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	60da      	str	r2, [r3, #12]

	rot_trapezoid_params.reverse_flag = 0;
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <Wait_Slalom_Out+0x6c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	775a      	strb	r2, [r3, #29]

}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	200025c0 	.word	0x200025c0
 8005d88:	200026f4 	.word	0x200026f4
 8005d8c:	20002734 	.word	0x20002734
 8005d90:	20002714 	.word	0x20002714

08005d94 <Set_Slalom_Params>:
// スラロームパラメータ設定
//+++++++++++++++++++++++++++++++++++++++++++++++


void Set_Slalom_Params(slalom_params *slalom, float angular_acceleration, float max_angular_velocity, float offset_in, float offset_out)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6178      	str	r0, [r7, #20]
 8005d9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8005da0:	edc7 0a03 	vstr	s1, [r7, #12]
 8005da4:	ed87 1a02 	vstr	s2, [r7, #8]
 8005da8:	edc7 1a01 	vstr	s3, [r7, #4]
	slalom->angular_acceleration = angular_acceleration;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	601a      	str	r2, [r3, #0]
	slalom->max_angular_velocity = max_angular_velocity;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	605a      	str	r2, [r3, #4]
	slalom->offset_in = offset_in;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	609a      	str	r2, [r3, #8]
	slalom->offset_out = offset_out;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <Accel_Half_Section>:
//Accel_Half_Section
// 半区画加速
//+++++++++++++++++++++++++++++++++++++++++++++++

void Accel_Half_Section(float acceleration , float velocity)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dda:	edc7 0a00 	vstr	s1, [r7]
	  MF.FLAG.SIDE_WALL_CTRL = 0;  // 壁制御有効
 8005dde:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <Accel_Half_Section+0x3c>)
 8005de0:	8813      	ldrh	r3, [r2, #0]
 8005de2:	f36f 03c3 	bfc	r3, #3, #1
 8005de6:	8013      	strh	r3, [r2, #0]
	Straight_Mode( HALF_SECTION, acceleration, 0.0f, velocity, velocity );
 8005de8:	ed97 2a00 	vldr	s4, [r7]
 8005dec:	edd7 1a00 	vldr	s3, [r7]
 8005df0:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8005e10 <Accel_Half_Section+0x40>
 8005df4:	edd7 0a01 	vldr	s1, [r7, #4]
 8005df8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005e14 <Accel_Half_Section+0x44>
 8005dfc:	f7ff fe9e 	bl	8005b3c <Straight_Mode>
	Stay_Straight();//目標距離到達まで待機
 8005e00:	f7ff fec6 	bl	8005b90 <Stay_Straight>
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	200029dc 	.word	0x200029dc
 8005e10:	00000000 	.word	0x00000000
 8005e14:	42b40000 	.word	0x42b40000

08005e18 <Forward_One_Section>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//Forward_One_Section
// 1区間等速前進
//+++++++++++++++++++++++++++++++++++++++++++++++
void Forward_One_Section(float velocity)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	ed87 0a01 	vstr	s0, [r7, #4]
	MF.FLAG.SIDE_WALL_CTRL = 1;
 8005e22:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <Forward_One_Section+0x38>)
 8005e24:	8813      	ldrh	r3, [r2, #0]
 8005e26:	f043 0308 	orr.w	r3, r3, #8
 8005e2a:	8013      	strh	r3, [r2, #0]
	Straight_Mode( ONE_SECTION, 0.0f, velocity, velocity, velocity );
 8005e2c:	ed97 2a01 	vldr	s4, [r7, #4]
 8005e30:	edd7 1a01 	vldr	s3, [r7, #4]
 8005e34:	ed97 1a01 	vldr	s2, [r7, #4]
 8005e38:	eddf 0a06 	vldr	s1, [pc, #24]	; 8005e54 <Forward_One_Section+0x3c>
 8005e3c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005e58 <Forward_One_Section+0x40>
 8005e40:	f7ff fe7c 	bl	8005b3c <Straight_Mode>
	Stay_Straight();//目標距離到達まで待機
 8005e44:	f7ff fea4 	bl	8005b90 <Stay_Straight>

}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200029dc 	.word	0x200029dc
 8005e54:	00000000 	.word	0x00000000
 8005e58:	43340000 	.word	0x43340000

08005e5c <Adjust_Forward>:

void Adjust_Forward( float acceleration, float velocity )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e66:	edc7 0a00 	vstr	s1, [r7]
//  wall_out_flag = 1;          // 壁切れを読みの許可
	MF.FLAG.SIDE_WALL_CTRL = 0;
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <Adjust_Forward+0x3c>)
 8005e6c:	8813      	ldrh	r3, [r2, #0]
 8005e6e:	f36f 03c3 	bfc	r3, #3, #1
 8005e72:	8013      	strh	r3, [r2, #0]
	Straight_Mode( ADJUST_FRONT_DISTANCE, acceleration, 0.0f, velocity, velocity );
 8005e74:	ed97 2a00 	vldr	s4, [r7]
 8005e78:	edd7 1a00 	vldr	s3, [r7]
 8005e7c:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8005e9c <Adjust_Forward+0x40>
 8005e80:	edd7 0a01 	vldr	s1, [r7, #4]
 8005e84:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005ea0 <Adjust_Forward+0x44>
 8005e88:	f7ff fe58 	bl	8005b3c <Straight_Mode>
	Stay_Straight();
 8005e8c:	f7ff fe80 	bl	8005b90 <Stay_Straight>
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	200029dc 	.word	0x200029dc
 8005e9c:	00000000 	.word	0x00000000
 8005ea0:	43110000 	.word	0x43110000

08005ea4 <Adjust_Back>:


void Adjust_Back( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	Straight_Mode( -150.0f, 1500.0f, 0.0f, 0.0f, 150.0f );
 8005ea8:	ed9f 2a07 	vldr	s4, [pc, #28]	; 8005ec8 <Adjust_Back+0x24>
 8005eac:	eddf 1a07 	vldr	s3, [pc, #28]	; 8005ecc <Adjust_Back+0x28>
 8005eb0:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005ecc <Adjust_Back+0x28>
 8005eb4:	eddf 0a06 	vldr	s1, [pc, #24]	; 8005ed0 <Adjust_Back+0x2c>
 8005eb8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005ed4 <Adjust_Back+0x30>
 8005ebc:	f7ff fe3e 	bl	8005b3c <Straight_Mode>
	Stay_Straight();
 8005ec0:	f7ff fe66 	bl	8005b90 <Stay_Straight>
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	43160000 	.word	0x43160000
 8005ecc:	00000000 	.word	0x00000000
 8005ed0:	44bb8000 	.word	0x44bb8000
 8005ed4:	c3160000 	.word	0xc3160000

08005ed8 <Accel_Known_Section>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//Accel_Known_Section
// 既知区間加速前進
//+++++++++++++++++++++++++++++++++++++++++++++++
void Accel_Known_Section(float acceleration, float initial_velocity ,float terminal_velocity)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ee2:	edc7 0a02 	vstr	s1, [r7, #8]
 8005ee6:	ed87 1a01 	vstr	s2, [r7, #4]
	MF.FLAG.SIDE_WALL_CTRL = 0;
 8005eea:	4a0b      	ldr	r2, [pc, #44]	; (8005f18 <Accel_Known_Section+0x40>)
 8005eec:	8813      	ldrh	r3, [r2, #0]
 8005eee:	f36f 03c3 	bfc	r3, #3, #1
 8005ef2:	8013      	strh	r3, [r2, #0]
	Straight_Mode( ONE_SECTION, acceleration, initial_velocity, terminal_velocity, terminal_velocity );
 8005ef4:	ed97 2a01 	vldr	s4, [r7, #4]
 8005ef8:	edd7 1a01 	vldr	s3, [r7, #4]
 8005efc:	ed97 1a02 	vldr	s2, [r7, #8]
 8005f00:	edd7 0a03 	vldr	s1, [r7, #12]
 8005f04:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005f1c <Accel_Known_Section+0x44>
 8005f08:	f7ff fe18 	bl	8005b3c <Straight_Mode>
	Stay_Straight();//目標距離到達まで待機
 8005f0c:	f7ff fe40 	bl	8005b90 <Stay_Straight>

}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200029dc 	.word	0x200029dc
 8005f1c:	43340000 	.word	0x43340000

08005f20 <Decel_Known_Section>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//Decel_Known_Section
// 既知区間加速前進
//+++++++++++++++++++++++++++++++++++++++++++++++
void Decel_Known_Section(float acceleration, float initial_velocity ,float terminal_velocity)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f2e:	ed87 1a01 	vstr	s2, [r7, #4]
	MF.FLAG.SIDE_WALL_CTRL = 0;
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <Decel_Known_Section+0x4c>)
 8005f34:	8813      	ldrh	r3, [r2, #0]
 8005f36:	f36f 03c3 	bfc	r3, #3, #1
 8005f3a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.FRONT_WALL_CTRL = 1;
 8005f3c:	4a0b      	ldr	r2, [pc, #44]	; (8005f6c <Decel_Known_Section+0x4c>)
 8005f3e:	8813      	ldrh	r3, [r2, #0]
 8005f40:	f043 0310 	orr.w	r3, r3, #16
 8005f44:	8013      	strh	r3, [r2, #0]
	Straight_Mode( ONE_SECTION, acceleration, initial_velocity, terminal_velocity, initial_velocity );
 8005f46:	ed97 2a02 	vldr	s4, [r7, #8]
 8005f4a:	edd7 1a01 	vldr	s3, [r7, #4]
 8005f4e:	ed97 1a02 	vldr	s2, [r7, #8]
 8005f52:	edd7 0a03 	vldr	s1, [r7, #12]
 8005f56:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005f70 <Decel_Known_Section+0x50>
 8005f5a:	f7ff fdef 	bl	8005b3c <Straight_Mode>
	Stay_Straight();//目標距離到達まで待機
 8005f5e:	f7ff fe17 	bl	8005b90 <Stay_Straight>

}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	200029dc 	.word	0x200029dc
 8005f70:	43340000 	.word	0x43340000

08005f74 <Decel_Half_Section>:
//Deccel_Half_Section
// 半区画減速後停止
//+++++++++++++++++++++++++++++++++++++++++++++++

void Decel_Half_Section(float acceleration , float velocity)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f7e:	edc7 0a00 	vstr	s1, [r7]
	MF.FLAG.SIDE_WALL_CTRL = 0;  // 壁制御有効
 8005f82:	4a0e      	ldr	r2, [pc, #56]	; (8005fbc <Decel_Half_Section+0x48>)
 8005f84:	8813      	ldrh	r3, [r2, #0]
 8005f86:	f36f 03c3 	bfc	r3, #3, #1
 8005f8a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.FRONT_WALL_CTRL = 1;
 8005f8c:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <Decel_Half_Section+0x48>)
 8005f8e:	8813      	ldrh	r3, [r2, #0]
 8005f90:	f043 0310 	orr.w	r3, r3, #16
 8005f94:	8013      	strh	r3, [r2, #0]

	Straight_Mode( HALF_SECTION, acceleration, velocity, 0.0f, velocity );
 8005f96:	ed97 2a00 	vldr	s4, [r7]
 8005f9a:	eddf 1a09 	vldr	s3, [pc, #36]	; 8005fc0 <Decel_Half_Section+0x4c>
 8005f9e:	ed97 1a00 	vldr	s2, [r7]
 8005fa2:	edd7 0a01 	vldr	s1, [r7, #4]
 8005fa6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005fc4 <Decel_Half_Section+0x50>
 8005faa:	f7ff fdc7 	bl	8005b3c <Straight_Mode>
	Stay_Straight();//目標距離到達まで待機
 8005fae:	f7ff fdef 	bl	8005b90 <Stay_Straight>

}
 8005fb2:	bf00      	nop
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200029dc 	.word	0x200029dc
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	42b40000 	.word	0x42b40000

08005fc8 <PivotL90>:
//PivotL90
// 超信地旋回L90モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++

void PivotL90( float acceleration, float velocity )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8005fd2:	edc7 0a00 	vstr	s1, [r7]
  Rotation_Mode( 90.0f, acceleration, velocity, 0.0f );
 8005fd6:	eddf 1a09 	vldr	s3, [pc, #36]	; 8005ffc <PivotL90+0x34>
 8005fda:	ed97 1a00 	vldr	s2, [r7]
 8005fde:	edd7 0a01 	vldr	s1, [r7, #4]
 8005fe2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006000 <PivotL90+0x38>
 8005fe6:	f7ff fe17 	bl	8005c18 <Rotation_Mode>
  Wait_Motion(300);
 8005fea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005fee:	f7ff fe71 	bl	8005cd4 <Wait_Motion>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	00000000 	.word	0x00000000
 8006000:	42b40000 	.word	0x42b40000

08006004 <PivotR90>:
//PivotR90
// 超信地旋回R90モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++

void PivotR90( float acceleration, float velocity )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	ed87 0a01 	vstr	s0, [r7, #4]
 800600e:	edc7 0a00 	vstr	s1, [r7]
  MF.FLAG.SIDE_WALL_CTRL = 0;  // 壁制御有効
 8006012:	4a0b      	ldr	r2, [pc, #44]	; (8006040 <PivotR90+0x3c>)
 8006014:	8813      	ldrh	r3, [r2, #0]
 8006016:	f36f 03c3 	bfc	r3, #3, #1
 800601a:	8013      	strh	r3, [r2, #0]

  Rotation_Mode( -90.0f, acceleration, velocity, 0.0f );
 800601c:	eddf 1a09 	vldr	s3, [pc, #36]	; 8006044 <PivotR90+0x40>
 8006020:	ed97 1a00 	vldr	s2, [r7]
 8006024:	edd7 0a01 	vldr	s1, [r7, #4]
 8006028:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8006048 <PivotR90+0x44>
 800602c:	f7ff fdf4 	bl	8005c18 <Rotation_Mode>
  Wait_Motion(300);
 8006030:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006034:	f7ff fe4e 	bl	8005cd4 <Wait_Motion>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200029dc 	.word	0x200029dc
 8006044:	00000000 	.word	0x00000000
 8006048:	c2b40000 	.word	0xc2b40000

0800604c <PivotL180>:
//PivotL180
// 超信地旋回L180モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++

void PivotL180(float acceleration, float velocity)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	ed87 0a01 	vstr	s0, [r7, #4]
 8006056:	edc7 0a00 	vstr	s1, [r7]
	MF.FLAG.SIDE_WALL_CTRL = 0;  // 壁制御有効
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <PivotL180+0x34>)
 800605c:	8813      	ldrh	r3, [r2, #0]
 800605e:	f36f 03c3 	bfc	r3, #3, #1
 8006062:	8013      	strh	r3, [r2, #0]

  Rotation_Mode( 180.0f, acceleration, velocity, 0.0f );
 8006064:	eddf 1a07 	vldr	s3, [pc, #28]	; 8006084 <PivotL180+0x38>
 8006068:	ed97 1a00 	vldr	s2, [r7]
 800606c:	edd7 0a01 	vldr	s1, [r7, #4]
 8006070:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006088 <PivotL180+0x3c>
 8006074:	f7ff fdd0 	bl	8005c18 <Rotation_Mode>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	200029dc 	.word	0x200029dc
 8006084:	00000000 	.word	0x00000000
 8006088:	43340000 	.word	0x43340000

0800608c <Slalom_L>:
//Slalom_L
//スラローム左旋回モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++

void Slalom_L(float velocity)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	ed87 0a01 	vstr	s0, [r7, #4]
	MF.FLAG.SIDE_WALL_CTRL = 0;  // 壁制御有効
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <Slalom_L+0x80>)
 8006098:	8813      	ldrh	r3, [r2, #0]
 800609a:	f36f 03c3 	bfc	r3, #3, #1
 800609e:	8013      	strh	r3, [r2, #0]
	Straight_Mode( slalom.offset_in, 0.0f, velocity, velocity, velocity );
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <Slalom_L+0x84>)
 80060a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80060a6:	ed97 2a01 	vldr	s4, [r7, #4]
 80060aa:	edd7 1a01 	vldr	s3, [r7, #4]
 80060ae:	ed97 1a01 	vldr	s2, [r7, #4]
 80060b2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8006114 <Slalom_L+0x88>
 80060b6:	eeb0 0a67 	vmov.f32	s0, s15
 80060ba:	f7ff fd3f 	bl	8005b3c <Straight_Mode>
	Stay_Straight();
 80060be:	f7ff fd67 	bl	8005b90 <Stay_Straight>
	Rotation_Mode( 90.0f, slalom.angular_acceleration, slalom.max_angular_velocity, velocity );
 80060c2:	4b13      	ldr	r3, [pc, #76]	; (8006110 <Slalom_L+0x84>)
 80060c4:	edd3 7a00 	vldr	s15, [r3]
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <Slalom_L+0x84>)
 80060ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80060ce:	edd7 1a01 	vldr	s3, [r7, #4]
 80060d2:	eeb0 1a47 	vmov.f32	s2, s14
 80060d6:	eef0 0a67 	vmov.f32	s1, s15
 80060da:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8006118 <Slalom_L+0x8c>
 80060de:	f7ff fd9b 	bl	8005c18 <Rotation_Mode>
	Straight_Mode( slalom.offset_out, 0.0f, velocity, velocity, velocity );
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <Slalom_L+0x84>)
 80060e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80060e8:	ed97 2a01 	vldr	s4, [r7, #4]
 80060ec:	edd7 1a01 	vldr	s3, [r7, #4]
 80060f0:	ed97 1a01 	vldr	s2, [r7, #4]
 80060f4:	eddf 0a07 	vldr	s1, [pc, #28]	; 8006114 <Slalom_L+0x88>
 80060f8:	eeb0 0a67 	vmov.f32	s0, s15
 80060fc:	f7ff fd1e 	bl	8005b3c <Straight_Mode>
	Wait_Slalom_Out();
 8006100:	f7ff fe10 	bl	8005d24 <Wait_Slalom_Out>
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	200029dc 	.word	0x200029dc
 8006110:	20002748 	.word	0x20002748
 8006114:	00000000 	.word	0x00000000
 8006118:	42b40000 	.word	0x42b40000

0800611c <Slalom_R>:
//Slalom_R
//スラローム左旋回モードに設定
//+++++++++++++++++++++++++++++++++++++++++++++++

void Slalom_R(float velocity)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	ed87 0a01 	vstr	s0, [r7, #4]
	MF.FLAG.SIDE_WALL_CTRL = 0;	// 壁制御有効
 8006126:	4a1d      	ldr	r2, [pc, #116]	; (800619c <Slalom_R+0x80>)
 8006128:	8813      	ldrh	r3, [r2, #0]
 800612a:	f36f 03c3 	bfc	r3, #3, #1
 800612e:	8013      	strh	r3, [r2, #0]

	Straight_Mode( slalom.offset_in, 0.0f, velocity, velocity, velocity );
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <Slalom_R+0x84>)
 8006132:	edd3 7a02 	vldr	s15, [r3, #8]
 8006136:	ed97 2a01 	vldr	s4, [r7, #4]
 800613a:	edd7 1a01 	vldr	s3, [r7, #4]
 800613e:	ed97 1a01 	vldr	s2, [r7, #4]
 8006142:	eddf 0a18 	vldr	s1, [pc, #96]	; 80061a4 <Slalom_R+0x88>
 8006146:	eeb0 0a67 	vmov.f32	s0, s15
 800614a:	f7ff fcf7 	bl	8005b3c <Straight_Mode>
	Stay_Straight();
 800614e:	f7ff fd1f 	bl	8005b90 <Stay_Straight>
	Rotation_Mode( -90.0f, slalom.angular_acceleration, slalom.max_angular_velocity, velocity );
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <Slalom_R+0x84>)
 8006154:	edd3 7a00 	vldr	s15, [r3]
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <Slalom_R+0x84>)
 800615a:	ed93 7a01 	vldr	s14, [r3, #4]
 800615e:	edd7 1a01 	vldr	s3, [r7, #4]
 8006162:	eeb0 1a47 	vmov.f32	s2, s14
 8006166:	eef0 0a67 	vmov.f32	s1, s15
 800616a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80061a8 <Slalom_R+0x8c>
 800616e:	f7ff fd53 	bl	8005c18 <Rotation_Mode>
	Straight_Mode( slalom.offset_out, 0.0f, velocity, velocity, velocity );
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <Slalom_R+0x84>)
 8006174:	edd3 7a03 	vldr	s15, [r3, #12]
 8006178:	ed97 2a01 	vldr	s4, [r7, #4]
 800617c:	edd7 1a01 	vldr	s3, [r7, #4]
 8006180:	ed97 1a01 	vldr	s2, [r7, #4]
 8006184:	eddf 0a07 	vldr	s1, [pc, #28]	; 80061a4 <Slalom_R+0x88>
 8006188:	eeb0 0a67 	vmov.f32	s0, s15
 800618c:	f7ff fcd6 	bl	8005b3c <Straight_Mode>
	Wait_Slalom_Out();
 8006190:	f7ff fdc8 	bl	8005d24 <Wait_Slalom_Out>

}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200029dc 	.word	0x200029dc
 80061a0:	20002748 	.word	0x20002748
 80061a4:	00000000 	.word	0x00000000
 80061a8:	c2b40000 	.word	0xc2b40000

080061ac <Motor_Direction_Decide>:
//Motor_Direction_Decide
//左右の回転方向をduty値によって変更
//+++++++++++++++++++++++++++++++++++++++++++++++

void Motor_Direction_Decide(duty *duty)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

	if((duty->left)>=0)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	db0a      	blt.n	80061d4 <Motor_Direction_Decide+0x28>
	{
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,SET);//Left Motor IN1
 80061be:	2201      	movs	r2, #1
 80061c0:	2110      	movs	r1, #16
 80061c2:	481a      	ldr	r0, [pc, #104]	; (800622c <Motor_Direction_Decide+0x80>)
 80061c4:	f7fc fc9e 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,RESET);//Left Motor IN2
 80061c8:	2200      	movs	r2, #0
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	4818      	ldr	r0, [pc, #96]	; (8006230 <Motor_Direction_Decide+0x84>)
 80061ce:	f7fc fc99 	bl	8002b04 <HAL_GPIO_WritePin>
 80061d2:	e009      	b.n	80061e8 <Motor_Direction_Decide+0x3c>
	}else{
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,RESET);//Left Motor IN1
 80061d4:	2200      	movs	r2, #0
 80061d6:	2110      	movs	r1, #16
 80061d8:	4814      	ldr	r0, [pc, #80]	; (800622c <Motor_Direction_Decide+0x80>)
 80061da:	f7fc fc93 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,SET);//Left Motor IN2
 80061de:	2201      	movs	r2, #1
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	4813      	ldr	r0, [pc, #76]	; (8006230 <Motor_Direction_Decide+0x84>)
 80061e4:	f7fc fc8e 	bl	8002b04 <HAL_GPIO_WritePin>
	}

	if((duty->right)>=0)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db0c      	blt.n	800620c <Motor_Direction_Decide+0x60>
	{
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);//Right Motor IN1
 80061f2:	2200      	movs	r2, #0
 80061f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80061f8:	480e      	ldr	r0, [pc, #56]	; (8006234 <Motor_Direction_Decide+0x88>)
 80061fa:	f7fc fc83 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,SET);//Right Motor IN2
 80061fe:	2201      	movs	r2, #1
 8006200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006204:	480b      	ldr	r0, [pc, #44]	; (8006234 <Motor_Direction_Decide+0x88>)
 8006206:	f7fc fc7d 	bl	8002b04 <HAL_GPIO_WritePin>
	}else{
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,SET);//Right Motor IN1
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);//Right Motor IN2
	}
}
 800620a:	e00b      	b.n	8006224 <Motor_Direction_Decide+0x78>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,SET);//Right Motor IN1
 800620c:	2201      	movs	r2, #1
 800620e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006212:	4808      	ldr	r0, [pc, #32]	; (8006234 <Motor_Direction_Decide+0x88>)
 8006214:	f7fc fc76 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,RESET);//Right Motor IN2
 8006218:	2200      	movs	r2, #0
 800621a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800621e:	4805      	ldr	r0, [pc, #20]	; (8006234 <Motor_Direction_Decide+0x88>)
 8006220:	f7fc fc70 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40020800 	.word	0x40020800
 8006230:	40020000 	.word	0x40020000
 8006234:	40020400 	.word	0x40020400

08006238 <Motor_PWM_OUT>:
 * 		->MT_CTRLフラグ0で停止
 */
//+++++++++++++++++++++++++++++++++++++++++++++++

void Motor_PWM_OUT(duty *duty)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	int32_t PWM_L, PWM_R = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	60bb      	str	r3, [r7, #8]
//	duty->left  +=  side_wall_control_value;
//	duty->right -=  side_wall_control_value;
	//負整数処理
	if((duty->left) <0)	{
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da05      	bge.n	800625a <Motor_PWM_OUT+0x22>
		PWM_L = - (duty->left);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006254:	425b      	negs	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e003      	b.n	8006262 <Motor_PWM_OUT+0x2a>
	}
	else {
		PWM_L = (duty->left);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006260:	60fb      	str	r3, [r7, #12]
	}
	if((duty->right)<0)	{
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da05      	bge.n	8006278 <Motor_PWM_OUT+0x40>
		PWM_R = - (duty->right);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006272:	425b      	negs	r3, r3
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	e003      	b.n	8006280 <Motor_PWM_OUT+0x48>
	}
	else {
		PWM_R = (duty->right);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800627e:	60bb      	str	r3, [r7, #8]
	}

	//上限速度処理
	if (PWM_L > 400)	PWM_L = 400;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006286:	dd02      	ble.n	800628e <Motor_PWM_OUT+0x56>
 8006288:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800628c:	60fb      	str	r3, [r7, #12]

	if (PWM_R > 400)	PWM_R = 400;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006294:	dd02      	ble.n	800629c <Motor_PWM_OUT+0x64>
 8006296:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800629a:	60bb      	str	r3, [r7, #8]

	//MT_FLAGが下がったら出力停止
	if(MF.FLAG.MT_CTRL==0) {
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <Motor_PWM_OUT+0x98>)
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <Motor_PWM_OUT+0x7a>
		PWM_L = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
		PWM_R = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
	}

	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWM_L);
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <Motor_PWM_OUT+0x9c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWM_R);
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <Motor_PWM_OUT+0x9c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	200029dc 	.word	0x200029dc
 80062d4:	200024b0 	.word	0x200024b0

080062d8 <Motor_Drive_Stop>:

void Motor_Drive_Stop(void){
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <Motor_Drive_Stop+0x20>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4, 0);
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <Motor_Drive_Stop+0x20>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200024b0 	.word	0x200024b0

080062fc <Encoder_Init>:
#include "stm32f4xx_hal_tim.h"



void Encoder_Init(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
	TIM1->CNT = 0;
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <Encoder_Init+0x34>)
 8006302:	2200      	movs	r2, #0
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <Encoder_Init+0x38>)
 8006308:	2200      	movs	r2, #0
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

	delta_angle_r = 0.0f;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <Encoder_Init+0x3c>)
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
	delta_distance_l = 0.0f;
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <Encoder_Init+0x40>)
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
	delta_distance_r = 0.0f;
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <Encoder_Init+0x44>)
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400
 8006338:	200029c8 	.word	0x200029c8
 800633c:	20002588 	.word	0x20002588
 8006340:	200029ec 	.word	0x200029ec

08006344 <Encoder_Update>:
	  TIM1->CNT = 0;
	  TIM8->CNT = 0;
}

void Encoder_Update( t_enc_value *enc )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	(enc->right) = -TIM1->CNT;
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <Encoder_Update+0x3c>)
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	b29b      	uxth	r3, r3
 8006352:	425b      	negs	r3, r3
 8006354:	b29b      	uxth	r3, r3
 8006356:	b21a      	sxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	805a      	strh	r2, [r3, #2]
	(enc->left)  = TIM8->CNT;
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <Encoder_Update+0x40>)
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	b21a      	sxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	801a      	strh	r2, [r3, #0]

	  TIM1->CNT = 0;
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <Encoder_Update+0x3c>)
 8006368:	2200      	movs	r2, #0
 800636a:	625a      	str	r2, [r3, #36]	; 0x24
	  TIM8->CNT = 0;
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <Encoder_Update+0x40>)
 800636e:	2200      	movs	r2, #0
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <Calculate_Velocity>:


void Calculate_Velocity(t_enc_value *enc, motion *angle_l, motion *angle_r,
		motion *trans_l, motion *trans_r){
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
	//angular velocity of motor shaft

	float left_omega = 0.0f, right_omega = 0.0f;
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]

	left_omega =  (float) (enc->left) * 360  / RESOLUTION / TIM4_INTERVAL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800649c <Calculate_Velocity+0x114>
 80063b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063b8:	eddf 6a39 	vldr	s13, [pc, #228]	; 80064a0 <Calculate_Velocity+0x118>
 80063bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80063c0:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064a4 <Calculate_Velocity+0x11c>
 80063c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063c8:	edc7 7a05 	vstr	s15, [r7, #20]
	right_omega = (float) (enc->right) * 360 / RESOLUTION / TIM4_INTERVAL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800649c <Calculate_Velocity+0x114>
 80063de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063e2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80064a0 <Calculate_Velocity+0x118>
 80063e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80063ea:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80064a4 <Calculate_Velocity+0x11c>
 80063ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063f2:	edc7 7a04 	vstr	s15, [r7, #16]
	//角速度ω計算
	angle_l->velocity = left_omega;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	605a      	str	r2, [r3, #4]
	angle_r->velocity = right_omega;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	605a      	str	r2, [r3, #4]

	//angular velocity of tire
	angle_l->velocity /= REDUCTION_RADIO;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	ed93 7a01 	vldr	s14, [r3, #4]
 8006408:	eddf 6a27 	vldr	s13, [pc, #156]	; 80064a8 <Calculate_Velocity+0x120>
 800640c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	edc3 7a01 	vstr	s15, [r3, #4]
	angle_r->velocity /= REDUCTION_RADIO;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	ed93 7a01 	vldr	s14, [r3, #4]
 800641c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80064a8 <Calculate_Velocity+0x120>
 8006420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	edc3 7a01 	vstr	s15, [r3, #4]

	//velocity of tire v= r*ω[rad/s]

	trans_l->velocity = angle_l->velocity * (TIRE_DIAMETER / 2) /180 * M_PI;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006430:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80064ac <Calculate_Velocity+0x124>
 8006434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006438:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80064b0 <Calculate_Velocity+0x128>
 800643c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006440:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80064b4 <Calculate_Velocity+0x12c>
 8006444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	edc3 7a01 	vstr	s15, [r3, #4]
	trans_r->velocity = angle_r->velocity * (TIRE_DIAMETER / 2) /180 * M_PI;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	edd3 7a01 	vldr	s15, [r3, #4]
 8006454:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80064ac <Calculate_Velocity+0x124>
 8006458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800645c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80064b0 <Calculate_Velocity+0x128>
 8006460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006464:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80064b4 <Calculate_Velocity+0x12c>
 8006468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	edc3 7a01 	vstr	s15, [r3, #4]

	trans_machine.velocity = (trans_l->velocity + trans_r->velocity) / 2.0;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	ed93 7a01 	vldr	s14, [r3, #4]
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	edd3 7a01 	vldr	s15, [r3, #4]
 800647e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006482:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <Calculate_Velocity+0x130>)
 800648c:	edc3 7a01 	vstr	s15, [r3, #4]
	//4096*4=16384でピニオンが1周．　減速比11:40より16384*40/11~=59578でタイヤが1周．
	//　タイヤ径Diameterがわかればタイヤが一周して進む距離がわかる
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	43b40000 	.word	0x43b40000
 80064a0:	46800000 	.word	0x46800000
 80064a4:	3a83126f 	.word	0x3a83126f
 80064a8:	4068ba2e 	.word	0x4068ba2e
 80064ac:	414c0000 	.word	0x414c0000
 80064b0:	43340000 	.word	0x43340000
 80064b4:	40490fd8 	.word	0x40490fd8
 80064b8:	200029f0 	.word	0x200029f0

080064bc <Calculate_Tire_Angle>:

void Calculate_Tire_Angle(void){
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
	delta_angle_l = angle_l.velocity * TIM4_INTERVAL;
 80064c0:	4b17      	ldr	r3, [pc, #92]	; (8006520 <Calculate_Tire_Angle+0x64>)
 80064c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80064c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006524 <Calculate_Tire_Angle+0x68>
 80064ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <Calculate_Tire_Angle+0x6c>)
 80064d0:	edc3 7a00 	vstr	s15, [r3]
	angle_l.distance += delta_angle_l;
 80064d4:	4b12      	ldr	r3, [pc, #72]	; (8006520 <Calculate_Tire_Angle+0x64>)
 80064d6:	ed93 7a00 	vldr	s14, [r3]
 80064da:	4b13      	ldr	r3, [pc, #76]	; (8006528 <Calculate_Tire_Angle+0x6c>)
 80064dc:	edd3 7a00 	vldr	s15, [r3]
 80064e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <Calculate_Tire_Angle+0x64>)
 80064e6:	edc3 7a00 	vstr	s15, [r3]

	delta_angle_r = angle_r.velocity * TIM4_INTERVAL;
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <Calculate_Tire_Angle+0x70>)
 80064ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80064f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006524 <Calculate_Tire_Angle+0x68>
 80064f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <Calculate_Tire_Angle+0x74>)
 80064fa:	edc3 7a00 	vstr	s15, [r3]
	angle_r.distance += delta_angle_r;
 80064fe:	4b0b      	ldr	r3, [pc, #44]	; (800652c <Calculate_Tire_Angle+0x70>)
 8006500:	ed93 7a00 	vldr	s14, [r3]
 8006504:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <Calculate_Tire_Angle+0x74>)
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <Calculate_Tire_Angle+0x70>)
 8006510:	edc3 7a00 	vstr	s15, [r3]
}
 8006514:	bf00      	nop
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000248 	.word	0x20000248
 8006524:	3a83126f 	.word	0x3a83126f
 8006528:	200026e4 	.word	0x200026e4
 800652c:	200029e0 	.word	0x200029e0
 8006530:	200029c8 	.word	0x200029c8

08006534 <Calculate_Machine_Distance>:

void Calculate_Machine_Distance(void){
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
	delta_distance_l = trans_l.velocity  * TIM4_INTERVAL;
 8006538:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <Calculate_Machine_Distance+0x80>)
 800653a:	edd3 7a01 	vldr	s15, [r3, #4]
 800653e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80065b8 <Calculate_Machine_Distance+0x84>
 8006542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <Calculate_Machine_Distance+0x88>)
 8006548:	edc3 7a00 	vstr	s15, [r3]
	trans_l.distance += delta_distance_l;
 800654c:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <Calculate_Machine_Distance+0x80>)
 800654e:	ed93 7a00 	vldr	s14, [r3]
 8006552:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <Calculate_Machine_Distance+0x88>)
 8006554:	edd3 7a00 	vldr	s15, [r3]
 8006558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <Calculate_Machine_Distance+0x80>)
 800655e:	edc3 7a00 	vstr	s15, [r3]

	delta_distance_r = trans_r.velocity * TIM4_INTERVAL;
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <Calculate_Machine_Distance+0x8c>)
 8006564:	edd3 7a01 	vldr	s15, [r3, #4]
 8006568:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80065b8 <Calculate_Machine_Distance+0x84>
 800656c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <Calculate_Machine_Distance+0x90>)
 8006572:	edc3 7a00 	vstr	s15, [r3]
	trans_r.distance += delta_distance_r;
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <Calculate_Machine_Distance+0x8c>)
 8006578:	ed93 7a00 	vldr	s14, [r3]
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <Calculate_Machine_Distance+0x90>)
 800657e:	edd3 7a00 	vldr	s15, [r3]
 8006582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <Calculate_Machine_Distance+0x8c>)
 8006588:	edc3 7a00 	vstr	s15, [r3]
	trans_machine.distance = (trans_l.distance + trans_r.distance)/2.0;
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <Calculate_Machine_Distance+0x80>)
 800658e:	ed93 7a00 	vldr	s14, [r3]
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <Calculate_Machine_Distance+0x8c>)
 8006594:	edd3 7a00 	vldr	s15, [r3]
 8006598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800659c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <Calculate_Machine_Distance+0x94>)
 80065a6:	edc3 7a00 	vstr	s15, [r3]
}
 80065aa:	bf00      	nop
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	20002460 	.word	0x20002460
 80065b8:	3a83126f 	.word	0x3a83126f
 80065bc:	20002588 	.word	0x20002588
 80065c0:	20002650 	.word	0x20002650
 80065c4:	200029ec 	.word	0x200029ec
 80065c8:	200029f0 	.word	0x200029f0

080065cc <mode_change>:


int8_t mode_change()
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
	int8_t mode = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
	float angle_offset = 0.0f;
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	60bb      	str	r3, [r7, #8]

	angle_offset = angle_r.distance;
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <mode_change+0xb0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60bb      	str	r3, [r7, #8]
	Front_LED_Light(0, 0, 0);
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	2000      	movs	r0, #0
 80065e8:	f000 fc6c 	bl	8006ec4 <Front_LED_Light>

	while(1){
	mode = (int8_t)((angle_r.distance - angle_offset) / 360);
 80065ec:	4b23      	ldr	r3, [pc, #140]	; (800667c <mode_change+0xb0>)
 80065ee:	ed93 7a00 	vldr	s14, [r3]
 80065f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80065f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065fa:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006680 <mode_change+0xb4>
 80065fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006606:	edc7 7a01 	vstr	s15, [r7, #4]
 800660a:	793b      	ldrb	r3, [r7, #4]
 800660c:	73fb      	strb	r3, [r7, #15]
//	printf("%f,%f,%d,",angle_r.distance,angle_offset,mode);

	mode %= 16;
 800660e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006612:	425a      	negs	r2, r3
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	f002 020f 	and.w	r2, r2, #15
 800661c:	bf58      	it	pl
 800661e:	4253      	negpl	r3, r2
 8006620:	73fb      	strb	r3, [r7, #15]

	if(mode > 15) mode = 0;
 8006622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006626:	2b0f      	cmp	r3, #15
 8006628:	dd01      	ble.n	800662e <mode_change+0x62>
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
	if(mode < 0) mode = 15;
 800662e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	da01      	bge.n	800663a <mode_change+0x6e>
 8006636:	230f      	movs	r3, #15
 8006638:	73fb      	strb	r3, [r7, #15]
		Front_LED_Light(mode & 0b100, mode & 0b010, mode & 0b001);
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	b2d8      	uxtb	r0, r3
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fc36 	bl	8006ec4 <Front_LED_Light>
	//	printf("%d\r\n",mode);
		   if( gyro_raw.accel_z >15.0f){
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <mode_change+0xb8>)
 800665a:	edd3 7a05 	vldr	s15, [r3, #20]
 800665e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8006662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666a:	dd02      	ble.n	8006672 <mode_change+0xa6>
			   return mode;
 800666c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006670:	e000      	b.n	8006674 <mode_change+0xa8>
	mode = (int8_t)((angle_r.distance - angle_offset) / 360);
 8006672:	e7bb      	b.n	80065ec <mode_change+0x20>
		   }
	}
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200029e0 	.word	0x200029e0
 8006680:	43b40000 	.word	0x43b40000
 8006684:	20002294 	.word	0x20002294

08006688 <eeprom_enable_write>:
//eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void){
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	607b      	str	r3, [r7, #4]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]
  //EraseInitStruct.Banks = FLASH_BANK_1;
  //EraseInitStruct.Sector = EEPROM_START_ADDRESS;
  EraseInitStruct.Sector = FLASH_SECTOR_11;
 8006696:	230b      	movs	r3, #11
 8006698:	613b      	str	r3, [r7, #16]
  EraseInitStruct.NbSectors = 1;
 800669a:	2301      	movs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
  EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800669e:	2302      	movs	r3, #2
 80066a0:	61bb      	str	r3, [r7, #24]

  status = HAL_FLASH_Unlock();
 80066a2:	f7fb fe15 	bl	80022d0 <HAL_FLASH_Unlock>
 80066a6:	4603      	mov	r3, r0
 80066a8:	77fb      	strb	r3, [r7, #31]
  if(status != HAL_OK) return status;
 80066aa:	7ffb      	ldrb	r3, [r7, #31]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <eeprom_enable_write+0x2c>
 80066b0:	7ffb      	ldrb	r3, [r7, #31]
 80066b2:	e009      	b.n	80066c8 <eeprom_enable_write+0x40>
  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80066b4:	1d3a      	adds	r2, r7, #4
 80066b6:	f107 0308 	add.w	r3, r7, #8
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb ff65 	bl	800258c <HAL_FLASHEx_Erase>
 80066c2:	4603      	mov	r3, r0
 80066c4:	77fb      	strb	r3, [r7, #31]
  return status;
 80066c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <eeprom_disable_write>:
//eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void){
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  return HAL_FLASH_Lock();
 80066d4:	f7fb fe1e 	bl	8002314 <HAL_FLASH_Lock>
 80066d8:	4603      	mov	r3, r0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	bd80      	pop	{r7, pc}

080066de <eeprom_write_halfword>:
//eeprom_write_halfword
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data …… 書き込みたいuin16_t型データ
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data){
 80066de:	b590      	push	{r4, r7, lr}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;
  address = address*2 + START_ADDRESS;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80066f0:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	607b      	str	r3, [r7, #4]
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 80066f8:	887b      	ldrh	r3, [r7, #2]
 80066fa:	f04f 0400 	mov.w	r4, #0
 80066fe:	461a      	mov	r2, r3
 8006700:	4623      	mov	r3, r4
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	2001      	movs	r0, #1
 8006706:	f7fb fd8f 	bl	8002228 <HAL_FLASH_Program>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
  return status;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bd90      	pop	{r4, r7, pc}

08006718 <eeprom_read_halfword>:
//eeprom_read_halfword
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address …… eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address){
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint16_t val = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	81fb      	strh	r3, [r7, #14]
  address = address*2 + START_ADDRESS;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800672a:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	607b      	str	r3, [r7, #4]
  val = *(__IO uint16_t *)address;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	81fb      	strh	r3, [r7, #14]
  return val;
 8006738:	89fb      	ldrh	r3, [r7, #14]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <IMU_Init>:
 */

#include "global.h"
#include "stm32f4xx_hal_spi.h"

void IMU_Init(void){
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0

	set_flag = 0;
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <IMU_Init+0x70>)
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
	rot_machine.velocity = 0.0f;
 8006752:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <IMU_Init+0x74>)
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	605a      	str	r2, [r3, #4]
	rot_machine.distance = 0.0f;
 800675a:	4b18      	ldr	r3, [pc, #96]	; (80067bc <IMU_Init+0x74>)
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	601a      	str	r2, [r3, #0]
	gyro_calib_flag = 0;
 8006762:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <IMU_Init+0x78>)
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
	gyro_calib_cnt = 0;
 8006768:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <IMU_Init+0x7c>)
 800676a:	2200      	movs	r2, #0
 800676c:	801a      	strh	r2, [r3, #0]
	omega_z[0] = omega_z[1] = 0.0f; //0->now 1->prev
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <IMU_Init+0x80>)
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <IMU_Init+0x80>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <IMU_Init+0x80>)
 800677c:	6013      	str	r3, [r2, #0]
	machine_angle[0] = machine_angle[1] = 0.0f;
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <IMU_Init+0x84>)
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	4b11      	ldr	r3, [pc, #68]	; (80067cc <IMU_Init+0x84>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4a10      	ldr	r2, [pc, #64]	; (80067cc <IMU_Init+0x84>)
 800678c:	6013      	str	r3, [r2, #0]
	tar_angle_z = 0.0;
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <IMU_Init+0x88>)
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
	eps_angle_z[0] = eps_angle_z[1] = 0.0f;
 8006796:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <IMU_Init+0x8c>)
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <IMU_Init+0x8c>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <IMU_Init+0x8c>)
 80067a4:	6013      	str	r3, [r2, #0]
	sum_eps_angle_z = 0.0f;
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <IMU_Init+0x90>)
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20002a00 	.word	0x20002a00
 80067bc:	20002678 	.word	0x20002678
 80067c0:	20002448 	.word	0x20002448
 80067c4:	200022b0 	.word	0x200022b0
 80067c8:	20002458 	.word	0x20002458
 80067cc:	20002500 	.word	0x20002500
 80067d0:	200029fc 	.word	0x200029fc
 80067d4:	2000259c 	.word	0x2000259c
 80067d8:	200025e8 	.word	0x200025e8

080067dc <read_byte>:
The following 7 bits is the Resister Address.
*/
//+++++++++++++++++++++++++++++++++++++++++++++++

uint8_t read_byte( uint8_t reg )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //cs = 0;
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	4810      	ldr	r0, [pc, #64]	; (800682c <read_byte+0x50>)
 80067ec:	f7fc f98a 	bl	8002b04 <HAL_GPIO_WritePin>
	ret = reg | 0x80;
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &ret,1,100);
 80067fa:	f107 010f 	add.w	r1, r7, #15
 80067fe:	2364      	movs	r3, #100	; 0x64
 8006800:	2201      	movs	r2, #1
 8006802:	480b      	ldr	r0, [pc, #44]	; (8006830 <read_byte+0x54>)
 8006804:	f7fc fe06 	bl	8003414 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8006808:	f107 010e 	add.w	r1, r7, #14
 800680c:	2364      	movs	r3, #100	; 0x64
 800680e:	2201      	movs	r2, #1
 8006810:	4807      	ldr	r0, [pc, #28]	; (8006830 <read_byte+0x54>)
 8006812:	f7fc ff33 	bl	800367c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //cs = 1;
 8006816:	2201      	movs	r2, #1
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	4804      	ldr	r0, [pc, #16]	; (800682c <read_byte+0x50>)
 800681c:	f7fc f972 	bl	8002b04 <HAL_GPIO_WritePin>
	return val;
 8006820:	7bbb      	ldrb	r3, [r7, #14]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40020400 	.word	0x40020400
 8006830:	200022b4 	.word	0x200022b4

08006834 <write_byte>:
The following 7 bits is the Resister Address.
*/
//+++++++++++++++++++++++++++++++++++++++++++++++

void write_byte( uint8_t reg, uint8_t val )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	460a      	mov	r2, r1
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	4613      	mov	r3, r2
 8006842:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;
	ret = reg & 0x7F ;
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684a:	b2db      	uxtb	r3, r3
 800684c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_RESET ); //cs = 0;
 800684e:	2200      	movs	r2, #0
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	480c      	ldr	r0, [pc, #48]	; (8006884 <write_byte+0x50>)
 8006854:	f7fc f956 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit( &hspi2, &ret,1,100 );
 8006858:	f107 010f 	add.w	r1, r7, #15
 800685c:	2364      	movs	r3, #100	; 0x64
 800685e:	2201      	movs	r2, #1
 8006860:	4809      	ldr	r0, [pc, #36]	; (8006888 <write_byte+0x54>)
 8006862:	f7fc fdd7 	bl	8003414 <HAL_SPI_Transmit>
	HAL_SPI_Transmit( &hspi2, &val,1,100 );
 8006866:	1db9      	adds	r1, r7, #6
 8006868:	2364      	movs	r3, #100	; 0x64
 800686a:	2201      	movs	r2, #1
 800686c:	4806      	ldr	r0, [pc, #24]	; (8006888 <write_byte+0x54>)
 800686e:	f7fc fdd1 	bl	8003414 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET ); //cs = 1;
 8006872:	2201      	movs	r2, #1
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	4803      	ldr	r0, [pc, #12]	; (8006884 <write_byte+0x50>)
 8006878:	f7fc f944 	bl	8002b04 <HAL_GPIO_WritePin>
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40020400 	.word	0x40020400
 8006888:	200022b4 	.word	0x200022b4

0800688c <ICM20602_Init>:
//+++++++++++++++++++++++++++++++++++++++++++++++
//ICM20602_Init
//+++++++++++++++++++++++++++++++++++++++++++++++

void ICM20602_Init( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	71fb      	strb	r3, [r7, #7]
	who_am_i = read_byte(0x75);	// check WHO_AM_I (0x75)
 8006896:	2075      	movs	r0, #117	; 0x75
 8006898:	f7ff ffa0 	bl	80067dc <read_byte>
 800689c:	4603      	mov	r3, r0
 800689e:	71fb      	strb	r3, [r7, #7]
	printf( "who_am_i = 0x%x\r\n",who_am_i ); 	// Who am I = 0x12
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	4619      	mov	r1, r3
 80068a4:	481b      	ldr	r0, [pc, #108]	; (8006914 <ICM20602_Init+0x88>)
 80068a6:	f004 f965 	bl	800ab74 <iprintf>

	if (who_am_i != 0x12){	// recheck
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	2b12      	cmp	r3, #18
 80068ae:	d00e      	beq.n	80068ce <ICM20602_Init+0x42>
		HAL_Delay(100);
 80068b0:	2064      	movs	r0, #100	; 0x64
 80068b2:	f7fa fb6b 	bl	8000f8c <HAL_Delay>
		who_am_i = read_byte(0x75);
 80068b6:	2075      	movs	r0, #117	; 0x75
 80068b8:	f7ff ff90 	bl	80067dc <read_byte>
 80068bc:	4603      	mov	r3, r0
 80068be:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x12){
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	2b12      	cmp	r3, #18
 80068c4:	d003      	beq.n	80068ce <ICM20602_Init+0x42>
			printf( "gyro_error\r\n\n");
 80068c6:	4814      	ldr	r0, [pc, #80]	; (8006918 <ICM20602_Init+0x8c>)
 80068c8:	f004 f9c8 	bl	800ac5c <puts>
			while(1){
 80068cc:	e7fe      	b.n	80068cc <ICM20602_Init+0x40>
				}
		}
	}

 //PWR_MIGHT_1 0x6B
	write_byte( 0x6B, 0x00 );	//Set pwr might
 80068ce:	2100      	movs	r1, #0
 80068d0:	206b      	movs	r0, #107	; 0x6b
 80068d2:	f7ff ffaf 	bl	8006834 <write_byte>
	HAL_Delay(50);
 80068d6:	2032      	movs	r0, #50	; 0x32
 80068d8:	f7fa fb58 	bl	8000f8c <HAL_Delay>
 //PWR_MIGHT_2 0x6C
	write_byte( 0x6C, 0x00 );
 80068dc:	2100      	movs	r1, #0
 80068de:	206c      	movs	r0, #108	; 0x6c
 80068e0:	f7ff ffa8 	bl	8006834 <write_byte>
	HAL_Delay(50);
 80068e4:	2032      	movs	r0, #50	; 0x32
 80068e6:	f7fa fb51 	bl	8000f8c <HAL_Delay>
 //set gyro config
 //GYRO_CONFIG 0x1B
	write_byte( 0x1B, 0x18 ); // use 2000 dps
 80068ea:	2118      	movs	r1, #24
 80068ec:	201b      	movs	r0, #27
 80068ee:	f7ff ffa1 	bl	8006834 <write_byte>
	HAL_Delay(50);
 80068f2:	2032      	movs	r0, #50	; 0x32
 80068f4:	f7fa fb4a 	bl	8000f8c <HAL_Delay>
 //ACCEL_CONFIG 0x1C
	write_byte( 0x1B, 0x18 ); // use pm 16g
 80068f8:	2118      	movs	r1, #24
 80068fa:	201b      	movs	r0, #27
 80068fc:	f7ff ff9a 	bl	8006834 <write_byte>
	HAL_Delay(50);
 8006900:	2032      	movs	r0, #50	; 0x32
 8006902:	f7fa fb43 	bl	8000f8c <HAL_Delay>

	 set_flag = 1;
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <ICM20602_Init+0x90>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	0800cb80 	.word	0x0800cb80
 8006918:	0800cb94 	.word	0x0800cb94
 800691c:	20002a00 	.word	0x20002a00

08006920 <ICM20602_GYRO_READ>:


float ICM20602_GYRO_READ( uint8_t H_reg )
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
	int16_t data = (int16_t)( ((uint8_t)read_byte(H_reg) << 8) | (uint8_t)read_byte(H_reg+1) );
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff ff55 	bl	80067dc <read_byte>
 8006932:	4603      	mov	r3, r0
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	b21c      	sxth	r4, r3
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	3301      	adds	r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ff4c 	bl	80067dc <read_byte>
 8006944:	4603      	mov	r3, r0
 8006946:	b21b      	sxth	r3, r3
 8006948:	4323      	orrs	r3, r4
 800694a:	81fb      	strh	r3, [r7, #14]
	float omega = (float)(data / 16.4f); //[deg/s] FS_SEL=3-> Scale Factor=16.4[LSB/(dps)]
 800694c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006958:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006974 <ICM20602_GYRO_READ+0x54>
 800695c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006960:	edc7 7a02 	vstr	s15, [r7, #8]
	return omega;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	ee07 3a90 	vmov	s15, r3
}
 800696a:	eeb0 0a67 	vmov.f32	s0, s15
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	bd90      	pop	{r4, r7, pc}
 8006974:	41833333 	.word	0x41833333

08006978 <ICM20602_ACCEL_READ>:


float ICM20602_ACCEL_READ( uint8_t H_reg )
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
	int16_t data = (int16_t)( ((uint8_t)read_byte(H_reg) << 8) | (uint8_t)read_byte(H_reg+1) );
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ff29 	bl	80067dc <read_byte>
 800698a:	4603      	mov	r3, r0
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	b21c      	sxth	r4, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	3301      	adds	r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff ff20 	bl	80067dc <read_byte>
 800699c:	4603      	mov	r3, r0
 800699e:	b21b      	sxth	r3, r3
 80069a0:	4323      	orrs	r3, r4
 80069a2:	81fb      	strh	r3, [r7, #14]
	float accel = (float)(data / 2048.0f);
 80069a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069b0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80069cc <ICM20602_ACCEL_READ+0x54>
 80069b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069b8:	edc7 7a02 	vstr	s15, [r7, #8]
	return accel;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	ee07 3a90 	vmov	s15, r3
}
 80069c2:	eeb0 0a67 	vmov.f32	s0, s15
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	45000000 	.word	0x45000000

080069d0 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0

	if ( set_flag == 1 ){
 80069d4:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <ICM20602_DataUpdate+0x118>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f040 8082 	bne.w	8006ae2 <ICM20602_DataUpdate+0x112>
	// get yawrate
	gyro_raw.omega_x = -1 * ICM20602_GYRO_READ( 0x45 ) * FACTOR_TOLERANCE; //-90度座標回転
 80069de:	2045      	movs	r0, #69	; 0x45
 80069e0:	f7ff ff9e 	bl	8006920 <ICM20602_GYRO_READ>
 80069e4:	eef0 7a40 	vmov.f32	s15, s0
 80069e8:	eef1 7a67 	vneg.f32	s15, s15
 80069ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006aec <ICM20602_DataUpdate+0x11c>
 80069f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069f4:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 80069f6:	edc3 7a00 	vstr	s15, [r3]
	gyro_raw.omega_y = ICM20602_GYRO_READ( 0x43 ) * FACTOR_TOLERANCE;
 80069fa:	2043      	movs	r0, #67	; 0x43
 80069fc:	f7ff ff90 	bl	8006920 <ICM20602_GYRO_READ>
 8006a00:	eeb0 7a40 	vmov.f32	s14, s0
 8006a04:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006aec <ICM20602_DataUpdate+0x11c>
 8006a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a0e:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_raw.omega_z = ICM20602_GYRO_READ( 0x47 ) * FACTOR_TOLERANCE;
 8006a12:	2047      	movs	r0, #71	; 0x47
 8006a14:	f7ff ff84 	bl	8006920 <ICM20602_GYRO_READ>
 8006a18:	eeb0 7a40 	vmov.f32	s14, s0
 8006a1c:	eddf 7a33 	vldr	s15, [pc, #204]	; 8006aec <ICM20602_DataUpdate+0x11c>
 8006a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a26:	edc3 7a02 	vstr	s15, [r3, #8]

	// get accel
	gyro_raw.accel_x = -1 * ICM20602_ACCEL_READ( 0x3D );
 8006a2a:	203d      	movs	r0, #61	; 0x3d
 8006a2c:	f7ff ffa4 	bl	8006978 <ICM20602_ACCEL_READ>
 8006a30:	eef0 7a40 	vmov.f32	s15, s0
 8006a34:	eef1 7a67 	vneg.f32	s15, s15
 8006a38:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a3a:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro_raw.accel_y = ICM20602_ACCEL_READ( 0x3B );
 8006a3e:	203b      	movs	r0, #59	; 0x3b
 8006a40:	f7ff ff9a 	bl	8006978 <ICM20602_ACCEL_READ>
 8006a44:	eef0 7a40 	vmov.f32	s15, s0
 8006a48:	4b29      	ldr	r3, [pc, #164]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a4a:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro_raw.accel_z = ICM20602_ACCEL_READ( 0x3F );
 8006a4e:	203f      	movs	r0, #63	; 0x3f
 8006a50:	f7ff ff92 	bl	8006978 <ICM20602_ACCEL_READ>
 8006a54:	eef0 7a40 	vmov.f32	s15, s0
 8006a58:	4b25      	ldr	r3, [pc, #148]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a5a:	edc3 7a05 	vstr	s15, [r3, #20]

	//True Value(Consider Offset)
	gyro_true.omega_x = gyro_raw.omega_x - gyro_offset.omega_x;
 8006a5e:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a60:	ed93 7a00 	vldr	s14, [r3]
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006a66:	edd3 7a00 	vldr	s15, [r3]
 8006a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006a70:	edc3 7a00 	vstr	s15, [r3]
	gyro_true.omega_y = gyro_raw.omega_y - gyro_offset.omega_y;
 8006a74:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a76:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a7a:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006a7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a84:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006a86:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_true.omega_z = gyro_raw.omega_z - gyro_offset.omega_z;
 8006a8a:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006a8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006a92:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a9a:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006a9c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_true.accel_x = gyro_raw.accel_x - gyro_offset.accel_x;
 8006aa0:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006aa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006aa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006ab2:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro_true.accel_y = gyro_raw.accel_y - gyro_offset.accel_y;
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006ab8:	ed93 7a04 	vldr	s14, [r3, #16]
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006abe:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006ac8:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro_true.accel_z = gyro_raw.accel_z - gyro_offset.accel_z;
 8006acc:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <ICM20602_DataUpdate+0x120>)
 8006ace:	ed93 7a05 	vldr	s14, [r3, #20]
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <ICM20602_DataUpdate+0x124>)
 8006ad4:	edd3 7a05 	vldr	s15, [r3, #20]
 8006ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <ICM20602_DataUpdate+0x128>)
 8006ade:	edc3 7a05 	vstr	s15, [r3, #20]


	}
}
 8006ae2:	bf00      	nop
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20002a00 	.word	0x20002a00
 8006aec:	3f7d70a4 	.word	0x3f7d70a4
 8006af0:	20002294 	.word	0x20002294
 8006af4:	20002660 	.word	0x20002660
 8006af8:	20002758 	.word	0x20002758

08006afc <Calculate_Machine_Rotation>:

void Calculate_Machine_Rotation(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
	rot_machine.velocity = gyro_true.omega_z;
 8006b00:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <Calculate_Machine_Rotation+0x58>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <Calculate_Machine_Rotation+0x5c>)
 8006b06:	6053      	str	r3, [r2, #4]
	omega_z_buff[0] = rot_machine.velocity;
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <Calculate_Machine_Rotation+0x5c>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <Calculate_Machine_Rotation+0x60>)
 8006b0e:	6013      	str	r3, [r2, #0]
	rot_machine.distance += (omega_z_buff[0] + omega_z_buff[1]) /2.0f * GYRO_DT;
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <Calculate_Machine_Rotation+0x5c>)
 8006b12:	ed93 7a00 	vldr	s14, [r3]
 8006b16:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <Calculate_Machine_Rotation+0x60>)
 8006b18:	edd3 6a00 	vldr	s13, [r3]
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <Calculate_Machine_Rotation+0x60>)
 8006b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b22:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006b26:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006b2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b2e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006b60 <Calculate_Machine_Rotation+0x64>
 8006b32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <Calculate_Machine_Rotation+0x5c>)
 8006b3c:	edc3 7a00 	vstr	s15, [r3]
	omega_z_buff[1] = omega_z_buff[0];
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <Calculate_Machine_Rotation+0x60>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <Calculate_Machine_Rotation+0x60>)
 8006b46:	6053      	str	r3, [r2, #4]
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20002758 	.word	0x20002758
 8006b58:	20002678 	.word	0x20002678
 8006b5c:	20002514 	.word	0x20002514
 8006b60:	3a83126f 	.word	0x3a83126f

08006b64 <ICM20602_Calibration>:

void ICM20602_Calibration(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af02      	add	r7, sp, #8
	if(gyro_calib_flag){
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <ICM20602_Calibration+0x88>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d038      	beq.n	8006be6 <ICM20602_Calibration+0x82>
	gyro_offset.omega_z += gyro_raw.omega_z;
 8006b74:	4b1e      	ldr	r3, [pc, #120]	; (8006bf0 <ICM20602_Calibration+0x8c>)
 8006b76:	ed93 7a02 	vldr	s14, [r3, #8]
 8006b7a:	4b1e      	ldr	r3, [pc, #120]	; (8006bf4 <ICM20602_Calibration+0x90>)
 8006b7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <ICM20602_Calibration+0x8c>)
 8006b86:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_calib_cnt ++;
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <ICM20602_Calibration+0x94>)
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <ICM20602_Calibration+0x94>)
 8006b94:	801a      	strh	r2, [r3, #0]

		if(gyro_calib_cnt ==999){
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <ICM20602_Calibration+0x94>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d121      	bne.n	8006be6 <ICM20602_Calibration+0x82>
			gyro_offset.omega_z /= 1000;
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <ICM20602_Calibration+0x8c>)
 8006ba4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ba8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006bfc <ICM20602_Calibration+0x98>
 8006bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bb0:	4b0f      	ldr	r3, [pc, #60]	; (8006bf0 <ICM20602_Calibration+0x8c>)
 8006bb2:	edc3 7a02 	vstr	s15, [r3, #8]
			gyro_calib_flag = 0;
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	; (8006bec <ICM20602_Calibration+0x88>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
			printf("gyro calibration finished! offset=%f,flag=%d\n\r", gyro_offset.omega_z, gyro_calib_flag);
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <ICM20602_Calibration+0x8c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7f9 fcc1 	bl	8000548 <__aeabi_f2d>
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	4601      	mov	r1, r0
 8006bca:	4b08      	ldr	r3, [pc, #32]	; (8006bec <ICM20602_Calibration+0x88>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	480a      	ldr	r0, [pc, #40]	; (8006c00 <ICM20602_Calibration+0x9c>)
 8006bd8:	f003 ffcc 	bl	800ab74 <iprintf>
			Back_LED_Light(0,1,0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2101      	movs	r1, #1
 8006be0:	2000      	movs	r0, #0
 8006be2:	f000 f991 	bl	8006f08 <Back_LED_Light>
		}
	}
}
 8006be6:	bf00      	nop
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20002448 	.word	0x20002448
 8006bf0:	20002660 	.word	0x20002660
 8006bf4:	20002294 	.word	0x20002294
 8006bf8:	200022b0 	.word	0x200022b0
 8006bfc:	447a0000 	.word	0x447a0000
 8006c00:	0800cba4 	.word	0x0800cba4

08006c04 <HAL_TIM_PeriodElapsedCallback>:
static int8_t failsafe_count;
static float gyro_change_value = 0.0f;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af04      	add	r7, sp, #16
 8006c0a:	6078      	str	r0, [r7, #4]
	// Get Gyro & Encoder Info
 if(htim == &htim5){
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a89      	ldr	r2, [pc, #548]	; (8006e34 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d101      	bne.n	8006c18 <HAL_TIM_PeriodElapsedCallback+0x14>
	ADC_Convert_Check();//adc_case
 8006c14:	f002 fd48 	bl	80096a8 <ADC_Convert_Check>

 }
 if(htim == &htim4){
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a87      	ldr	r2, [pc, #540]	; (8006e38 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	f040 8104 	bne.w	8006e2a <HAL_TIM_PeriodElapsedCallback+0x226>

	motion_counter++;
 8006c22:	4b86      	ldr	r3, [pc, #536]	; (8006e3c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a84      	ldr	r2, [pc, #528]	; (8006e3c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006c2a:	6013      	str	r3, [r2, #0]

	ICM20602_DataUpdate();//ジャイロ更新
 8006c2c:	f7ff fed0 	bl	80069d0 <ICM20602_DataUpdate>
	Encoder_Update(&enc_buff);//エンコーダ更新
 8006c30:	4883      	ldr	r0, [pc, #524]	; (8006e40 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006c32:	f7ff fb87 	bl	8006344 <Encoder_Update>

	if(gyro_calib_flag){
 8006c36:	4b83      	ldr	r3, [pc, #524]	; (8006e44 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_TIM_PeriodElapsedCallback+0x42>
			ICM20602_Calibration(); //最初にキャリブレーション
 8006c40:	f7ff ff90 	bl	8006b64 <ICM20602_Calibration>
 8006c44:	e01f      	b.n	8006c86 <HAL_TIM_PeriodElapsedCallback+0x82>

	}else {
		Calculate_Velocity(&enc_buff, &angle_l, &angle_r, &trans_l, &trans_r);
 8006c46:	4b80      	ldr	r3, [pc, #512]	; (8006e48 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	4b80      	ldr	r3, [pc, #512]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006c4c:	4a80      	ldr	r2, [pc, #512]	; (8006e50 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006c4e:	4981      	ldr	r1, [pc, #516]	; (8006e54 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006c50:	487b      	ldr	r0, [pc, #492]	; (8006e40 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006c52:	f7ff fb99 	bl	8006388 <Calculate_Velocity>
		Calculate_Machine_Rotation();
 8006c56:	f7ff ff51 	bl	8006afc <Calculate_Machine_Rotation>
		gyro_change_value = omega_z_buff[1] -omega_z_buff[0];
 8006c5a:	4b7f      	ldr	r3, [pc, #508]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c60:	4b7d      	ldr	r3, [pc, #500]	; (8006e58 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006c62:	edd3 7a00 	vldr	s15, [r3]
 8006c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c6a:	4b7c      	ldr	r3, [pc, #496]	; (8006e5c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006c6c:	edc3 7a00 	vstr	s15, [r3]


		if(!MF.FLAG.MT_CTRL){
 8006c70:	4b7b      	ldr	r3, [pc, #492]	; (8006e60 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <HAL_TIM_PeriodElapsedCallback+0x82>
		Calculate_Tire_Angle();
 8006c7e:	f7ff fc1d 	bl	80064bc <Calculate_Tire_Angle>
		Calculate_Machine_Distance();
 8006c82:	f7ff fc57 	bl	8006534 <Calculate_Machine_Distance>
		}
	}

	  if ( MF.FLAG.MT_CTRL == 1 ){
 8006c86:	4b76      	ldr	r3, [pc, #472]	; (8006e60 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d157      	bne.n	8006d44 <HAL_TIM_PeriodElapsedCallback+0x140>
	    if ( ( trans_trapezoid_params.reverse_flag == 0 && trans_target.velocity >= 300 && ( trans_l.velocity < 100.0f || trans_r.velocity < 100.0f ) )
 8006c94:	4b73      	ldr	r3, [pc, #460]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006c96:	7f5b      	ldrb	r3, [r3, #29]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11d      	bne.n	8006cda <HAL_TIM_PeriodElapsedCallback+0xd6>
 8006c9e:	4b72      	ldr	r3, [pc, #456]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ca4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006e6c <HAL_TIM_PeriodElapsedCallback+0x268>
 8006ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb0:	db13      	blt.n	8006cda <HAL_TIM_PeriodElapsedCallback+0xd6>
 8006cb2:	4b66      	ldr	r3, [pc, #408]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006cb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cb8:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8006e70 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8006cbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	d425      	bmi.n	8006d12 <HAL_TIM_PeriodElapsedCallback+0x10e>
 8006cc6:	4b60      	ldr	r3, [pc, #384]	; (8006e48 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006cc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ccc:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006e70 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8006cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	d41b      	bmi.n	8006d12 <HAL_TIM_PeriodElapsedCallback+0x10e>
	        || gyro_change_value >400.0f || gyro_change_value < -400.0f || ( trans_target.acceleration == 0.0f)){
 8006cda:	4b60      	ldr	r3, [pc, #384]	; (8006e5c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8006e74 <HAL_TIM_PeriodElapsedCallback+0x270>
 8006ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	dc11      	bgt.n	8006d12 <HAL_TIM_PeriodElapsedCallback+0x10e>
 8006cee:	4b5b      	ldr	r3, [pc, #364]	; (8006e5c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006cf0:	edd3 7a00 	vldr	s15, [r3]
 8006cf4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8006e78 <HAL_TIM_PeriodElapsedCallback+0x274>
 8006cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d00:	d407      	bmi.n	8006d12 <HAL_TIM_PeriodElapsedCallback+0x10e>
 8006d02:	4b59      	ldr	r3, [pc, #356]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006d04:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d10:	d115      	bne.n	8006d3e <HAL_TIM_PeriodElapsedCallback+0x13a>
	        failsafe_count++;
 8006d12:	4b5a      	ldr	r3, [pc, #360]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006d14:	f993 3000 	ldrsb.w	r3, [r3]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	b25a      	sxtb	r2, r3
 8006d20:	4b56      	ldr	r3, [pc, #344]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006d22:	701a      	strb	r2, [r3, #0]
	        if ( failsafe_count > 5 ){
 8006d24:	4b55      	ldr	r3, [pc, #340]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006d26:	f993 3000 	ldrsb.w	r3, [r3]
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	dd0a      	ble.n	8006d44 <HAL_TIM_PeriodElapsedCallback+0x140>
	        	MF.FLAG.FAILSAFE = 1;
 8006d2e:	4a4c      	ldr	r2, [pc, #304]	; (8006e60 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006d30:	8813      	ldrh	r3, [r2, #0]
 8006d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d36:	8013      	strh	r3, [r2, #0]
//	          Front_LED_Light(1,1,1);
	  		Motor_Drive_Stop();
 8006d38:	f7ff face 	bl	80062d8 <Motor_Drive_Stop>
	        if ( failsafe_count > 5 ){
 8006d3c:	e002      	b.n	8006d44 <HAL_TIM_PeriodElapsedCallback+0x140>
	        }
	    } else {
	      failsafe_count = 0;
 8006d3e:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
	    }
	  }


	//Motor Control
	if(MF.FLAG.MT_CTRL){
 8006d44:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d069      	beq.n	8006e26 <HAL_TIM_PeriodElapsedCallback+0x222>
		if(MF.FLAG.WALL_CTRL){
 8006d52:	4b43      	ldr	r3, [pc, #268]	; (8006e60 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_TIM_PeriodElapsedCallback+0x164>
		Side_Wall_Control();
 8006d60:	f7fe fda8 	bl	80058b4 <Side_Wall_Control>
	    Front_Wall_Control();
 8006d64:	f7fe fe86 	bl	8005a74 <Front_Wall_Control>
		}

		if(trans_trapezoid_params.flag == 1){
 8006d68:	4b3e      	ldr	r3, [pc, #248]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006d6a:	7f1b      	ldrb	r3, [r3, #28]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d103      	bne.n	8006d7a <HAL_TIM_PeriodElapsedCallback+0x176>
			Acceleration_Control(&trans_target, &trans_trapezoid_params);
 8006d72:	493c      	ldr	r1, [pc, #240]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006d74:	483c      	ldr	r0, [pc, #240]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006d76:	f7fe fbb0 	bl	80054da <Acceleration_Control>
		}
		if(rot_trapezoid_params.flag == 1){
 8006d7a:	4b41      	ldr	r3, [pc, #260]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006d7c:	7f1b      	ldrb	r3, [r3, #28]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <HAL_TIM_PeriodElapsedCallback+0x18e>
			Acceleration_Control(&rot_target, &rot_trapezoid_params);
 8006d84:	493e      	ldr	r1, [pc, #248]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006d86:	483f      	ldr	r0, [pc, #252]	; (8006e84 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006d88:	f7fe fba7 	bl	80054da <Acceleration_Control>
			Calculate_Target(&rot_target);
 8006d8c:	483d      	ldr	r0, [pc, #244]	; (8006e84 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006d8e:	f7fe fc1b 	bl	80055c8 <Calculate_Target>
		}

	PID_Control(&trans_target, &trans_l, &trans_r, &trans_info ,&trans_gain, &motor_duty, &trans_trapezoid_params,0);
 8006d92:	2300      	movs	r3, #0
 8006d94:	9303      	str	r3, [sp, #12]
 8006d96:	4b33      	ldr	r3, [pc, #204]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006d98:	9302      	str	r3, [sp, #8]
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	4b3b      	ldr	r3, [pc, #236]	; (8006e8c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8006da4:	4a28      	ldr	r2, [pc, #160]	; (8006e48 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006da6:	4929      	ldr	r1, [pc, #164]	; (8006e4c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006da8:	482f      	ldr	r0, [pc, #188]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006daa:	f7fe fc65 	bl	8005678 <PID_Control>

		if ( trans_trapezoid_params.reverse_flag == 0 || trans_target.velocity > 100.0f ){
 8006dae:	4b2d      	ldr	r3, [pc, #180]	; (8006e64 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006db0:	7f5b      	ldrb	r3, [r3, #29]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d009      	beq.n	8006dcc <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006dba:	edd3 7a01 	vldr	s15, [r3, #4]
 8006dbe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006e70 <HAL_TIM_PeriodElapsedCallback+0x26c>
 8006dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dca:	dd0d      	ble.n	8006de8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			PID_Control(&rot_target, &rot_machine, &rot_machine, &rot_info ,&rot_gain, &motor_duty, &rot_trapezoid_params,1);
 8006dcc:	2301      	movs	r3, #1
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	4b2e      	ldr	r3, [pc, #184]	; (8006e98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8006dde:	4a2f      	ldr	r2, [pc, #188]	; (8006e9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8006de0:	492e      	ldr	r1, [pc, #184]	; (8006e9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8006de2:	4828      	ldr	r0, [pc, #160]	; (8006e84 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8006de4:	f7fe fc48 	bl	8005678 <PID_Control>
		}

	Calculate_Target(&trans_target);
 8006de8:	481f      	ldr	r0, [pc, #124]	; (8006e68 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006dea:	f7fe fbed 	bl	80055c8 <Calculate_Target>
	integralDistance( &trans_r.velocity, &trans_r.distance );
 8006dee:	4916      	ldr	r1, [pc, #88]	; (8006e48 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006df0:	482b      	ldr	r0, [pc, #172]	; (8006ea0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8006df2:	f7fe fc25 	bl	8005640 <integralDistance>

	Motor_Direction_Decide(&motor_duty);
 8006df6:	4824      	ldr	r0, [pc, #144]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006df8:	f7ff f9d8 	bl	80061ac <Motor_Direction_Decide>
	Motor_PWM_OUT(&motor_duty);
 8006dfc:	4822      	ldr	r0, [pc, #136]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006dfe:	f7ff fa1b 	bl	8006238 <Motor_PWM_OUT>


		 log_cnt = 1;
 8006e02:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	701a      	strb	r2, [r3, #0]

	if(log_cnt==1) {
 8006e08:	4b26      	ldr	r3, [pc, #152]	; (8006ea4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_PeriodElapsedCallback+0x210>
			Log_Saver();
 8006e10:	f000 f8f2 	bl	8006ff8 <Log_Saver>
		}

	//dutyリセット
	motor_duty.left = 0;
 8006e14:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	801a      	strh	r2, [r3, #0]
	motor_duty.right = 0;
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	805a      	strh	r2, [r3, #2]

	Buzzer_Control();
 8006e20:	f003 f9d6 	bl	800a1d0 <Buzzer_Control>

	} else {
		Motor_Drive_Stop();
	}
  }
}
 8006e24:	e001      	b.n	8006e2a <HAL_TIM_PeriodElapsedCallback+0x226>
		Motor_Drive_Stop();
 8006e26:	f7ff fa57 	bl	80062d8 <Motor_Drive_Stop>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	2000246c 	.word	0x2000246c
 8006e38:	20002360 	.word	0x20002360
 8006e3c:	200025bc 	.word	0x200025bc
 8006e40:	200027c0 	.word	0x200027c0
 8006e44:	20002448 	.word	0x20002448
 8006e48:	20002650 	.word	0x20002650
 8006e4c:	20002460 	.word	0x20002460
 8006e50:	200029e0 	.word	0x200029e0
 8006e54:	20000248 	.word	0x20000248
 8006e58:	20002514 	.word	0x20002514
 8006e5c:	200001fc 	.word	0x200001fc
 8006e60:	200029dc 	.word	0x200029dc
 8006e64:	200025c0 	.word	0x200025c0
 8006e68:	200026f4 	.word	0x200026f4
 8006e6c:	43960000 	.word	0x43960000
 8006e70:	42c80000 	.word	0x42c80000
 8006e74:	43c80000 	.word	0x43c80000
 8006e78:	c3c80000 	.word	0xc3c80000
 8006e7c:	200001f9 	.word	0x200001f9
 8006e80:	20002714 	.word	0x20002714
 8006e84:	20002508 	.word	0x20002508
 8006e88:	200027b0 	.word	0x200027b0
 8006e8c:	2000243c 	.word	0x2000243c
 8006e90:	20002734 	.word	0x20002734
 8006e94:	2000244c 	.word	0x2000244c
 8006e98:	20002700 	.word	0x20002700
 8006e9c:	20002678 	.word	0x20002678
 8006ea0:	20002654 	.word	0x20002654
 8006ea4:	200001f8 	.word	0x200001f8

08006ea8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	Get_Sensor_Data(&adc_case);
 8006eb0:	4803      	ldr	r0, [pc, #12]	; (8006ec0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8006eb2:	f002 fb2b 	bl	800950c <Get_Sensor_Data>
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20002584 	.word	0x20002584

08006ec4 <Front_LED_Light>:
 */

#include "global.h"

void Front_LED_Light(uint8_t Left,uint8_t Middle,uint8_t Right)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	71bb      	strb	r3, [r7, #6]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,Left);	 //Front1
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2120      	movs	r1, #32
 8006edc:	4809      	ldr	r0, [pc, #36]	; (8006f04 <Front_LED_Light+0x40>)
 8006ede:	f7fb fe11 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,Middle); //Front2
 8006ee2:	79bb      	ldrb	r3, [r7, #6]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	4806      	ldr	r0, [pc, #24]	; (8006f04 <Front_LED_Light+0x40>)
 8006eea:	f7fb fe0b 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,Right);  //Front3
 8006eee:	797b      	ldrb	r3, [r7, #5]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2108      	movs	r1, #8
 8006ef4:	4803      	ldr	r0, [pc, #12]	; (8006f04 <Front_LED_Light+0x40>)
 8006ef6:	f7fb fe05 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40020400 	.word	0x40020400

08006f08 <Back_LED_Light>:



void Back_LED_Light(uint8_t Left,uint8_t Middle,uint8_t Right)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
 8006f12:	460b      	mov	r3, r1
 8006f14:	71bb      	strb	r3, [r7, #6]
 8006f16:	4613      	mov	r3, r2
 8006f18:	717b      	strb	r3, [r7, #5]
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,Left);//BackLeft
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f22:	480a      	ldr	r0, [pc, #40]	; (8006f4c <Back_LED_Light+0x44>)
 8006f24:	f7fb fdee 	bl	8002b04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,Middle);//BackMid
 8006f28:	79bb      	ldrb	r3, [r7, #6]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f30:	4807      	ldr	r0, [pc, #28]	; (8006f50 <Back_LED_Light+0x48>)
 8006f32:	f7fb fde7 	bl	8002b04 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,Right);//BackRight
 8006f36:	797b      	ldrb	r3, [r7, #5]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f3e:	4804      	ldr	r0, [pc, #16]	; (8006f50 <Back_LED_Light+0x48>)
 8006f40:	f7fb fde0 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40020400 	.word	0x40020400
 8006f50:	40020000 	.word	0x40020000

08006f54 <Red_LED_Light>:


void Red_LED_Light(uint8_t SL, uint8_t FL, uint8_t FR, uint8_t SR)
{
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	4623      	mov	r3, r4
 8006f64:	71fb      	strb	r3, [r7, #7]
 8006f66:	4603      	mov	r3, r0
 8006f68:	71bb      	strb	r3, [r7, #6]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	717b      	strb	r3, [r7, #5]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SL);//LED_SideLeft
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	461a      	mov	r2, r3
 8006f76:	2104      	movs	r1, #4
 8006f78:	480d      	ldr	r0, [pc, #52]	; (8006fb0 <Red_LED_Light+0x5c>)
 8006f7a:	f7fb fdc3 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,FL);//LED_FrontLeft
 8006f7e:	79bb      	ldrb	r3, [r7, #6]
 8006f80:	461a      	mov	r2, r3
 8006f82:	2108      	movs	r1, #8
 8006f84:	480a      	ldr	r0, [pc, #40]	; (8006fb0 <Red_LED_Light+0x5c>)
 8006f86:	f7fb fdbd 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,FR);//LED_FrontRight
 8006f8a:	797b      	ldrb	r3, [r7, #5]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f92:	4808      	ldr	r0, [pc, #32]	; (8006fb4 <Red_LED_Light+0x60>)
 8006f94:	f7fb fdb6 	bl	8002b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,SR);//LED_SideRight
 8006f98:	793b      	ldrb	r3, [r7, #4]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fa0:	4804      	ldr	r0, [pc, #16]	; (8006fb4 <Red_LED_Light+0x60>)
 8006fa2:	f7fb fdaf 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40020000 	.word	0x40020000
 8006fb4:	40020400 	.word	0x40020400

08006fb8 <LED_Light1>:


void LED_Light1(void){
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++){
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	e012      	b.n	8006fea <LED_Light1+0x32>
			Back_LED_Light(1,0,1);
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2001      	movs	r0, #1
 8006fca:	f7ff ff9d 	bl	8006f08 <Back_LED_Light>
			HAL_Delay(150);
 8006fce:	2096      	movs	r0, #150	; 0x96
 8006fd0:	f7f9 ffdc 	bl	8000f8c <HAL_Delay>
			Back_LED_Light(0,0,0);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	2000      	movs	r0, #0
 8006fda:	f7ff ff95 	bl	8006f08 <Back_LED_Light>
			HAL_Delay(150);
 8006fde:	2096      	movs	r0, #150	; 0x96
 8006fe0:	f7f9 ffd4 	bl	8000f8c <HAL_Delay>
	for(int i=0; i<3; i++){
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	607b      	str	r3, [r7, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	dde9      	ble.n	8006fc4 <LED_Light1+0xc>
		}
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <Log_Saver>:


uint16_t log_counter = 0;

void Log_Saver(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
	if(log_counter < MAX_LOG_NUMBER){
 8006ffc:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <Log_Saver+0x40>)
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007004:	d20c      	bcs.n	8007020 <Log_Saver+0x28>
		log_buff.log1[log_counter] = log_data1;
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <Log_Saver+0x44>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <Log_Saver+0x40>)
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	ee07 2a90 	vmov	s15, r2
 8007012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007016:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <Log_Saver+0x48>)
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	edc3 7a00 	vstr	s15, [r3]

//	log_buff.machine_velocity[log_counter] = rot_machine.distance;
//	log_buff.Rot_Target[log_counter] = rot_target.distance;

	}
	log_counter++;
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <Log_Saver+0x40>)
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	4b03      	ldr	r3, [pc, #12]	; (8007038 <Log_Saver+0x40>)
 800702a:	801a      	strh	r2, [r3, #0]
}
 800702c:	bf00      	nop
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000200 	.word	0x20000200
 800703c:	200025e4 	.word	0x200025e4
 8007040:	20000354 	.word	0x20000354

08007044 <Log_Shower>:


void Log_Shower(void)
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
	int16_t log_number = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	80fb      	strh	r3, [r7, #6]

	for(log_number=0; log_number<MAX_LOG_NUMBER; log_number ++)
 800704e:	2300      	movs	r3, #0
 8007050:	80fb      	strh	r3, [r7, #6]
 8007052:	e018      	b.n	8007086 <Log_Shower+0x42>
	{
	//printf("%f\t%f\r\n",log_buff.log1[log_number],log_buff.log2[log_number]);
	printf("%f\r\n",log_buff.log1[log_number]);
 8007054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007058:	4a0f      	ldr	r2, [pc, #60]	; (8007098 <Log_Shower+0x54>)
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7f9 fa71 	bl	8000548 <__aeabi_f2d>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	461a      	mov	r2, r3
 800706c:	4623      	mov	r3, r4
 800706e:	480b      	ldr	r0, [pc, #44]	; (800709c <Log_Shower+0x58>)
 8007070:	f003 fd80 	bl	800ab74 <iprintf>

	HAL_Delay(50);
 8007074:	2032      	movs	r0, #50	; 0x32
 8007076:	f7f9 ff89 	bl	8000f8c <HAL_Delay>
	for(log_number=0; log_number<MAX_LOG_NUMBER; log_number ++)
 800707a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800707e:	b29b      	uxth	r3, r3
 8007080:	3301      	adds	r3, #1
 8007082:	b29b      	uxth	r3, r3
 8007084:	80fb      	strh	r3, [r7, #6]
 8007086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800708e:	dbe1      	blt.n	8007054 <Log_Shower+0x10>

	}
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bd90      	pop	{r4, r7, pc}
 8007098:	20000354 	.word	0x20000354
 800709c:	0800cbd4 	.word	0x0800cbd4

080070a0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void __io_putchar(uint8_t ch) {
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart3, &ch, 1, 1);
 80070aa:	1df9      	adds	r1, r7, #7
 80070ac:	2301      	movs	r3, #1
 80070ae:	2201      	movs	r2, #1
 80070b0:	4803      	ldr	r0, [pc, #12]	; (80070c0 <__io_putchar+0x20>)
 80070b2:	f7fd fe84 	bl	8004dbe <HAL_UART_Transmit>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200023a0 	.word	0x200023a0

080070c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80070ca:	4b48      	ldr	r3, [pc, #288]	; (80071ec <main+0x128>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f003 fdca 	bl	800ac6c <setbuf>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070d8:	f7f9 fee6 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070dc:	f000 f8a0 	bl	8007220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070e0:	f000 fc6a 	bl	80079b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80070e4:	f000 fc48 	bl	8007978 <MX_DMA_Init>
  MX_ADC1_Init();
 80070e8:	f000 f904 	bl	80072f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 80070ec:	f000 f9d0 	bl	8007490 <MX_SPI2_Init>
  MX_TIM1_Init();
 80070f0:	f000 fa04 	bl	80074fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80070f4:	f000 fa5a 	bl	80075ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80070f8:	f000 fabc 	bl	8007674 <MX_TIM3_Init>
  MX_TIM4_Init();
 80070fc:	f000 fb1e 	bl	800773c <MX_TIM4_Init>
  MX_TIM8_Init();
 8007100:	f000 fbb8 	bl	8007874 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8007104:	f000 fc0e 	bl	8007924 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8007108:	f000 f970 	bl	80073ec <MX_ADC2_Init>
  MX_TIM5_Init();
 800710c:	f000 fb64 	bl	80077d8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  printf("\nProgram Start!\n\r");
 8007110:	4837      	ldr	r0, [pc, #220]	; (80071f0 <main+0x12c>)
 8007112:	f003 fd2f 	bl	800ab74 <iprintf>

//Initialization
  search_init();
 8007116:	f001 fb6d 	bl	80087f4 <search_init>
  IMU_Init();
 800711a:	f7ff fb15 	bl	8006748 <IMU_Init>
  ICM20602_Init();
 800711e:	f7ff fbb5 	bl	800688c <ICM20602_Init>

//function start

   HAL_TIM_Encoder_Start( &htim1, TIM_CHANNEL_ALL );
 8007122:	213c      	movs	r1, #60	; 0x3c
 8007124:	4833      	ldr	r0, [pc, #204]	; (80071f4 <main+0x130>)
 8007126:	f7fc ffaf 	bl	8004088 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start( &htim8, TIM_CHANNEL_ALL );
 800712a:	213c      	movs	r1, #60	; 0x3c
 800712c:	4832      	ldr	r0, [pc, #200]	; (80071f8 <main+0x134>)
 800712e:	f7fc ffab 	bl	8004088 <HAL_TIM_Encoder_Start>
   Encoder_Init();
 8007132:	f7ff f8e3 	bl	80062fc <Encoder_Init>
   HAL_TIM_Base_Start_IT(&htim2);
 8007136:	4831      	ldr	r0, [pc, #196]	; (80071fc <main+0x138>)
 8007138:	f7fc fe87 	bl	8003e4a <HAL_TIM_Base_Start_IT>

   HAL_TIM_Base_Start_IT(&htim4);
 800713c:	4830      	ldr	r0, [pc, #192]	; (8007200 <main+0x13c>)
 800713e:	f7fc fe84 	bl	8003e4a <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim5);
 8007142:	4830      	ldr	r0, [pc, #192]	; (8007204 <main+0x140>)
 8007144:	f7fc fe81 	bl	8003e4a <HAL_TIM_Base_Start_IT>

//   printf("debug2!\n\r");
   HAL_Delay(20);
 8007148:	2014      	movs	r0, #20
 800714a:	f7f9 ff1f 	bl	8000f8c <HAL_Delay>

   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,SET);//Left Motor IN1
 800714e:	2201      	movs	r2, #1
 8007150:	2110      	movs	r1, #16
 8007152:	482d      	ldr	r0, [pc, #180]	; (8007208 <main+0x144>)
 8007154:	f7fb fcd6 	bl	8002b04 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,RESET);//Left Motor IN2
 8007158:	2200      	movs	r2, #0
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	482b      	ldr	r0, [pc, #172]	; (800720c <main+0x148>)
 800715e:	f7fb fcd1 	bl	8002b04 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);//Right Motor IN1
 8007162:	2200      	movs	r2, #0
 8007164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007168:	4829      	ldr	r0, [pc, #164]	; (8007210 <main+0x14c>)
 800716a:	f7fb fccb 	bl	8002b04 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,SET);//Right Motor IN2
 800716e:	2201      	movs	r2, #1
 8007170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007174:	4826      	ldr	r0, [pc, #152]	; (8007210 <main+0x14c>)
 8007176:	f7fb fcc5 	bl	8002b04 <HAL_GPIO_WritePin>

   Motor_Init();
 800717a:	f7fe fcbd 	bl	8005af8 <Motor_Init>

   uint8_t i = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<3;i++){
 8007182:	2300      	movs	r3, #0
 8007184:	71fb      	strb	r3, [r7, #7]
 8007186:	e012      	b.n	80071ae <main+0xea>
	Front_LED_Light(0,0,0);
 8007188:	2200      	movs	r2, #0
 800718a:	2100      	movs	r1, #0
 800718c:	2000      	movs	r0, #0
 800718e:	f7ff fe99 	bl	8006ec4 <Front_LED_Light>
	HAL_Delay(100);
 8007192:	2064      	movs	r0, #100	; 0x64
 8007194:	f7f9 fefa 	bl	8000f8c <HAL_Delay>
	Front_LED_Light(0,1,0);
 8007198:	2200      	movs	r2, #0
 800719a:	2101      	movs	r1, #1
 800719c:	2000      	movs	r0, #0
 800719e:	f7ff fe91 	bl	8006ec4 <Front_LED_Light>
	HAL_Delay(100);
 80071a2:	2064      	movs	r0, #100	; 0x64
 80071a4:	f7f9 fef2 	bl	8000f8c <HAL_Delay>
	for(i=0;i<3;i++){
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	3301      	adds	r3, #1
 80071ac:	71fb      	strb	r3, [r7, #7]
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d9e9      	bls.n	8007188 <main+0xc4>
	}
	Back_LED_Light(0,1,0);
 80071b4:	2200      	movs	r2, #0
 80071b6:	2101      	movs	r1, #1
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7ff fea5 	bl	8006f08 <Back_LED_Light>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
   {
		   printf("Select Mode!\r\n");
 80071be:	4815      	ldr	r0, [pc, #84]	; (8007214 <main+0x150>)
 80071c0:	f003 fd4c 	bl	800ac5c <puts>
		   mode = mode_change();
 80071c4:	f7ff fa02 	bl	80065cc <mode_change>
 80071c8:	4603      	mov	r3, r0
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	4b12      	ldr	r3, [pc, #72]	; (8007218 <main+0x154>)
 80071ce:	701a      	strb	r2, [r3, #0]
		   printf("Mode=%d\r\n", mode);
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <main+0x154>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	4619      	mov	r1, r3
 80071d6:	4811      	ldr	r0, [pc, #68]	; (800721c <main+0x158>)
 80071d8:	f003 fccc 	bl	800ab74 <iprintf>
		   Mode_Select(mode);
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <main+0x154>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fc78 	bl	8007ad8 <Mode_Select>
		   printf("Select Mode!\r\n");
 80071e8:	e7e9      	b.n	80071be <main+0xfa>
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	0800cbdc 	.word	0x0800cbdc
 80071f4:	20002694 	.word	0x20002694
 80071f8:	20002320 	.word	0x20002320
 80071fc:	20002770 	.word	0x20002770
 8007200:	20002360 	.word	0x20002360
 8007204:	2000246c 	.word	0x2000246c
 8007208:	40020800 	.word	0x40020800
 800720c:	40020000 	.word	0x40020000
 8007210:	40020400 	.word	0x40020400
 8007214:	0800cbf0 	.word	0x0800cbf0
 8007218:	20000202 	.word	0x20000202
 800721c:	0800cc00 	.word	0x0800cc00

08007220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b094      	sub	sp, #80	; 0x50
 8007224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007226:	f107 0320 	add.w	r3, r7, #32
 800722a:	2230      	movs	r2, #48	; 0x30
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f003 f83c 	bl	800a2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007244:	2300      	movs	r3, #0
 8007246:	60bb      	str	r3, [r7, #8]
 8007248:	4b28      	ldr	r3, [pc, #160]	; (80072ec <SystemClock_Config+0xcc>)
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <SystemClock_Config+0xcc>)
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007252:	6413      	str	r3, [r2, #64]	; 0x40
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <SystemClock_Config+0xcc>)
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007260:	2300      	movs	r3, #0
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <SystemClock_Config+0xd0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <SystemClock_Config+0xd0>)
 800726a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	4b1f      	ldr	r3, [pc, #124]	; (80072f0 <SystemClock_Config+0xd0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	607b      	str	r3, [r7, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800727c:	2302      	movs	r3, #2
 800727e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007280:	2301      	movs	r3, #1
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007284:	2310      	movs	r3, #16
 8007286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007288:	2302      	movs	r3, #2
 800728a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800728c:	2300      	movs	r3, #0
 800728e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007290:	2308      	movs	r3, #8
 8007292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007294:	23a8      	movs	r3, #168	; 0xa8
 8007296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007298:	2302      	movs	r3, #2
 800729a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800729c:	2304      	movs	r3, #4
 800729e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072a0:	f107 0320 	add.w	r3, r7, #32
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fb fc47 	bl	8002b38 <HAL_RCC_OscConfig>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80072b0:	f000 fc0e 	bl	8007ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072b4:	230f      	movs	r3, #15
 80072b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072b8:	2302      	movs	r3, #2
 80072ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80072c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80072c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80072c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80072cc:	f107 030c 	add.w	r3, r7, #12
 80072d0:	2105      	movs	r1, #5
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fb fe72 	bl	8002fbc <HAL_RCC_ClockConfig>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80072de:	f000 fbf7 	bl	8007ad0 <Error_Handler>
  }
}
 80072e2:	bf00      	nop
 80072e4:	3750      	adds	r7, #80	; 0x50
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40007000 	.word	0x40007000

080072f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80072fa:	463b      	mov	r3, r7
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007306:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007308:	4a36      	ldr	r2, [pc, #216]	; (80073e4 <MX_ADC1_Init+0xf0>)
 800730a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800730c:	4b34      	ldr	r3, [pc, #208]	; (80073e0 <MX_ADC1_Init+0xec>)
 800730e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007314:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007316:	2200      	movs	r2, #0
 8007318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800731a:	4b31      	ldr	r3, [pc, #196]	; (80073e0 <MX_ADC1_Init+0xec>)
 800731c:	2201      	movs	r2, #1
 800731e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007320:	4b2f      	ldr	r3, [pc, #188]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007322:	2201      	movs	r2, #1
 8007324:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800732e:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007330:	2200      	movs	r2, #0
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007334:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007336:	4a2c      	ldr	r2, [pc, #176]	; (80073e8 <MX_ADC1_Init+0xf4>)
 8007338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800733a:	4b29      	ldr	r3, [pc, #164]	; (80073e0 <MX_ADC1_Init+0xec>)
 800733c:	2200      	movs	r2, #0
 800733e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007342:	2204      	movs	r2, #4
 8007344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007350:	2201      	movs	r2, #1
 8007352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007354:	4822      	ldr	r0, [pc, #136]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007356:	f7f9 fe3b 	bl	8000fd0 <HAL_ADC_Init>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007360:	f000 fbb6 	bl	8007ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007364:	230a      	movs	r3, #10
 8007366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007368:	2301      	movs	r3, #1
 800736a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800736c:	2301      	movs	r3, #1
 800736e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007370:	463b      	mov	r3, r7
 8007372:	4619      	mov	r1, r3
 8007374:	481a      	ldr	r0, [pc, #104]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007376:	f7f9 ffbf 	bl	80012f8 <HAL_ADC_ConfigChannel>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007380:	f000 fba6 	bl	8007ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007384:	2301      	movs	r3, #1
 8007386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8007388:	2302      	movs	r3, #2
 800738a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800738c:	463b      	mov	r3, r7
 800738e:	4619      	mov	r1, r3
 8007390:	4813      	ldr	r0, [pc, #76]	; (80073e0 <MX_ADC1_Init+0xec>)
 8007392:	f7f9 ffb1 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800739c:	f000 fb98 	bl	8007ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80073a0:	230b      	movs	r3, #11
 80073a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80073a4:	2303      	movs	r3, #3
 80073a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073a8:	463b      	mov	r3, r7
 80073aa:	4619      	mov	r1, r3
 80073ac:	480c      	ldr	r0, [pc, #48]	; (80073e0 <MX_ADC1_Init+0xec>)
 80073ae:	f7f9 ffa3 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80073b8:	f000 fb8a 	bl	8007ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80073bc:	2300      	movs	r3, #0
 80073be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80073c0:	2304      	movs	r3, #4
 80073c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073c4:	463b      	mov	r3, r7
 80073c6:	4619      	mov	r1, r3
 80073c8:	4805      	ldr	r0, [pc, #20]	; (80073e0 <MX_ADC1_Init+0xec>)
 80073ca:	f7f9 ff95 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80073d4:	f000 fb7c 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	2000251c 	.word	0x2000251c
 80073e4:	40012000 	.word	0x40012000
 80073e8:	0f000001 	.word	0x0f000001

080073ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80073f2:	463b      	mov	r3, r7
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	605a      	str	r2, [r3, #4]
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80073fe:	4b21      	ldr	r3, [pc, #132]	; (8007484 <MX_ADC2_Init+0x98>)
 8007400:	4a21      	ldr	r2, [pc, #132]	; (8007488 <MX_ADC2_Init+0x9c>)
 8007402:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007404:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <MX_ADC2_Init+0x98>)
 8007406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800740a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800740c:	4b1d      	ldr	r3, [pc, #116]	; (8007484 <MX_ADC2_Init+0x98>)
 800740e:	2200      	movs	r2, #0
 8007410:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007412:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <MX_ADC2_Init+0x98>)
 8007414:	2200      	movs	r2, #0
 8007416:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <MX_ADC2_Init+0x98>)
 800741a:	2200      	movs	r2, #0
 800741c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800741e:	4b19      	ldr	r3, [pc, #100]	; (8007484 <MX_ADC2_Init+0x98>)
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <MX_ADC2_Init+0x98>)
 8007428:	2200      	movs	r2, #0
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800742c:	4b15      	ldr	r3, [pc, #84]	; (8007484 <MX_ADC2_Init+0x98>)
 800742e:	4a17      	ldr	r2, [pc, #92]	; (800748c <MX_ADC2_Init+0xa0>)
 8007430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <MX_ADC2_Init+0x98>)
 8007434:	2200      	movs	r2, #0
 8007436:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8007438:	4b12      	ldr	r3, [pc, #72]	; (8007484 <MX_ADC2_Init+0x98>)
 800743a:	2201      	movs	r2, #1
 800743c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800743e:	4b11      	ldr	r3, [pc, #68]	; (8007484 <MX_ADC2_Init+0x98>)
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <MX_ADC2_Init+0x98>)
 8007448:	2201      	movs	r2, #1
 800744a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800744c:	480d      	ldr	r0, [pc, #52]	; (8007484 <MX_ADC2_Init+0x98>)
 800744e:	f7f9 fdbf 	bl	8000fd0 <HAL_ADC_Init>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8007458:	f000 fb3a 	bl	8007ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800745c:	230f      	movs	r3, #15
 800745e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007460:	2301      	movs	r3, #1
 8007462:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007464:	2300      	movs	r3, #0
 8007466:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007468:	463b      	mov	r3, r7
 800746a:	4619      	mov	r1, r3
 800746c:	4805      	ldr	r0, [pc, #20]	; (8007484 <MX_ADC2_Init+0x98>)
 800746e:	f7f9 ff43 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8007478:	f000 fb2a 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200023e0 	.word	0x200023e0
 8007488:	40012100 	.word	0x40012100
 800748c:	0f000001 	.word	0x0f000001

08007490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007494:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <MX_SPI2_Init+0x64>)
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <MX_SPI2_Init+0x68>)
 8007498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <MX_SPI2_Init+0x64>)
 800749c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80074a2:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80074a8:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074b4:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074c4:	2220      	movs	r2, #32
 80074c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80074da:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074dc:	220a      	movs	r2, #10
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80074e0:	4804      	ldr	r0, [pc, #16]	; (80074f4 <MX_SPI2_Init+0x64>)
 80074e2:	f7fb ff33 	bl	800334c <HAL_SPI_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80074ec:	f000 faf0 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80074f0:	bf00      	nop
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200022b4 	.word	0x200022b4
 80074f8:	40003800 	.word	0x40003800

080074fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007502:	f107 030c 	add.w	r3, r7, #12
 8007506:	2224      	movs	r2, #36	; 0x24
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f002 fece 	bl	800a2ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007518:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <MX_TIM1_Init+0xa8>)
 800751a:	4a23      	ldr	r2, [pc, #140]	; (80075a8 <MX_TIM1_Init+0xac>)
 800751c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <MX_TIM1_Init+0xa8>)
 8007520:	2200      	movs	r2, #0
 8007522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <MX_TIM1_Init+0xa8>)
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800752a:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <MX_TIM1_Init+0xa8>)
 800752c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007532:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <MX_TIM1_Init+0xa8>)
 8007534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800753a:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <MX_TIM1_Init+0xa8>)
 800753c:	2200      	movs	r2, #0
 800753e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007540:	4b18      	ldr	r3, [pc, #96]	; (80075a4 <MX_TIM1_Init+0xa8>)
 8007542:	2200      	movs	r2, #0
 8007544:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007546:	2303      	movs	r3, #3
 8007548:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800754e:	2301      	movs	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007552:	2300      	movs	r3, #0
 8007554:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800755a:	2300      	movs	r3, #0
 800755c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800755e:	2301      	movs	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007562:	2300      	movs	r3, #0
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800756a:	f107 030c 	add.w	r3, r7, #12
 800756e:	4619      	mov	r1, r3
 8007570:	480c      	ldr	r0, [pc, #48]	; (80075a4 <MX_TIM1_Init+0xa8>)
 8007572:	f7fc fcf7 	bl	8003f64 <HAL_TIM_Encoder_Init>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800757c:	f000 faa8 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007580:	2300      	movs	r3, #0
 8007582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007584:	2300      	movs	r3, #0
 8007586:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007588:	1d3b      	adds	r3, r7, #4
 800758a:	4619      	mov	r1, r3
 800758c:	4805      	ldr	r0, [pc, #20]	; (80075a4 <MX_TIM1_Init+0xa8>)
 800758e:	f7fd fb70 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8007598:	f000 fa9a 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800759c:	bf00      	nop
 800759e:	3730      	adds	r7, #48	; 0x30
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20002694 	.word	0x20002694
 80075a8:	40010000 	.word	0x40010000

080075ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	; 0x28
 80075b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075b2:	f107 0320 	add.w	r3, r7, #32
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	605a      	str	r2, [r3, #4]
 80075c4:	609a      	str	r2, [r3, #8]
 80075c6:	60da      	str	r2, [r3, #12]
 80075c8:	611a      	str	r2, [r3, #16]
 80075ca:	615a      	str	r2, [r3, #20]
 80075cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80075ce:	4b28      	ldr	r3, [pc, #160]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80075d6:	4b26      	ldr	r3, [pc, #152]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075dc:	4b24      	ldr	r3, [pc, #144]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80075e2:	4b23      	ldr	r3, [pc, #140]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80075e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80075ea:	4b21      	ldr	r3, [pc, #132]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80075f0:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80075f6:	481e      	ldr	r0, [pc, #120]	; (8007670 <MX_TIM2_Init+0xc4>)
 80075f8:	f7fc fc4b 	bl	8003e92 <HAL_TIM_PWM_Init>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007602:	f000 fa65 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007606:	2300      	movs	r3, #0
 8007608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800760e:	f107 0320 	add.w	r3, r7, #32
 8007612:	4619      	mov	r1, r3
 8007614:	4816      	ldr	r0, [pc, #88]	; (8007670 <MX_TIM2_Init+0xc4>)
 8007616:	f7fd fb2c 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007620:	f000 fa56 	bl	8007ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007624:	2360      	movs	r3, #96	; 0x60
 8007626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800762c:	2300      	movs	r3, #0
 800762e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007634:	1d3b      	adds	r3, r7, #4
 8007636:	2200      	movs	r2, #0
 8007638:	4619      	mov	r1, r3
 800763a:	480d      	ldr	r0, [pc, #52]	; (8007670 <MX_TIM2_Init+0xc4>)
 800763c:	f7fc fe64 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007646:	f000 fa43 	bl	8007ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800764a:	1d3b      	adds	r3, r7, #4
 800764c:	220c      	movs	r2, #12
 800764e:	4619      	mov	r1, r3
 8007650:	4807      	ldr	r0, [pc, #28]	; (8007670 <MX_TIM2_Init+0xc4>)
 8007652:	f7fc fe59 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800765c:	f000 fa38 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <MX_TIM2_Init+0xc4>)
 8007662:	f002 fb71 	bl	8009d48 <HAL_TIM_MspPostInit>

}
 8007666:	bf00      	nop
 8007668:	3728      	adds	r7, #40	; 0x28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20002770 	.word	0x20002770

08007674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800767a:	f107 0320 	add.w	r3, r7, #32
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007684:	1d3b      	adds	r3, r7, #4
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	605a      	str	r2, [r3, #4]
 800768c:	609a      	str	r2, [r3, #8]
 800768e:	60da      	str	r2, [r3, #12]
 8007690:	611a      	str	r2, [r3, #16]
 8007692:	615a      	str	r2, [r3, #20]
 8007694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007696:	4b27      	ldr	r3, [pc, #156]	; (8007734 <MX_TIM3_Init+0xc0>)
 8007698:	4a27      	ldr	r2, [pc, #156]	; (8007738 <MX_TIM3_Init+0xc4>)
 800769a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <MX_TIM3_Init+0xc0>)
 800769e:	2200      	movs	r2, #0
 80076a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076aa:	f240 3247 	movw	r2, #839	; 0x347
 80076ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076b0:	4b20      	ldr	r3, [pc, #128]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076b6:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80076bc:	481d      	ldr	r0, [pc, #116]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076be:	f7fc fbe8 	bl	8003e92 <HAL_TIM_PWM_Init>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80076c8:	f000 fa02 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076cc:	2300      	movs	r3, #0
 80076ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80076d4:	f107 0320 	add.w	r3, r7, #32
 80076d8:	4619      	mov	r1, r3
 80076da:	4816      	ldr	r0, [pc, #88]	; (8007734 <MX_TIM3_Init+0xc0>)
 80076dc:	f7fd fac9 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80076e6:	f000 f9f3 	bl	8007ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076ea:	2360      	movs	r3, #96	; 0x60
 80076ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	2208      	movs	r2, #8
 80076fe:	4619      	mov	r1, r3
 8007700:	480c      	ldr	r0, [pc, #48]	; (8007734 <MX_TIM3_Init+0xc0>)
 8007702:	f7fc fe01 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800770c:	f000 f9e0 	bl	8007ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007710:	1d3b      	adds	r3, r7, #4
 8007712:	220c      	movs	r2, #12
 8007714:	4619      	mov	r1, r3
 8007716:	4807      	ldr	r0, [pc, #28]	; (8007734 <MX_TIM3_Init+0xc0>)
 8007718:	f7fc fdf6 	bl	8004308 <HAL_TIM_PWM_ConfigChannel>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8007722:	f000 f9d5 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007726:	4803      	ldr	r0, [pc, #12]	; (8007734 <MX_TIM3_Init+0xc0>)
 8007728:	f002 fb0e 	bl	8009d48 <HAL_TIM_MspPostInit>

}
 800772c:	bf00      	nop
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200024b0 	.word	0x200024b0
 8007738:	40000400 	.word	0x40000400

0800773c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007742:	f107 0308 	add.w	r3, r7, #8
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	609a      	str	r2, [r3, #8]
 800774e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007750:	463b      	mov	r3, r7
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007758:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <MX_TIM4_Init+0x94>)
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <MX_TIM4_Init+0x98>)
 800775c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800775e:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <MX_TIM4_Init+0x94>)
 8007760:	2253      	movs	r2, #83	; 0x53
 8007762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007764:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <MX_TIM4_Init+0x94>)
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800776a:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <MX_TIM4_Init+0x94>)
 800776c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007772:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <MX_TIM4_Init+0x94>)
 8007774:	2200      	movs	r2, #0
 8007776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007778:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <MX_TIM4_Init+0x94>)
 800777a:	2200      	movs	r2, #0
 800777c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800777e:	4814      	ldr	r0, [pc, #80]	; (80077d0 <MX_TIM4_Init+0x94>)
 8007780:	f7fc fb38 	bl	8003df4 <HAL_TIM_Base_Init>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800778a:	f000 f9a1 	bl	8007ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800778e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	4619      	mov	r1, r3
 800779a:	480d      	ldr	r0, [pc, #52]	; (80077d0 <MX_TIM4_Init+0x94>)
 800779c:	f7fc fe7a 	bl	8004494 <HAL_TIM_ConfigClockSource>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80077a6:	f000 f993 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077aa:	2300      	movs	r3, #0
 80077ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80077b2:	463b      	mov	r3, r7
 80077b4:	4619      	mov	r1, r3
 80077b6:	4806      	ldr	r0, [pc, #24]	; (80077d0 <MX_TIM4_Init+0x94>)
 80077b8:	f7fd fa5b 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80077c2:	f000 f985 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80077c6:	bf00      	nop
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20002360 	.word	0x20002360
 80077d4:	40000800 	.word	0x40000800

080077d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b086      	sub	sp, #24
 80077dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077de:	f107 0308 	add.w	r3, r7, #8
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	605a      	str	r2, [r3, #4]
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077ec:	463b      	mov	r3, r7
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80077f4:	4b1d      	ldr	r3, [pc, #116]	; (800786c <MX_TIM5_Init+0x94>)
 80077f6:	4a1e      	ldr	r2, [pc, #120]	; (8007870 <MX_TIM5_Init+0x98>)
 80077f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80077fa:	4b1c      	ldr	r3, [pc, #112]	; (800786c <MX_TIM5_Init+0x94>)
 80077fc:	2253      	movs	r2, #83	; 0x53
 80077fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007800:	4b1a      	ldr	r3, [pc, #104]	; (800786c <MX_TIM5_Init+0x94>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <MX_TIM5_Init+0x94>)
 8007808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800780c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800780e:	4b17      	ldr	r3, [pc, #92]	; (800786c <MX_TIM5_Init+0x94>)
 8007810:	2200      	movs	r2, #0
 8007812:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <MX_TIM5_Init+0x94>)
 8007816:	2200      	movs	r2, #0
 8007818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800781a:	4814      	ldr	r0, [pc, #80]	; (800786c <MX_TIM5_Init+0x94>)
 800781c:	f7fc faea 	bl	8003df4 <HAL_TIM_Base_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8007826:	f000 f953 	bl	8007ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800782a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800782e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007830:	f107 0308 	add.w	r3, r7, #8
 8007834:	4619      	mov	r1, r3
 8007836:	480d      	ldr	r0, [pc, #52]	; (800786c <MX_TIM5_Init+0x94>)
 8007838:	f7fc fe2c 	bl	8004494 <HAL_TIM_ConfigClockSource>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8007842:	f000 f945 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007846:	2300      	movs	r3, #0
 8007848:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800784a:	2300      	movs	r3, #0
 800784c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800784e:	463b      	mov	r3, r7
 8007850:	4619      	mov	r1, r3
 8007852:	4806      	ldr	r0, [pc, #24]	; (800786c <MX_TIM5_Init+0x94>)
 8007854:	f7fd fa0d 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800785e:	f000 f937 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007862:	bf00      	nop
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000246c 	.word	0x2000246c
 8007870:	40000c00 	.word	0x40000c00

08007874 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08c      	sub	sp, #48	; 0x30
 8007878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	2224      	movs	r2, #36	; 0x24
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f002 fd12 	bl	800a2ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007888:	1d3b      	adds	r3, r7, #4
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007890:	4b22      	ldr	r3, [pc, #136]	; (800791c <MX_TIM8_Init+0xa8>)
 8007892:	4a23      	ldr	r2, [pc, #140]	; (8007920 <MX_TIM8_Init+0xac>)
 8007894:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <MX_TIM8_Init+0xa8>)
 8007898:	2200      	movs	r2, #0
 800789a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800789c:	4b1f      	ldr	r3, [pc, #124]	; (800791c <MX_TIM8_Init+0xa8>)
 800789e:	2200      	movs	r2, #0
 80078a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <MX_TIM8_Init+0xa8>)
 80078a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <MX_TIM8_Init+0xa8>)
 80078ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80078b2:	4b1a      	ldr	r3, [pc, #104]	; (800791c <MX_TIM8_Init+0xa8>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078b8:	4b18      	ldr	r3, [pc, #96]	; (800791c <MX_TIM8_Init+0xa8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80078be:	2303      	movs	r3, #3
 80078c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80078c6:	2301      	movs	r3, #1
 80078c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80078d6:	2301      	movs	r3, #1
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80078da:	2300      	movs	r3, #0
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80078e2:	f107 030c 	add.w	r3, r7, #12
 80078e6:	4619      	mov	r1, r3
 80078e8:	480c      	ldr	r0, [pc, #48]	; (800791c <MX_TIM8_Init+0xa8>)
 80078ea:	f7fc fb3b 	bl	8003f64 <HAL_TIM_Encoder_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80078f4:	f000 f8ec 	bl	8007ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078f8:	2300      	movs	r3, #0
 80078fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007900:	1d3b      	adds	r3, r7, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4805      	ldr	r0, [pc, #20]	; (800791c <MX_TIM8_Init+0xa8>)
 8007906:	f7fd f9b4 	bl	8004c72 <HAL_TIMEx_MasterConfigSynchronization>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 8007910:	f000 f8de 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007914:	bf00      	nop
 8007916:	3730      	adds	r7, #48	; 0x30
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20002320 	.word	0x20002320
 8007920:	40010400 	.word	0x40010400

08007924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 800792a:	4a12      	ldr	r2, [pc, #72]	; (8007974 <MX_USART3_UART_Init+0x50>)
 800792c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800792e:	4b10      	ldr	r3, [pc, #64]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 8007930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007936:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800793c:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 800793e:	2200      	movs	r2, #0
 8007940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 8007944:	2200      	movs	r2, #0
 8007946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 800794a:	220c      	movs	r2, #12
 800794c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800794e:	4b08      	ldr	r3, [pc, #32]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 8007950:	2200      	movs	r2, #0
 8007952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007954:	4b06      	ldr	r3, [pc, #24]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 8007956:	2200      	movs	r2, #0
 8007958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800795a:	4805      	ldr	r0, [pc, #20]	; (8007970 <MX_USART3_UART_Init+0x4c>)
 800795c:	f7fd f9e2 	bl	8004d24 <HAL_UART_Init>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007966:	f000 f8b3 	bl	8007ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800796a:	bf00      	nop
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200023a0 	.word	0x200023a0
 8007974:	40004800 	.word	0x40004800

08007978 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800797e:	2300      	movs	r3, #0
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <MX_DMA_Init+0x3c>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	4a0b      	ldr	r2, [pc, #44]	; (80079b4 <MX_DMA_Init+0x3c>)
 8007988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800798c:	6313      	str	r3, [r2, #48]	; 0x30
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <MX_DMA_Init+0x3c>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	203c      	movs	r0, #60	; 0x3c
 80079a0:	f7fa f825 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80079a4:	203c      	movs	r0, #60	; 0x3c
 80079a6:	f7fa f83e 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40023800 	.word	0x40023800

080079b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	609a      	str	r2, [r3, #8]
 80079ca:	60da      	str	r2, [r3, #12]
 80079cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	4b3b      	ldr	r3, [pc, #236]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079d8:	f043 0304 	orr.w	r3, r3, #4
 80079dc:	6313      	str	r3, [r2, #48]	; 0x30
 80079de:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	60bb      	str	r3, [r7, #8]
 80079e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ea:	2300      	movs	r3, #0
 80079ec:	607b      	str	r3, [r7, #4]
 80079ee:	4b34      	ldr	r3, [pc, #208]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	4a33      	ldr	r2, [pc, #204]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	6313      	str	r3, [r2, #48]	; 0x30
 80079fa:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <MX_GPIO_Init+0x108>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a06:	2300      	movs	r3, #0
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <MX_GPIO_Init+0x108>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	4a2c      	ldr	r2, [pc, #176]	; (8007ac0 <MX_GPIO_Init+0x108>)
 8007a10:	f043 0302 	orr.w	r3, r3, #2
 8007a14:	6313      	str	r3, [r2, #48]	; 0x30
 8007a16:	4b2a      	ldr	r3, [pc, #168]	; (8007ac0 <MX_GPIO_Init+0x108>)
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_SL_Pin|LED_FL_Pin|IN_L2_Pin|LED2_Pin 
 8007a22:	2200      	movs	r2, #0
 8007a24:	f641 018c 	movw	r1, #6284	; 0x188c
 8007a28:	4826      	ldr	r0, [pc, #152]	; (8007ac4 <MX_GPIO_Init+0x10c>)
 8007a2a:	f7fb f86b 	bl	8002b04 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN_L1_GPIO_Port, IN_L1_Pin, GPIO_PIN_RESET);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2110      	movs	r1, #16
 8007a32:	4825      	ldr	r0, [pc, #148]	; (8007ac8 <MX_GPIO_Init+0x110>)
 8007a34:	f7fb f866 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN_R1_Pin|IN_R2_Pin|LED1_Pin|LED6_Pin 
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f24b 31b8 	movw	r1, #46008	; 0xb3b8
 8007a3e:	4823      	ldr	r0, [pc, #140]	; (8007acc <MX_GPIO_Init+0x114>)
 8007a40:	f7fb f860 	bl	8002b04 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED4_Pin|GYRO_SS_Pin|LED_FR_Pin 
                          |LED_SR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8007a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	4619      	mov	r1, r3
 8007a58:	481b      	ldr	r0, [pc, #108]	; (8007ac8 <MX_GPIO_Init+0x110>)
 8007a5a:	f7fa feb9 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SL_Pin LED_FL_Pin IN_L2_Pin LED2_Pin 
                           LED3_Pin */
  GPIO_InitStruct.Pin = LED_SL_Pin|LED_FL_Pin|IN_L2_Pin|LED2_Pin 
 8007a5e:	f641 038c 	movw	r3, #6284	; 0x188c
 8007a62:	60fb      	str	r3, [r7, #12]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a64:	2301      	movs	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4619      	mov	r1, r3
 8007a76:	4813      	ldr	r0, [pc, #76]	; (8007ac4 <MX_GPIO_Init+0x10c>)
 8007a78:	f7fa feaa 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_L1_Pin */
  GPIO_InitStruct.Pin = IN_L1_Pin;
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a80:	2301      	movs	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_L1_GPIO_Port, &GPIO_InitStruct);
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4619      	mov	r1, r3
 8007a92:	480d      	ldr	r0, [pc, #52]	; (8007ac8 <MX_GPIO_Init+0x110>)
 8007a94:	f7fa fe9c 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_R1_Pin IN_R2_Pin LED1_Pin LED6_Pin 
                           LED5_Pin LED4_Pin GYRO_SS_Pin LED_FR_Pin 
                           LED_SR_Pin */
  GPIO_InitStruct.Pin = IN_R1_Pin|IN_R2_Pin|LED1_Pin|LED6_Pin 
 8007a98:	f24b 33b8 	movw	r3, #46008	; 0xb3b8
 8007a9c:	60fb      	str	r3, [r7, #12]
                          |LED5_Pin|LED4_Pin|GYRO_SS_Pin|LED_FR_Pin 
                          |LED_SR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4806      	ldr	r0, [pc, #24]	; (8007acc <MX_GPIO_Init+0x114>)
 8007ab2:	f7fa fe8d 	bl	80027d0 <HAL_GPIO_Init>

}
 8007ab6:	bf00      	nop
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40020000 	.word	0x40020000
 8007ac8:	40020800 	.word	0x40020800
 8007acc:	40020400 	.word	0x40020400

08007ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	while(1){
 8007ad4:	e7fe      	b.n	8007ad4 <Error_Handler+0x4>
	...

08007ad8 <Mode_Select>:
 */

#include "global.h"


void Mode_Select(int16_t mode){
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	4603      	mov	r3, r0
 8007ae0:	80fb      	strh	r3, [r7, #6]


	printf("Mode %d Start!\r\n", mode);
 8007ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4862      	ldr	r0, [pc, #392]	; (8007c74 <Mode_Select+0x19c>)
 8007aea:	f003 f843 	bl	800ab74 <iprintf>

	LED_Light1();
 8007aee:	f7ff fa63 	bl	8006fb8 <LED_Light1>

// 2019/8/22

	Set_Search_Params(&trans_params, 450.0f, 2000.0f); //velocity ・ acceleration
 8007af2:	eddf 0a61 	vldr	s1, [pc, #388]	; 8007c78 <Mode_Select+0x1a0>
 8007af6:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8007c7c <Mode_Select+0x1a4>
 8007afa:	4861      	ldr	r0, [pc, #388]	; (8007c80 <Mode_Select+0x1a8>)
 8007afc:	f7fd fc65 	bl	80053ca <Set_Search_Params>
	Set_Search_Params(&rot_params, 450.0f, 5500.0f);//angular velocity ・ angular acceleration
 8007b00:	eddf 0a60 	vldr	s1, [pc, #384]	; 8007c84 <Mode_Select+0x1ac>
 8007b04:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8007c7c <Mode_Select+0x1a4>
 8007b08:	485f      	ldr	r0, [pc, #380]	; (8007c88 <Mode_Select+0x1b0>)
 8007b0a:	f7fd fc5e 	bl	80053ca <Set_Search_Params>
	Set_Slalom_Params(&slalom, 6000.0f, 450.0f, 13.5f, 13.5f); // 4600 450 20 20
 8007b0e:	eef2 1a0b 	vmov.f32	s3, #43	; 0x41580000  13.5
 8007b12:	eeb2 1a0b 	vmov.f32	s2, #43	; 0x41580000  13.5
 8007b16:	eddf 0a59 	vldr	s1, [pc, #356]	; 8007c7c <Mode_Select+0x1a4>
 8007b1a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8007c8c <Mode_Select+0x1b4>
 8007b1e:	485c      	ldr	r0, [pc, #368]	; (8007c90 <Mode_Select+0x1b8>)
 8007b20:	f7fe f938 	bl	8005d94 <Set_Slalom_Params>

	Set_Search_Params(&trans_params_known, 1000.0f, 3800.0f); //velocity ・ acceleration
 8007b24:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8007c94 <Mode_Select+0x1bc>
 8007b28:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8007c98 <Mode_Select+0x1c0>
 8007b2c:	485b      	ldr	r0, [pc, #364]	; (8007c9c <Mode_Select+0x1c4>)
 8007b2e:	f7fd fc4c 	bl	80053ca <Set_Search_Params>

/*
 	Set_Search_Params(&rot_params, 400.0f, 5500.0f);//angular velocity ・ angular acceleration
	Set_Slalom_Params(&slalom, 4200.0f, 400.0f, 14.0f, 14.0f); // 4600 450 20 20
*/
	Set_PID_Params(&trans_gain, 1.8f, 30.0f, 0.0f); //1.7f, 36.0f->10.0f, 0.0f
 8007b32:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8007ca0 <Mode_Select+0x1c8>
 8007b36:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8007b3a:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8007ca4 <Mode_Select+0x1cc>
 8007b3e:	485a      	ldr	r0, [pc, #360]	; (8007ca8 <Mode_Select+0x1d0>)
 8007b40:	f7fd fc2a 	bl	8005398 <Set_PID_Params>
	Set_PID_Params(&rot_gain, 5.00f, 65.0f,0.35f);	//φ24.5のとき0.47f, 36.0f,0.0f
 8007b44:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8007cac <Mode_Select+0x1d4>
 8007b48:	eddf 0a59 	vldr	s1, [pc, #356]	; 8007cb0 <Mode_Select+0x1d8>
 8007b4c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8007b50:	4858      	ldr	r0, [pc, #352]	; (8007cb4 <Mode_Select+0x1dc>)
 8007b52:	f7fd fc21 	bl	8005398 <Set_PID_Params>

	Set_PID_Params(&sensor_gain, 0.13f, 0.0f,0.0f);	//壁制御 0.007
 8007b56:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8007ca0 <Mode_Select+0x1c8>
 8007b5a:	eddf 0a51 	vldr	s1, [pc, #324]	; 8007ca0 <Mode_Select+0x1c8>
 8007b5e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8007cb8 <Mode_Select+0x1e0>
 8007b62:	4856      	ldr	r0, [pc, #344]	; (8007cbc <Mode_Select+0x1e4>)
 8007b64:	f7fd fc18 	bl	8005398 <Set_PID_Params>

	//壁判断閾値
	Set_Threshold(&threshold,120, 100, 100, 120);			//FL,SL,SR,FR 28,41,38,28
 8007b68:	2378      	movs	r3, #120	; 0x78
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2364      	movs	r3, #100	; 0x64
 8007b6e:	2264      	movs	r2, #100	; 0x64
 8007b70:	2178      	movs	r1, #120	; 0x78
 8007b72:	4853      	ldr	r0, [pc, #332]	; (8007cc0 <Mode_Select+0x1e8>)
 8007b74:	f001 fdcc 	bl	8009710 <Set_Threshold>

	//壁制御閾値->右にずれたら左の閾値をあげる
	Set_Threshold(&control_threshold,200,350,200,250);			//FL,SL,SR,FR 220,300,250,250
 8007b78:	23fa      	movs	r3, #250	; 0xfa
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	23c8      	movs	r3, #200	; 0xc8
 8007b7e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007b82:	21c8      	movs	r1, #200	; 0xc8
 8007b84:	484f      	ldr	r0, [pc, #316]	; (8007cc4 <Mode_Select+0x1ec>)
 8007b86:	f001 fdc3 	bl	8009710 <Set_Threshold>


	HAL_Delay(500);
 8007b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b8e:	f7f9 f9fd 	bl	8000f8c <HAL_Delay>
	IMU_Init();
 8007b92:	f7fe fdd9 	bl	8006748 <IMU_Init>
	ICM20602_Init();
 8007b96:	f7fe fe79 	bl	800688c <ICM20602_Init>

	switch(mode){
 8007b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b9e:	2b07      	cmp	r3, #7
 8007ba0:	d861      	bhi.n	8007c66 <Mode_Select+0x18e>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <Mode_Select+0xd0>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bc9 	.word	0x08007bc9
 8007bac:	08007be1 	.word	0x08007be1
 8007bb0:	08007bf9 	.word	0x08007bf9
 8007bb4:	08007c11 	.word	0x08007c11
 8007bb8:	08007c4f 	.word	0x08007c4f
 8007bbc:	08007c55 	.word	0x08007c55
 8007bc0:	08007c5b 	.word	0x08007c5b
 8007bc4:	08007c61 	.word	0x08007c61
	case 0:

		gyro_calib_flag = 1;
 8007bc8:	4b3f      	ldr	r3, [pc, #252]	; (8007cc8 <Mode_Select+0x1f0>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
		   while(gyro_calib_flag){
 8007bce:	bf00      	nop
 8007bd0:	4b3d      	ldr	r3, [pc, #244]	; (8007cc8 <Mode_Select+0x1f0>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1fa      	bne.n	8007bd0 <Mode_Select+0xf8>
		   }

		Mode_Zero();
 8007bda:	f000 f881 	bl	8007ce0 <Mode_Zero>
		break;
 8007bde:	e045      	b.n	8007c6c <Mode_Select+0x194>

	case 1:
		gyro_calib_flag = 1;
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <Mode_Select+0x1f0>)
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
		   while(gyro_calib_flag){
 8007be6:	bf00      	nop
 8007be8:	4b37      	ldr	r3, [pc, #220]	; (8007cc8 <Mode_Select+0x1f0>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1fa      	bne.n	8007be8 <Mode_Select+0x110>
		   }

		Mode_One();
 8007bf2:	f000 f8ef 	bl	8007dd4 <Mode_One>
		break;
 8007bf6:	e039      	b.n	8007c6c <Mode_Select+0x194>
	case 2:
		gyro_calib_flag = 1;
 8007bf8:	4b33      	ldr	r3, [pc, #204]	; (8007cc8 <Mode_Select+0x1f0>)
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	701a      	strb	r2, [r3, #0]
		   while(gyro_calib_flag){
 8007bfe:	bf00      	nop
 8007c00:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <Mode_Select+0x1f0>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1fa      	bne.n	8007c00 <Mode_Select+0x128>
		   }

		Mode_Two();
 8007c0a:	f000 f977 	bl	8007efc <Mode_Two>
		break;
 8007c0e:	e02d      	b.n	8007c6c <Mode_Select+0x194>

	case 3:
		Set_Search_Params(&trans_params, 600.0f, 1500.0f); //velocity ・ acceleration
 8007c10:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007ccc <Mode_Select+0x1f4>
 8007c14:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8007cd0 <Mode_Select+0x1f8>
 8007c18:	4819      	ldr	r0, [pc, #100]	; (8007c80 <Mode_Select+0x1a8>)
 8007c1a:	f7fd fbd6 	bl	80053ca <Set_Search_Params>
		Set_Search_Params(&rot_params, 600.0f, 5500.0f);//angular velocity ・ angular acceleration
 8007c1e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8007c84 <Mode_Select+0x1ac>
 8007c22:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8007cd0 <Mode_Select+0x1f8>
 8007c26:	4818      	ldr	r0, [pc, #96]	; (8007c88 <Mode_Select+0x1b0>)
 8007c28:	f7fd fbcf 	bl	80053ca <Set_Search_Params>
		Set_Slalom_Params(&slalom, 4200.0f, 500.0f, 19.5f, 19.5f); // 4600 450 20 20
 8007c2c:	eddf 1a29 	vldr	s3, [pc, #164]	; 8007cd4 <Mode_Select+0x1fc>
 8007c30:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8007cd4 <Mode_Select+0x1fc>
 8007c34:	eddf 0a28 	vldr	s1, [pc, #160]	; 8007cd8 <Mode_Select+0x200>
 8007c38:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8007cdc <Mode_Select+0x204>
 8007c3c:	4814      	ldr	r0, [pc, #80]	; (8007c90 <Mode_Select+0x1b8>)
 8007c3e:	f7fe f8a9 	bl	8005d94 <Set_Slalom_Params>

		gyro_calib_flag = 1;
 8007c42:	4b21      	ldr	r3, [pc, #132]	; (8007cc8 <Mode_Select+0x1f0>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]

		while(1){
		Mode_Three();
 8007c48:	f000 f9f8 	bl	800803c <Mode_Three>
 8007c4c:	e7fc      	b.n	8007c48 <Mode_Select+0x170>
		}
		break;
	case 4:
		Mode_Four();
 8007c4e:	f000 fa95 	bl	800817c <Mode_Four>
		break;
 8007c52:	e00b      	b.n	8007c6c <Mode_Select+0x194>
	case 5:
		Mode_Five();
 8007c54:	f000 fd74 	bl	8008740 <Mode_Five>
		break;
 8007c58:	e008      	b.n	8007c6c <Mode_Select+0x194>
	case 6:
		Mode_Six();
 8007c5a:	f000 fd7d 	bl	8008758 <Mode_Six>
		break;
 8007c5e:	e005      	b.n	8007c6c <Mode_Select+0x194>

	case 7:
		Mode_Seven();
 8007c60:	f000 fd81 	bl	8008766 <Mode_Seven>
		break;
 8007c64:	e002      	b.n	8007c6c <Mode_Select+0x194>
	default:
		Mode_Default();
 8007c66:	f000 fd85 	bl	8008774 <Mode_Default>
		break;
 8007c6a:	bf00      	nop
	}
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	0800cc0c 	.word	0x0800cc0c
 8007c78:	44fa0000 	.word	0x44fa0000
 8007c7c:	43e10000 	.word	0x43e10000
 8007c80:	20002578 	.word	0x20002578
 8007c84:	45abe000 	.word	0x45abe000
 8007c88:	200027b4 	.word	0x200027b4
 8007c8c:	45bb8000 	.word	0x45bb8000
 8007c90:	20002748 	.word	0x20002748
 8007c94:	456d8000 	.word	0x456d8000
 8007c98:	447a0000 	.word	0x447a0000
 8007c9c:	200029d0 	.word	0x200029d0
 8007ca0:	00000000 	.word	0x00000000
 8007ca4:	3fe66666 	.word	0x3fe66666
 8007ca8:	2000243c 	.word	0x2000243c
 8007cac:	3eb33333 	.word	0x3eb33333
 8007cb0:	42820000 	.word	0x42820000
 8007cb4:	2000244c 	.word	0x2000244c
 8007cb8:	3e051eb8 	.word	0x3e051eb8
 8007cbc:	200026e8 	.word	0x200026e8
 8007cc0:	2000230c 	.word	0x2000230c
 8007cc4:	200026d4 	.word	0x200026d4
 8007cc8:	20002448 	.word	0x20002448
 8007ccc:	44bb8000 	.word	0x44bb8000
 8007cd0:	44160000 	.word	0x44160000
 8007cd4:	419c0000 	.word	0x419c0000
 8007cd8:	43fa0000 	.word	0x43fa0000
 8007cdc:	45834000 	.word	0x45834000

08007ce0 <Mode_Zero>:

void Mode_Zero(){
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
	printf("\nMODE0 First Search MODE\n\r");
 8007ce6:	4832      	ldr	r0, [pc, #200]	; (8007db0 <Mode_Zero+0xd0>)
 8007ce8:	f002 ff44 	bl	800ab74 <iprintf>

	//----一次探索スラローム走行----
	MF.FLAG.WALL_CTRL = 1;
 8007cec:	4a31      	ldr	r2, [pc, #196]	; (8007db4 <Mode_Zero+0xd4>)
 8007cee:	8813      	ldrh	r3, [r2, #0]
 8007cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf4:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SCND = 0;
 8007cf6:	4a2f      	ldr	r2, [pc, #188]	; (8007db4 <Mode_Zero+0xd4>)
 8007cf8:	8813      	ldrh	r3, [r2, #0]
 8007cfa:	f36f 0341 	bfc	r3, #1, #1
 8007cfe:	8013      	strh	r3, [r2, #0]
	goal_x = GOAL_X;
 8007d00:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <Mode_Zero+0xd8>)
 8007d02:	2207      	movs	r2, #7
 8007d04:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 8007d06:	4b2d      	ldr	r3, [pc, #180]	; (8007dbc <Mode_Zero+0xdc>)
 8007d08:	2207      	movs	r2, #7
 8007d0a:	701a      	strb	r2, [r3, #0]
	adc_case = 0;
 8007d0c:	4b2c      	ldr	r3, [pc, #176]	; (8007dc0 <Mode_Zero+0xe0>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
	ADC_Start();
 8007d12:	f001 fbe3 	bl	80094dc <ADC_Start>

	//----基準値を取る----
	while(adc_case<=2){
 8007d16:	bf00      	nop
 8007d18:	4b29      	ldr	r3, [pc, #164]	; (8007dc0 <Mode_Zero+0xe0>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	ddfa      	ble.n	8007d18 <Mode_Zero+0x38>
	}

	get_base_info();
 8007d22:	f001 fcdb 	bl	80096dc <get_base_info>

	while(sensor_data.frontL < 120 || sensor_data.frontR< 120){
 8007d26:	bf00      	nop
 8007d28:	4b26      	ldr	r3, [pc, #152]	; (8007dc4 <Mode_Zero+0xe4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b77      	cmp	r3, #119	; 0x77
 8007d2e:	d9fb      	bls.n	8007d28 <Mode_Zero+0x48>
 8007d30:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <Mode_Zero+0xe4>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b77      	cmp	r3, #119	; 0x77
 8007d36:	d9f7      	bls.n	8007d28 <Mode_Zero+0x48>
	}

	for(uint8_t i=0; i<3; i++){
 8007d38:	2300      	movs	r3, #0
 8007d3a:	71fb      	strb	r3, [r7, #7]
 8007d3c:	e012      	b.n	8007d64 <Mode_Zero+0x84>
		Back_LED_Light(1,0,1);
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2100      	movs	r1, #0
 8007d42:	2001      	movs	r0, #1
 8007d44:	f7ff f8e0 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007d48:	2096      	movs	r0, #150	; 0x96
 8007d4a:	f7f9 f91f 	bl	8000f8c <HAL_Delay>
		Back_LED_Light(0,0,0);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7ff f8d8 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007d58:	2096      	movs	r0, #150	; 0x96
 8007d5a:	f7f9 f917 	bl	8000f8c <HAL_Delay>
	for(uint8_t i=0; i<3; i++){
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	3301      	adds	r3, #1
 8007d62:	71fb      	strb	r3, [r7, #7]
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d9e9      	bls.n	8007d3e <Mode_Zero+0x5e>
	}

	MF.FLAG.MT_CTRL = 1;
 8007d6a:	4a12      	ldr	r2, [pc, #72]	; (8007db4 <Mode_Zero+0xd4>)
 8007d6c:	8813      	ldrh	r3, [r2, #0]
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	8013      	strh	r3, [r2, #0]

	Buzzer_Scale(1000, 100);
 8007d74:	2164      	movs	r1, #100	; 0x64
 8007d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d7a:	f002 fa0d 	bl	800a198 <Buzzer_Scale>
	Maze_Search_Slalom(&trans_params, &trans_params_known, &rot_params);
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <Mode_Zero+0xe8>)
 8007d80:	4912      	ldr	r1, [pc, #72]	; (8007dcc <Mode_Zero+0xec>)
 8007d82:	4813      	ldr	r0, [pc, #76]	; (8007dd0 <Mode_Zero+0xf0>)
 8007d84:	f000 fd5c 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 8007d88:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <Mode_Zero+0xd4>)
 8007d8a:	8813      	ldrh	r3, [r2, #0]
 8007d8c:	f36f 0300 	bfc	r3, #0, #1
 8007d90:	8013      	strh	r3, [r2, #0]

	Motor_Drive_Stop();
 8007d92:	f7fe faa1 	bl	80062d8 <Motor_Drive_Stop>
	HAL_Delay(2000);
 8007d96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007d9a:	f7f9 f8f7 	bl	8000f8c <HAL_Delay>
	Buzzer_PWM_OUT( 99, 1000 );
 8007d9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007da2:	2063      	movs	r0, #99	; 0x63
 8007da4:	f002 f9bc 	bl	800a120 <Buzzer_PWM_OUT>
	goal_x = GOAL_X;
	goal_y = GOAL_Y;

	Motor_Drive_Stop();
	*/
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	0800cc20 	.word	0x0800cc20
 8007db4:	200029dc 	.word	0x200029dc
 8007db8:	2000265c 	.word	0x2000265c
 8007dbc:	20002564 	.word	0x20002564
 8007dc0:	20002584 	.word	0x20002584
 8007dc4:	20000238 	.word	0x20000238
 8007dc8:	200027b4 	.word	0x200027b4
 8007dcc:	200029d0 	.word	0x200029d0
 8007dd0:	20002578 	.word	0x20002578

08007dd4 <Mode_One>:

void Mode_One(){
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
	printf("\nMODE0 First Search MODE\n\r");
 8007dda:	483f      	ldr	r0, [pc, #252]	; (8007ed8 <Mode_One+0x104>)
 8007ddc:	f002 feca 	bl	800ab74 <iprintf>

	//----一次探索スラローム走行----
	MF.FLAG.WALL_CTRL = 0;
 8007de0:	4a3e      	ldr	r2, [pc, #248]	; (8007edc <Mode_One+0x108>)
 8007de2:	8813      	ldrh	r3, [r2, #0]
 8007de4:	f36f 13c7 	bfc	r3, #7, #1
 8007de8:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SCND = 0;
 8007dea:	4a3c      	ldr	r2, [pc, #240]	; (8007edc <Mode_One+0x108>)
 8007dec:	8813      	ldrh	r3, [r2, #0]
 8007dee:	f36f 0341 	bfc	r3, #1, #1
 8007df2:	8013      	strh	r3, [r2, #0]
	goal_x = GOAL_X;
 8007df4:	4b3a      	ldr	r3, [pc, #232]	; (8007ee0 <Mode_One+0x10c>)
 8007df6:	2207      	movs	r2, #7
 8007df8:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 8007dfa:	4b3a      	ldr	r3, [pc, #232]	; (8007ee4 <Mode_One+0x110>)
 8007dfc:	2207      	movs	r2, #7
 8007dfe:	701a      	strb	r2, [r3, #0]
	adc_case = 0;
 8007e00:	4b39      	ldr	r3, [pc, #228]	; (8007ee8 <Mode_One+0x114>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
	ADC_Start();
 8007e06:	f001 fb69 	bl	80094dc <ADC_Start>

	//----基準値を取る----
	while(adc_case<=2){
 8007e0a:	bf00      	nop
 8007e0c:	4b36      	ldr	r3, [pc, #216]	; (8007ee8 <Mode_One+0x114>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	b25b      	sxtb	r3, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	ddfa      	ble.n	8007e0c <Mode_One+0x38>
	}

	get_base_info();
 8007e16:	f001 fc61 	bl	80096dc <get_base_info>

	while(sensor_data.frontL < 120 || sensor_data.frontR< 120){
 8007e1a:	bf00      	nop
 8007e1c:	4b33      	ldr	r3, [pc, #204]	; (8007eec <Mode_One+0x118>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b77      	cmp	r3, #119	; 0x77
 8007e22:	d9fb      	bls.n	8007e1c <Mode_One+0x48>
 8007e24:	4b31      	ldr	r3, [pc, #196]	; (8007eec <Mode_One+0x118>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b77      	cmp	r3, #119	; 0x77
 8007e2a:	d9f7      	bls.n	8007e1c <Mode_One+0x48>
	}

	for(uint8_t i=0; i<3; i++){
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	e012      	b.n	8007e58 <Mode_One+0x84>
		Back_LED_Light(1,0,1);
 8007e32:	2201      	movs	r2, #1
 8007e34:	2100      	movs	r1, #0
 8007e36:	2001      	movs	r0, #1
 8007e38:	f7ff f866 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007e3c:	2096      	movs	r0, #150	; 0x96
 8007e3e:	f7f9 f8a5 	bl	8000f8c <HAL_Delay>
		Back_LED_Light(0,0,0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	2000      	movs	r0, #0
 8007e48:	f7ff f85e 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007e4c:	2096      	movs	r0, #150	; 0x96
 8007e4e:	f7f9 f89d 	bl	8000f8c <HAL_Delay>
	for(uint8_t i=0; i<3; i++){
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	3301      	adds	r3, #1
 8007e56:	71fb      	strb	r3, [r7, #7]
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d9e9      	bls.n	8007e32 <Mode_One+0x5e>
	}

	MF.FLAG.MT_CTRL = 1;
 8007e5e:	4a1f      	ldr	r2, [pc, #124]	; (8007edc <Mode_One+0x108>)
 8007e60:	8813      	ldrh	r3, [r2, #0]
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	8013      	strh	r3, [r2, #0]

	Buzzer_Scale(1000, 100);
 8007e68:	2164      	movs	r1, #100	; 0x64
 8007e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e6e:	f002 f993 	bl	800a198 <Buzzer_Scale>
	Maze_Search_Slalom(&trans_params, &trans_params_known, &rot_params);
 8007e72:	4a1f      	ldr	r2, [pc, #124]	; (8007ef0 <Mode_One+0x11c>)
 8007e74:	491f      	ldr	r1, [pc, #124]	; (8007ef4 <Mode_One+0x120>)
 8007e76:	4820      	ldr	r0, [pc, #128]	; (8007ef8 <Mode_One+0x124>)
 8007e78:	f000 fce2 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <Mode_One+0x108>)
 8007e7e:	8813      	ldrh	r3, [r2, #0]
 8007e80:	f36f 0300 	bfc	r3, #0, #1
 8007e84:	8013      	strh	r3, [r2, #0]

	Motor_Drive_Stop();
 8007e86:	f7fe fa27 	bl	80062d8 <Motor_Drive_Stop>
	HAL_Delay(2000);
 8007e8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007e8e:	f7f9 f87d 	bl	8000f8c <HAL_Delay>

//	Log_Shower();

	goal_x = goal_y = 0;
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <Mode_One+0x110>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <Mode_One+0x110>)
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <Mode_One+0x10c>)
 8007e9e:	701a      	strb	r2, [r3, #0]

	MF.FLAG.MT_CTRL = 1;
 8007ea0:	4a0e      	ldr	r2, [pc, #56]	; (8007edc <Mode_One+0x108>)
 8007ea2:	8813      	ldrh	r3, [r2, #0]
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	8013      	strh	r3, [r2, #0]
	Maze_Search_Slalom(&trans_params,&trans_params_known,&rot_params);
 8007eaa:	4a11      	ldr	r2, [pc, #68]	; (8007ef0 <Mode_One+0x11c>)
 8007eac:	4911      	ldr	r1, [pc, #68]	; (8007ef4 <Mode_One+0x120>)
 8007eae:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <Mode_One+0x124>)
 8007eb0:	f000 fcc6 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <Mode_One+0x108>)
 8007eb6:	8813      	ldrh	r3, [r2, #0]
 8007eb8:	f36f 0300 	bfc	r3, #0, #1
 8007ebc:	8013      	strh	r3, [r2, #0]


	goal_x = GOAL_X;
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <Mode_One+0x10c>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <Mode_One+0x110>)
 8007ec6:	2207      	movs	r2, #7
 8007ec8:	701a      	strb	r2, [r3, #0]

	Motor_Drive_Stop();
 8007eca:	f7fe fa05 	bl	80062d8 <Motor_Drive_Stop>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	0800cc20 	.word	0x0800cc20
 8007edc:	200029dc 	.word	0x200029dc
 8007ee0:	2000265c 	.word	0x2000265c
 8007ee4:	20002564 	.word	0x20002564
 8007ee8:	20002584 	.word	0x20002584
 8007eec:	20000238 	.word	0x20000238
 8007ef0:	200027b4 	.word	0x200027b4
 8007ef4:	200029d0 	.word	0x200029d0
 8007ef8:	20002578 	.word	0x20002578

08007efc <Mode_Two>:


void Mode_Two(){
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
	//conf_route getwallinfo writemapとか全部消す
	printf("\nMODE1 Second Search MODE\n\r");
 8007f02:	4843      	ldr	r0, [pc, #268]	; (8008010 <Mode_Two+0x114>)
 8007f04:	f002 fe36 	bl	800ab74 <iprintf>


	//----一次探索スラローム走行----
	MF.FLAG.WALL_CTRL = 1;
 8007f08:	4a42      	ldr	r2, [pc, #264]	; (8008014 <Mode_Two+0x118>)
 8007f0a:	8813      	ldrh	r3, [r2, #0]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	8013      	strh	r3, [r2, #0]

	MF.FLAG.SCND = 1;
 8007f12:	4a40      	ldr	r2, [pc, #256]	; (8008014 <Mode_Two+0x118>)
 8007f14:	8813      	ldrh	r3, [r2, #0]
 8007f16:	f043 0302 	orr.w	r3, r3, #2
 8007f1a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.KNOWN = 0;
 8007f1c:	4a3d      	ldr	r2, [pc, #244]	; (8008014 <Mode_Two+0x118>)
 8007f1e:	8813      	ldrh	r3, [r2, #0]
 8007f20:	f36f 1345 	bfc	r3, #5, #1
 8007f24:	8013      	strh	r3, [r2, #0]
	Set_Search_Params(&trans_params, 400.0f, 2500.0f); //velocity ・ acceleration
 8007f26:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8008018 <Mode_Two+0x11c>
 8007f2a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800801c <Mode_Two+0x120>
 8007f2e:	483c      	ldr	r0, [pc, #240]	; (8008020 <Mode_Two+0x124>)
 8007f30:	f7fd fa4b 	bl	80053ca <Set_Search_Params>

	goal_x = GOAL_X;
 8007f34:	4b3b      	ldr	r3, [pc, #236]	; (8008024 <Mode_Two+0x128>)
 8007f36:	2207      	movs	r2, #7
 8007f38:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 8007f3a:	4b3b      	ldr	r3, [pc, #236]	; (8008028 <Mode_Two+0x12c>)
 8007f3c:	2207      	movs	r2, #7
 8007f3e:	701a      	strb	r2, [r3, #0]
	adc_case = 0;
 8007f40:	4b3a      	ldr	r3, [pc, #232]	; (800802c <Mode_Two+0x130>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
	ADC_Start();
 8007f46:	f001 fac9 	bl	80094dc <ADC_Start>


	//----基準値を取る----
	while(adc_case<=2){
 8007f4a:	bf00      	nop
 8007f4c:	4b37      	ldr	r3, [pc, #220]	; (800802c <Mode_Two+0x130>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	ddfa      	ble.n	8007f4c <Mode_Two+0x50>
	}

	get_base_info();
 8007f56:	f001 fbc1 	bl	80096dc <get_base_info>


	while(sensor_data.frontL < 300 || sensor_data.frontR< 300){
 8007f5a:	bf00      	nop
 8007f5c:	4b34      	ldr	r3, [pc, #208]	; (8008030 <Mode_Two+0x134>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007f64:	d3fa      	bcc.n	8007f5c <Mode_Two+0x60>
 8007f66:	4b32      	ldr	r3, [pc, #200]	; (8008030 <Mode_Two+0x134>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007f6e:	d3f5      	bcc.n	8007f5c <Mode_Two+0x60>
	}

	for(uint8_t i=0; i<3; i++){
 8007f70:	2300      	movs	r3, #0
 8007f72:	71fb      	strb	r3, [r7, #7]
 8007f74:	e012      	b.n	8007f9c <Mode_Two+0xa0>
		Back_LED_Light(1,0,1);
 8007f76:	2201      	movs	r2, #1
 8007f78:	2100      	movs	r1, #0
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	f7fe ffc4 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007f80:	2096      	movs	r0, #150	; 0x96
 8007f82:	f7f9 f803 	bl	8000f8c <HAL_Delay>
		Back_LED_Light(0,0,0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f7fe ffbc 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 8007f90:	2096      	movs	r0, #150	; 0x96
 8007f92:	f7f8 fffb 	bl	8000f8c <HAL_Delay>
	for(uint8_t i=0; i<3; i++){
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d9e9      	bls.n	8007f76 <Mode_Two+0x7a>
	}


	MF.FLAG.MT_CTRL = 1;
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <Mode_Two+0x118>)
 8007fa4:	8813      	ldrh	r3, [r2, #0]
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	8013      	strh	r3, [r2, #0]
	Maze_Search_Slalom(&trans_params, &trans_params_known, &rot_params);
 8007fac:	4a21      	ldr	r2, [pc, #132]	; (8008034 <Mode_Two+0x138>)
 8007fae:	4922      	ldr	r1, [pc, #136]	; (8008038 <Mode_Two+0x13c>)
 8007fb0:	481b      	ldr	r0, [pc, #108]	; (8008020 <Mode_Two+0x124>)
 8007fb2:	f000 fc45 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 8007fb6:	4a17      	ldr	r2, [pc, #92]	; (8008014 <Mode_Two+0x118>)
 8007fb8:	8813      	ldrh	r3, [r2, #0]
 8007fba:	f36f 0300 	bfc	r3, #0, #1
 8007fbe:	8013      	strh	r3, [r2, #0]

	Motor_Drive_Stop();
 8007fc0:	f7fe f98a 	bl	80062d8 <Motor_Drive_Stop>
	HAL_Delay(2000);
 8007fc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007fc8:	f7f8 ffe0 	bl	8000f8c <HAL_Delay>

	goal_x = goal_y = 0;
 8007fcc:	4b16      	ldr	r3, [pc, #88]	; (8008028 <Mode_Two+0x12c>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <Mode_Two+0x12c>)
 8007fd4:	781a      	ldrb	r2, [r3, #0]
 8007fd6:	4b13      	ldr	r3, [pc, #76]	; (8008024 <Mode_Two+0x128>)
 8007fd8:	701a      	strb	r2, [r3, #0]

	MF.FLAG.MT_CTRL = 1;
 8007fda:	4a0e      	ldr	r2, [pc, #56]	; (8008014 <Mode_Two+0x118>)
 8007fdc:	8813      	ldrh	r3, [r2, #0]
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	8013      	strh	r3, [r2, #0]
	Maze_Search_Slalom(&trans_params,&trans_params_known,&rot_params);
 8007fe4:	4a13      	ldr	r2, [pc, #76]	; (8008034 <Mode_Two+0x138>)
 8007fe6:	4914      	ldr	r1, [pc, #80]	; (8008038 <Mode_Two+0x13c>)
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <Mode_Two+0x124>)
 8007fea:	f000 fc29 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 8007fee:	4a09      	ldr	r2, [pc, #36]	; (8008014 <Mode_Two+0x118>)
 8007ff0:	8813      	ldrh	r3, [r2, #0]
 8007ff2:	f36f 0300 	bfc	r3, #0, #1
 8007ff6:	8013      	strh	r3, [r2, #0]


	goal_x = GOAL_X;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <Mode_Two+0x128>)
 8007ffa:	2207      	movs	r2, #7
 8007ffc:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 8007ffe:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <Mode_Two+0x12c>)
 8008000:	2207      	movs	r2, #7
 8008002:	701a      	strb	r2, [r3, #0]

	Motor_Drive_Stop();
 8008004:	f7fe f968 	bl	80062d8 <Motor_Drive_Stop>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	0800cc3c 	.word	0x0800cc3c
 8008014:	200029dc 	.word	0x200029dc
 8008018:	451c4000 	.word	0x451c4000
 800801c:	43c80000 	.word	0x43c80000
 8008020:	20002578 	.word	0x20002578
 8008024:	2000265c 	.word	0x2000265c
 8008028:	20002564 	.word	0x20002564
 800802c:	20002584 	.word	0x20002584
 8008030:	20000238 	.word	0x20000238
 8008034:	200027b4 	.word	0x200027b4
 8008038:	200029d0 	.word	0x200029d0

0800803c <Mode_Three>:

void Mode_Three(){
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
	printf("\nMODE2 Second Search (Known) MODE\n\r");
 8008042:	4843      	ldr	r0, [pc, #268]	; (8008150 <Mode_Three+0x114>)
 8008044:	f002 fd96 	bl	800ab74 <iprintf>

	MF.FLAG.WALL_CTRL = 1;
 8008048:	4a42      	ldr	r2, [pc, #264]	; (8008154 <Mode_Three+0x118>)
 800804a:	8813      	ldrh	r3, [r2, #0]
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	8013      	strh	r3, [r2, #0]
	MF.FLAG.SCND = 1;
 8008052:	4a40      	ldr	r2, [pc, #256]	; (8008154 <Mode_Three+0x118>)
 8008054:	8813      	ldrh	r3, [r2, #0]
 8008056:	f043 0302 	orr.w	r3, r3, #2
 800805a:	8013      	strh	r3, [r2, #0]
	MF.FLAG.KNOWN = 1;
 800805c:	4a3d      	ldr	r2, [pc, #244]	; (8008154 <Mode_Three+0x118>)
 800805e:	8813      	ldrh	r3, [r2, #0]
 8008060:	f043 0320 	orr.w	r3, r3, #32
 8008064:	8013      	strh	r3, [r2, #0]
	Set_Search_Params(&trans_params, 400.0f, 2500.0f); //velocity ・ acceleration
 8008066:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8008158 <Mode_Three+0x11c>
 800806a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800815c <Mode_Three+0x120>
 800806e:	483c      	ldr	r0, [pc, #240]	; (8008160 <Mode_Three+0x124>)
 8008070:	f7fd f9ab 	bl	80053ca <Set_Search_Params>

	goal_x = GOAL_X;
 8008074:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <Mode_Three+0x128>)
 8008076:	2207      	movs	r2, #7
 8008078:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 800807a:	4b3b      	ldr	r3, [pc, #236]	; (8008168 <Mode_Three+0x12c>)
 800807c:	2207      	movs	r2, #7
 800807e:	701a      	strb	r2, [r3, #0]
	adc_case = 0;
 8008080:	4b3a      	ldr	r3, [pc, #232]	; (800816c <Mode_Three+0x130>)
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
	ADC_Start();
 8008086:	f001 fa29 	bl	80094dc <ADC_Start>


	//----基準値を取る----
	while(adc_case<=2){
 800808a:	bf00      	nop
 800808c:	4b37      	ldr	r3, [pc, #220]	; (800816c <Mode_Three+0x130>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b25b      	sxtb	r3, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	ddfa      	ble.n	800808c <Mode_Three+0x50>
	}

	get_base_info();
 8008096:	f001 fb21 	bl	80096dc <get_base_info>

	while(sensor_data.frontL < 300 || sensor_data.frontR< 300){
 800809a:	bf00      	nop
 800809c:	4b34      	ldr	r3, [pc, #208]	; (8008170 <Mode_Three+0x134>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80080a4:	d3fa      	bcc.n	800809c <Mode_Three+0x60>
 80080a6:	4b32      	ldr	r3, [pc, #200]	; (8008170 <Mode_Three+0x134>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80080ae:	d3f5      	bcc.n	800809c <Mode_Three+0x60>
	}

	for(uint8_t i=0; i<3; i++){
 80080b0:	2300      	movs	r3, #0
 80080b2:	71fb      	strb	r3, [r7, #7]
 80080b4:	e012      	b.n	80080dc <Mode_Three+0xa0>
		Back_LED_Light(1,0,1);
 80080b6:	2201      	movs	r2, #1
 80080b8:	2100      	movs	r1, #0
 80080ba:	2001      	movs	r0, #1
 80080bc:	f7fe ff24 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 80080c0:	2096      	movs	r0, #150	; 0x96
 80080c2:	f7f8 ff63 	bl	8000f8c <HAL_Delay>
		Back_LED_Light(0,0,0);
 80080c6:	2200      	movs	r2, #0
 80080c8:	2100      	movs	r1, #0
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7fe ff1c 	bl	8006f08 <Back_LED_Light>
		HAL_Delay(150);
 80080d0:	2096      	movs	r0, #150	; 0x96
 80080d2:	f7f8 ff5b 	bl	8000f8c <HAL_Delay>
	for(uint8_t i=0; i<3; i++){
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	3301      	adds	r3, #1
 80080da:	71fb      	strb	r3, [r7, #7]
 80080dc:	79fb      	ldrb	r3, [r7, #7]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d9e9      	bls.n	80080b6 <Mode_Three+0x7a>
	}


	MF.FLAG.MT_CTRL = 1;
 80080e2:	4a1c      	ldr	r2, [pc, #112]	; (8008154 <Mode_Three+0x118>)
 80080e4:	8813      	ldrh	r3, [r2, #0]
 80080e6:	f043 0301 	orr.w	r3, r3, #1
 80080ea:	8013      	strh	r3, [r2, #0]
	Maze_Search_Slalom(&trans_params, &trans_params_known, &rot_params);
 80080ec:	4a21      	ldr	r2, [pc, #132]	; (8008174 <Mode_Three+0x138>)
 80080ee:	4922      	ldr	r1, [pc, #136]	; (8008178 <Mode_Three+0x13c>)
 80080f0:	481b      	ldr	r0, [pc, #108]	; (8008160 <Mode_Three+0x124>)
 80080f2:	f000 fba5 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 80080f6:	4a17      	ldr	r2, [pc, #92]	; (8008154 <Mode_Three+0x118>)
 80080f8:	8813      	ldrh	r3, [r2, #0]
 80080fa:	f36f 0300 	bfc	r3, #0, #1
 80080fe:	8013      	strh	r3, [r2, #0]

	Motor_Drive_Stop();
 8008100:	f7fe f8ea 	bl	80062d8 <Motor_Drive_Stop>
	HAL_Delay(2000);
 8008104:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008108:	f7f8 ff40 	bl	8000f8c <HAL_Delay>

	goal_x = goal_y = 0;
 800810c:	4b16      	ldr	r3, [pc, #88]	; (8008168 <Mode_Three+0x12c>)
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <Mode_Three+0x12c>)
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	4b13      	ldr	r3, [pc, #76]	; (8008164 <Mode_Three+0x128>)
 8008118:	701a      	strb	r2, [r3, #0]

	MF.FLAG.MT_CTRL = 1;
 800811a:	4a0e      	ldr	r2, [pc, #56]	; (8008154 <Mode_Three+0x118>)
 800811c:	8813      	ldrh	r3, [r2, #0]
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	8013      	strh	r3, [r2, #0]
	Maze_Search_Slalom(&trans_params,&trans_params_known,&rot_params);
 8008124:	4a13      	ldr	r2, [pc, #76]	; (8008174 <Mode_Three+0x138>)
 8008126:	4914      	ldr	r1, [pc, #80]	; (8008178 <Mode_Three+0x13c>)
 8008128:	480d      	ldr	r0, [pc, #52]	; (8008160 <Mode_Three+0x124>)
 800812a:	f000 fb89 	bl	8008840 <Maze_Search_Slalom>
	MF.FLAG.MT_CTRL = 0;
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <Mode_Three+0x118>)
 8008130:	8813      	ldrh	r3, [r2, #0]
 8008132:	f36f 0300 	bfc	r3, #0, #1
 8008136:	8013      	strh	r3, [r2, #0]

	goal_x = GOAL_X;
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <Mode_Three+0x128>)
 800813a:	2207      	movs	r2, #7
 800813c:	701a      	strb	r2, [r3, #0]
	goal_y = GOAL_Y;
 800813e:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <Mode_Three+0x12c>)
 8008140:	2207      	movs	r2, #7
 8008142:	701a      	strb	r2, [r3, #0]

	Motor_Drive_Stop();
 8008144:	f7fe f8c8 	bl	80062d8 <Motor_Drive_Stop>

}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	0800cc58 	.word	0x0800cc58
 8008154:	200029dc 	.word	0x200029dc
 8008158:	451c4000 	.word	0x451c4000
 800815c:	43c80000 	.word	0x43c80000
 8008160:	20002578 	.word	0x20002578
 8008164:	2000265c 	.word	0x2000265c
 8008168:	20002564 	.word	0x20002564
 800816c:	20002584 	.word	0x20002584
 8008170:	20000238 	.word	0x20000238
 8008174:	200027b4 	.word	0x200027b4
 8008178:	200029d0 	.word	0x200029d0

0800817c <Mode_Four>:

void Mode_Four(){
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
	printf("\nMODE3 Drive Check MODE\n\r");
 8008182:	48c9      	ldr	r0, [pc, #804]	; (80084a8 <Mode_Four+0x32c>)
 8008184:	f002 fcf6 	bl	800ab74 <iprintf>

	//Check Mode

	int8_t test_mode = mode_change();
 8008188:	f7fe fa20 	bl	80065cc <mode_change>
 800818c:	4603      	mov	r3, r0
 800818e:	71fb      	strb	r3, [r7, #7]

	LED_Light1();
 8008190:	f7fe ff12 	bl	8006fb8 <LED_Light1>
	HAL_Delay(1000);
 8008194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008198:	f7f8 fef8 	bl	8000f8c <HAL_Delay>
	gyro_calib_flag = 1;
 800819c:	4bc3      	ldr	r3, [pc, #780]	; (80084ac <Mode_Four+0x330>)
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
	   while(gyro_calib_flag){
 80081a2:	bf00      	nop
 80081a4:	4bc1      	ldr	r3, [pc, #772]	; (80084ac <Mode_Four+0x330>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1fa      	bne.n	80081a4 <Mode_Four+0x28>
	   }

	switch(test_mode){
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	2b07      	cmp	r3, #7
 80081b4:	f200 82b4 	bhi.w	8008720 <Mode_Four+0x5a4>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <Mode_Four+0x44>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080082cb 	.word	0x080082cb
 80081c8:	0800834b 	.word	0x0800834b
 80081cc:	080083cb 	.word	0x080083cb
 80081d0:	0800846b 	.word	0x0800846b
 80081d4:	0800851d 	.word	0x0800851d
 80081d8:	080085cd 	.word	0x080085cd
 80081dc:	0800867d 	.word	0x0800867d

	case 0:
		MF.FLAG.MT_CTRL = 1;
 80081e0:	4ab3      	ldr	r2, [pc, #716]	; (80084b0 <Mode_Four+0x334>)
 80081e2:	8813      	ldrh	r3, [r2, #0]
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 80081ea:	4ab1      	ldr	r2, [pc, #708]	; (80084b0 <Mode_Four+0x334>)
 80081ec:	8813      	ldrh	r3, [r2, #0]
 80081ee:	f36f 13c7 	bfc	r3, #7, #1
 80081f2:	8013      	strh	r3, [r2, #0]

		Forward_One_Section(trans_params.velocity);
		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
*/

		Adjust_Forward(trans_params.acceleration, trans_params.velocity);
 80081f4:	4baf      	ldr	r3, [pc, #700]	; (80084b4 <Mode_Four+0x338>)
 80081f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80081fa:	4bae      	ldr	r3, [pc, #696]	; (80084b4 <Mode_Four+0x338>)
 80081fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8008200:	eef0 0a47 	vmov.f32	s1, s14
 8008204:	eeb0 0a67 	vmov.f32	s0, s15
 8008208:	f7fd fe28 	bl	8005e5c <Adjust_Forward>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 800820c:	4ba9      	ldr	r3, [pc, #676]	; (80084b4 <Mode_Four+0x338>)
 800820e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008212:	eeb0 0a67 	vmov.f32	s0, s15
 8008216:	f7fd ff81 	bl	800611c <Slalom_R>
		Slalom_L(trans_params.velocity);//オフセットスピード設定
 800821a:	4ba6      	ldr	r3, [pc, #664]	; (80084b4 <Mode_Four+0x338>)
 800821c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008220:	eeb0 0a67 	vmov.f32	s0, s15
 8008224:	f7fd ff32 	bl	800608c <Slalom_L>
		Slalom_L(trans_params.velocity);//オフセットスピード設定
 8008228:	4ba2      	ldr	r3, [pc, #648]	; (80084b4 <Mode_Four+0x338>)
 800822a:	edd3 7a01 	vldr	s15, [r3, #4]
 800822e:	eeb0 0a67 	vmov.f32	s0, s15
 8008232:	f7fd ff2b 	bl	800608c <Slalom_L>
		Slalom_L(trans_params.velocity);//オフセットスピード設定
 8008236:	4b9f      	ldr	r3, [pc, #636]	; (80084b4 <Mode_Four+0x338>)
 8008238:	edd3 7a01 	vldr	s15, [r3, #4]
 800823c:	eeb0 0a67 	vmov.f32	s0, s15
 8008240:	f7fd ff24 	bl	800608c <Slalom_L>
		Slalom_L(trans_params.velocity);//オフセットスピード設定
 8008244:	4b9b      	ldr	r3, [pc, #620]	; (80084b4 <Mode_Four+0x338>)
 8008246:	edd3 7a01 	vldr	s15, [r3, #4]
 800824a:	eeb0 0a67 	vmov.f32	s0, s15
 800824e:	f7fd ff1d 	bl	800608c <Slalom_L>
		Forward_One_Section(trans_params.velocity);
 8008252:	4b98      	ldr	r3, [pc, #608]	; (80084b4 <Mode_Four+0x338>)
 8008254:	edd3 7a01 	vldr	s15, [r3, #4]
 8008258:	eeb0 0a67 	vmov.f32	s0, s15
 800825c:	f7fd fddc 	bl	8005e18 <Forward_One_Section>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 8008260:	4b94      	ldr	r3, [pc, #592]	; (80084b4 <Mode_Four+0x338>)
 8008262:	edd3 7a01 	vldr	s15, [r3, #4]
 8008266:	eeb0 0a67 	vmov.f32	s0, s15
 800826a:	f7fd ff57 	bl	800611c <Slalom_R>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 800826e:	4b91      	ldr	r3, [pc, #580]	; (80084b4 <Mode_Four+0x338>)
 8008270:	edd3 7a01 	vldr	s15, [r3, #4]
 8008274:	eeb0 0a67 	vmov.f32	s0, s15
 8008278:	f7fd ff50 	bl	800611c <Slalom_R>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 800827c:	4b8d      	ldr	r3, [pc, #564]	; (80084b4 <Mode_Four+0x338>)
 800827e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008282:	eeb0 0a67 	vmov.f32	s0, s15
 8008286:	f7fd ff49 	bl	800611c <Slalom_R>
		Forward_One_Section(trans_params.velocity);
 800828a:	4b8a      	ldr	r3, [pc, #552]	; (80084b4 <Mode_Four+0x338>)
 800828c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008290:	eeb0 0a67 	vmov.f32	s0, s15
 8008294:	f7fd fdc0 	bl	8005e18 <Forward_One_Section>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 8008298:	4b86      	ldr	r3, [pc, #536]	; (80084b4 <Mode_Four+0x338>)
 800829a:	edd3 7a01 	vldr	s15, [r3, #4]
 800829e:	eeb0 0a67 	vmov.f32	s0, s15
 80082a2:	f7fd ff3b 	bl	800611c <Slalom_R>
		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80082a6:	4b83      	ldr	r3, [pc, #524]	; (80084b4 <Mode_Four+0x338>)
 80082a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80082ac:	4b81      	ldr	r3, [pc, #516]	; (80084b4 <Mode_Four+0x338>)
 80082ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80082b2:	eef0 0a47 	vmov.f32	s1, s14
 80082b6:	eeb0 0a67 	vmov.f32	s0, s15
 80082ba:	f7fd fe5b 	bl	8005f74 <Decel_Half_Section>

		MF.FLAG.MT_CTRL = 0;
 80082be:	4a7c      	ldr	r2, [pc, #496]	; (80084b0 <Mode_Four+0x334>)
 80082c0:	8813      	ldrh	r3, [r2, #0]
 80082c2:	f36f 0300 	bfc	r3, #0, #1
 80082c6:	8013      	strh	r3, [r2, #0]

		break;
 80082c8:	e22a      	b.n	8008720 <Mode_Four+0x5a4>

	case 1:
		//Slalom右
		MF.FLAG.MT_CTRL = 1;
 80082ca:	4a79      	ldr	r2, [pc, #484]	; (80084b0 <Mode_Four+0x334>)
 80082cc:	8813      	ldrh	r3, [r2, #0]
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 80082d4:	4a76      	ldr	r2, [pc, #472]	; (80084b0 <Mode_Four+0x334>)
 80082d6:	8813      	ldrh	r3, [r2, #0]
 80082d8:	f36f 13c7 	bfc	r3, #7, #1
 80082dc:	8013      	strh	r3, [r2, #0]

		Back_LED_Light(1,0,0);
 80082de:	2200      	movs	r2, #0
 80082e0:	2100      	movs	r1, #0
 80082e2:	2001      	movs	r0, #1
 80082e4:	f7fe fe10 	bl	8006f08 <Back_LED_Light>
//		Adjust_Forward(trans_params.acceleration, trans_params.velocity);
		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80082e8:	4b72      	ldr	r3, [pc, #456]	; (80084b4 <Mode_Four+0x338>)
 80082ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80082ee:	4b71      	ldr	r3, [pc, #452]	; (80084b4 <Mode_Four+0x338>)
 80082f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80082f4:	eef0 0a47 	vmov.f32	s1, s14
 80082f8:	eeb0 0a67 	vmov.f32	s0, s15
 80082fc:	f7fd fd68 	bl	8005dd0 <Accel_Half_Section>

		Slalom_R(trans_params.velocity);//オフセットスピード設定
 8008300:	4b6c      	ldr	r3, [pc, #432]	; (80084b4 <Mode_Four+0x338>)
 8008302:	edd3 7a01 	vldr	s15, [r3, #4]
 8008306:	eeb0 0a67 	vmov.f32	s0, s15
 800830a:	f7fd ff07 	bl	800611c <Slalom_R>
      	Back_LED_Light(0,1,0);
 800830e:	2200      	movs	r2, #0
 8008310:	2101      	movs	r1, #1
 8008312:	2000      	movs	r0, #0
 8008314:	f7fe fdf8 	bl	8006f08 <Back_LED_Light>

		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008318:	4b66      	ldr	r3, [pc, #408]	; (80084b4 <Mode_Four+0x338>)
 800831a:	edd3 7a02 	vldr	s15, [r3, #8]
 800831e:	4b65      	ldr	r3, [pc, #404]	; (80084b4 <Mode_Four+0x338>)
 8008320:	ed93 7a01 	vldr	s14, [r3, #4]
 8008324:	eef0 0a47 	vmov.f32	s1, s14
 8008328:	eeb0 0a67 	vmov.f32	s0, s15
 800832c:	f7fd fe22 	bl	8005f74 <Decel_Half_Section>
		Back_LED_Light(0,0,1);
 8008330:	2201      	movs	r2, #1
 8008332:	2100      	movs	r1, #0
 8008334:	2000      	movs	r0, #0
 8008336:	f7fe fde7 	bl	8006f08 <Back_LED_Light>

		MF.FLAG.MT_CTRL = 0;
 800833a:	4a5d      	ldr	r2, [pc, #372]	; (80084b0 <Mode_Four+0x334>)
 800833c:	8813      	ldrh	r3, [r2, #0]
 800833e:	f36f 0300 	bfc	r3, #0, #1
 8008342:	8013      	strh	r3, [r2, #0]

		Motor_Drive_Stop();
 8008344:	f7fd ffc8 	bl	80062d8 <Motor_Drive_Stop>
		break;
 8008348:	e1ea      	b.n	8008720 <Mode_Four+0x5a4>

	case 2:
		//Slalom左
		MF.FLAG.MT_CTRL = 1;
 800834a:	4a59      	ldr	r2, [pc, #356]	; (80084b0 <Mode_Four+0x334>)
 800834c:	8813      	ldrh	r3, [r2, #0]
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 8008354:	4a56      	ldr	r2, [pc, #344]	; (80084b0 <Mode_Four+0x334>)
 8008356:	8813      	ldrh	r3, [r2, #0]
 8008358:	f36f 13c7 	bfc	r3, #7, #1
 800835c:	8013      	strh	r3, [r2, #0]

		Back_LED_Light(1,0,0);
 800835e:	2200      	movs	r2, #0
 8008360:	2100      	movs	r1, #0
 8008362:	2001      	movs	r0, #1
 8008364:	f7fe fdd0 	bl	8006f08 <Back_LED_Light>
		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008368:	4b52      	ldr	r3, [pc, #328]	; (80084b4 <Mode_Four+0x338>)
 800836a:	edd3 7a02 	vldr	s15, [r3, #8]
 800836e:	4b51      	ldr	r3, [pc, #324]	; (80084b4 <Mode_Four+0x338>)
 8008370:	ed93 7a01 	vldr	s14, [r3, #4]
 8008374:	eef0 0a47 	vmov.f32	s1, s14
 8008378:	eeb0 0a67 	vmov.f32	s0, s15
 800837c:	f7fd fd28 	bl	8005dd0 <Accel_Half_Section>

		Slalom_L(trans_params.velocity);//オフセットスピード設定
 8008380:	4b4c      	ldr	r3, [pc, #304]	; (80084b4 <Mode_Four+0x338>)
 8008382:	edd3 7a01 	vldr	s15, [r3, #4]
 8008386:	eeb0 0a67 	vmov.f32	s0, s15
 800838a:	f7fd fe7f 	bl	800608c <Slalom_L>
		Back_LED_Light(0,1,0);
 800838e:	2200      	movs	r2, #0
 8008390:	2101      	movs	r1, #1
 8008392:	2000      	movs	r0, #0
 8008394:	f7fe fdb8 	bl	8006f08 <Back_LED_Light>

		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008398:	4b46      	ldr	r3, [pc, #280]	; (80084b4 <Mode_Four+0x338>)
 800839a:	edd3 7a02 	vldr	s15, [r3, #8]
 800839e:	4b45      	ldr	r3, [pc, #276]	; (80084b4 <Mode_Four+0x338>)
 80083a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80083a4:	eef0 0a47 	vmov.f32	s1, s14
 80083a8:	eeb0 0a67 	vmov.f32	s0, s15
 80083ac:	f7fd fde2 	bl	8005f74 <Decel_Half_Section>
		Back_LED_Light(0,0,1);
 80083b0:	2201      	movs	r2, #1
 80083b2:	2100      	movs	r1, #0
 80083b4:	2000      	movs	r0, #0
 80083b6:	f7fe fda7 	bl	8006f08 <Back_LED_Light>

		MF.FLAG.MT_CTRL = 0;
 80083ba:	4a3d      	ldr	r2, [pc, #244]	; (80084b0 <Mode_Four+0x334>)
 80083bc:	8813      	ldrh	r3, [r2, #0]
 80083be:	f36f 0300 	bfc	r3, #0, #1
 80083c2:	8013      	strh	r3, [r2, #0]

		Motor_Drive_Stop();
 80083c4:	f7fd ff88 	bl	80062d8 <Motor_Drive_Stop>
		break;
 80083c8:	e1aa      	b.n	8008720 <Mode_Four+0x5a4>

	case 3:
		//Slalom右
		MF.FLAG.MT_CTRL = 1;
 80083ca:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <Mode_Four+0x334>)
 80083cc:	8813      	ldrh	r3, [r2, #0]
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 80083d4:	4a36      	ldr	r2, [pc, #216]	; (80084b0 <Mode_Four+0x334>)
 80083d6:	8813      	ldrh	r3, [r2, #0]
 80083d8:	f36f 13c7 	bfc	r3, #7, #1
 80083dc:	8013      	strh	r3, [r2, #0]

		Back_LED_Light(1,0,0);
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	2001      	movs	r0, #1
 80083e4:	f7fe fd90 	bl	8006f08 <Back_LED_Light>
		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <Mode_Four+0x338>)
 80083ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80083ee:	4b31      	ldr	r3, [pc, #196]	; (80084b4 <Mode_Four+0x338>)
 80083f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80083f4:	eef0 0a47 	vmov.f32	s1, s14
 80083f8:	eeb0 0a67 	vmov.f32	s0, s15
 80083fc:	f7fd fce8 	bl	8005dd0 <Accel_Half_Section>
		for(uint8_t i=0; i<8;i++){
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e015      	b.n	8008432 <Mode_Four+0x2b6>
		Slalom_R(trans_params.velocity);//オフセットスピード設定
 8008406:	4b2b      	ldr	r3, [pc, #172]	; (80084b4 <Mode_Four+0x338>)
 8008408:	edd3 7a01 	vldr	s15, [r3, #4]
 800840c:	eeb0 0a67 	vmov.f32	s0, s15
 8008410:	f7fd fe84 	bl	800611c <Slalom_R>
		Forward_One_Section(trans_params.velocity);
 8008414:	4b27      	ldr	r3, [pc, #156]	; (80084b4 <Mode_Four+0x338>)
 8008416:	edd3 7a01 	vldr	s15, [r3, #4]
 800841a:	eeb0 0a67 	vmov.f32	s0, s15
 800841e:	f7fd fcfb 	bl	8005e18 <Forward_One_Section>

		Back_LED_Light(0,1,0);
 8008422:	2200      	movs	r2, #0
 8008424:	2101      	movs	r1, #1
 8008426:	2000      	movs	r0, #0
 8008428:	f7fe fd6e 	bl	8006f08 <Back_LED_Light>
		for(uint8_t i=0; i<8;i++){
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	3301      	adds	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2b07      	cmp	r3, #7
 8008436:	d9e6      	bls.n	8008406 <Mode_Four+0x28a>
		}
		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <Mode_Four+0x338>)
 800843a:	edd3 7a02 	vldr	s15, [r3, #8]
 800843e:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <Mode_Four+0x338>)
 8008440:	ed93 7a01 	vldr	s14, [r3, #4]
 8008444:	eef0 0a47 	vmov.f32	s1, s14
 8008448:	eeb0 0a67 	vmov.f32	s0, s15
 800844c:	f7fd fd92 	bl	8005f74 <Decel_Half_Section>
		Back_LED_Light(0,0,1);
 8008450:	2201      	movs	r2, #1
 8008452:	2100      	movs	r1, #0
 8008454:	2000      	movs	r0, #0
 8008456:	f7fe fd57 	bl	8006f08 <Back_LED_Light>

		MF.FLAG.MT_CTRL = 0;
 800845a:	4a15      	ldr	r2, [pc, #84]	; (80084b0 <Mode_Four+0x334>)
 800845c:	8813      	ldrh	r3, [r2, #0]
 800845e:	f36f 0300 	bfc	r3, #0, #1
 8008462:	8013      	strh	r3, [r2, #0]

		Motor_Drive_Stop();
 8008464:	f7fd ff38 	bl	80062d8 <Motor_Drive_Stop>
		break;
 8008468:	e15a      	b.n	8008720 <Mode_Four+0x5a4>


	case 4:
		//Slalom左
		MF.FLAG.MT_CTRL = 1;
 800846a:	4a11      	ldr	r2, [pc, #68]	; (80084b0 <Mode_Four+0x334>)
 800846c:	8813      	ldrh	r3, [r2, #0]
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 8008474:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <Mode_Four+0x334>)
 8008476:	8813      	ldrh	r3, [r2, #0]
 8008478:	f36f 13c7 	bfc	r3, #7, #1
 800847c:	8013      	strh	r3, [r2, #0]

		Back_LED_Light(1,0,0);
 800847e:	2200      	movs	r2, #0
 8008480:	2100      	movs	r1, #0
 8008482:	2001      	movs	r0, #1
 8008484:	f7fe fd40 	bl	8006f08 <Back_LED_Light>

		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <Mode_Four+0x338>)
 800848a:	edd3 7a02 	vldr	s15, [r3, #8]
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <Mode_Four+0x338>)
 8008490:	ed93 7a01 	vldr	s14, [r3, #4]
 8008494:	eef0 0a47 	vmov.f32	s1, s14
 8008498:	eeb0 0a67 	vmov.f32	s0, s15
 800849c:	f7fd fc98 	bl	8005dd0 <Accel_Half_Section>

		for(uint8_t cnt=0;cnt<8;cnt++){
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]
 80084a4:	e01e      	b.n	80084e4 <Mode_Four+0x368>
 80084a6:	bf00      	nop
 80084a8:	0800cc7c 	.word	0x0800cc7c
 80084ac:	20002448 	.word	0x20002448
 80084b0:	200029dc 	.word	0x200029dc
 80084b4:	20002578 	.word	0x20002578
		Slalom_L(trans_params.velocity);//オフセットスピード設定
 80084b8:	4b9b      	ldr	r3, [pc, #620]	; (8008728 <Mode_Four+0x5ac>)
 80084ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80084be:	eeb0 0a67 	vmov.f32	s0, s15
 80084c2:	f7fd fde3 	bl	800608c <Slalom_L>
		Forward_One_Section(trans_params.velocity);
 80084c6:	4b98      	ldr	r3, [pc, #608]	; (8008728 <Mode_Four+0x5ac>)
 80084c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80084cc:	eeb0 0a67 	vmov.f32	s0, s15
 80084d0:	f7fd fca2 	bl	8005e18 <Forward_One_Section>

		Back_LED_Light(0,1,0);
 80084d4:	2200      	movs	r2, #0
 80084d6:	2101      	movs	r1, #1
 80084d8:	2000      	movs	r0, #0
 80084da:	f7fe fd15 	bl	8006f08 <Back_LED_Light>
		for(uint8_t cnt=0;cnt<8;cnt++){
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	3301      	adds	r3, #1
 80084e2:	73bb      	strb	r3, [r7, #14]
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b07      	cmp	r3, #7
 80084e8:	d9e6      	bls.n	80084b8 <Mode_Four+0x33c>
		}

		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80084ea:	4b8f      	ldr	r3, [pc, #572]	; (8008728 <Mode_Four+0x5ac>)
 80084ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80084f0:	4b8d      	ldr	r3, [pc, #564]	; (8008728 <Mode_Four+0x5ac>)
 80084f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80084f6:	eef0 0a47 	vmov.f32	s1, s14
 80084fa:	eeb0 0a67 	vmov.f32	s0, s15
 80084fe:	f7fd fd39 	bl	8005f74 <Decel_Half_Section>

		Back_LED_Light(0,0,1);
 8008502:	2201      	movs	r2, #1
 8008504:	2100      	movs	r1, #0
 8008506:	2000      	movs	r0, #0
 8008508:	f7fe fcfe 	bl	8006f08 <Back_LED_Light>

		MF.FLAG.MT_CTRL = 0;
 800850c:	4a87      	ldr	r2, [pc, #540]	; (800872c <Mode_Four+0x5b0>)
 800850e:	8813      	ldrh	r3, [r2, #0]
 8008510:	f36f 0300 	bfc	r3, #0, #1
 8008514:	8013      	strh	r3, [r2, #0]

		Motor_Drive_Stop();
 8008516:	f7fd fedf 	bl	80062d8 <Motor_Drive_Stop>

		break;
 800851a:	e101      	b.n	8008720 <Mode_Four+0x5a4>


	case 5:
		//Pivot左回転
		MF.FLAG.MT_CTRL = 1;
 800851c:	4a83      	ldr	r2, [pc, #524]	; (800872c <Mode_Four+0x5b0>)
 800851e:	8813      	ldrh	r3, [r2, #0]
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	8013      	strh	r3, [r2, #0]
		MF.FLAG.WALL_CTRL = 0;
 8008526:	4a81      	ldr	r2, [pc, #516]	; (800872c <Mode_Four+0x5b0>)
 8008528:	8813      	ldrh	r3, [r2, #0]
 800852a:	f36f 13c7 	bfc	r3, #7, #1
 800852e:	8013      	strh	r3, [r2, #0]
		Back_LED_Light(1,0,0);
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	2001      	movs	r0, #1
 8008536:	f7fe fce7 	bl	8006f08 <Back_LED_Light>
		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 800853a:	4b7b      	ldr	r3, [pc, #492]	; (8008728 <Mode_Four+0x5ac>)
 800853c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008540:	4b79      	ldr	r3, [pc, #484]	; (8008728 <Mode_Four+0x5ac>)
 8008542:	ed93 7a01 	vldr	s14, [r3, #4]
 8008546:	eef0 0a47 	vmov.f32	s1, s14
 800854a:	eeb0 0a67 	vmov.f32	s0, s15
 800854e:	f7fd fc3f 	bl	8005dd0 <Accel_Half_Section>
		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008552:	4b75      	ldr	r3, [pc, #468]	; (8008728 <Mode_Four+0x5ac>)
 8008554:	edd3 7a02 	vldr	s15, [r3, #8]
 8008558:	4b73      	ldr	r3, [pc, #460]	; (8008728 <Mode_Four+0x5ac>)
 800855a:	ed93 7a01 	vldr	s14, [r3, #4]
 800855e:	eef0 0a47 	vmov.f32	s1, s14
 8008562:	eeb0 0a67 	vmov.f32	s0, s15
 8008566:	f7fd fd05 	bl	8005f74 <Decel_Half_Section>

		PivotL90(rot_params.acceleration,rot_params.velocity);
 800856a:	4b71      	ldr	r3, [pc, #452]	; (8008730 <Mode_Four+0x5b4>)
 800856c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008570:	4b6f      	ldr	r3, [pc, #444]	; (8008730 <Mode_Four+0x5b4>)
 8008572:	ed93 7a01 	vldr	s14, [r3, #4]
 8008576:	eef0 0a47 	vmov.f32	s1, s14
 800857a:	eeb0 0a67 	vmov.f32	s0, s15
 800857e:	f7fd fd23 	bl	8005fc8 <PivotL90>

		Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008582:	4b69      	ldr	r3, [pc, #420]	; (8008728 <Mode_Four+0x5ac>)
 8008584:	edd3 7a02 	vldr	s15, [r3, #8]
 8008588:	4b67      	ldr	r3, [pc, #412]	; (8008728 <Mode_Four+0x5ac>)
 800858a:	ed93 7a01 	vldr	s14, [r3, #4]
 800858e:	eef0 0a47 	vmov.f32	s1, s14
 8008592:	eeb0 0a67 	vmov.f32	s0, s15
 8008596:	f7fd fc1b 	bl	8005dd0 <Accel_Half_Section>
		Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 800859a:	4b63      	ldr	r3, [pc, #396]	; (8008728 <Mode_Four+0x5ac>)
 800859c:	edd3 7a02 	vldr	s15, [r3, #8]
 80085a0:	4b61      	ldr	r3, [pc, #388]	; (8008728 <Mode_Four+0x5ac>)
 80085a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80085a6:	eef0 0a47 	vmov.f32	s1, s14
 80085aa:	eeb0 0a67 	vmov.f32	s0, s15
 80085ae:	f7fd fce1 	bl	8005f74 <Decel_Half_Section>

		Back_LED_Light(0,0,1);
 80085b2:	2201      	movs	r2, #1
 80085b4:	2100      	movs	r1, #0
 80085b6:	2000      	movs	r0, #0
 80085b8:	f7fe fca6 	bl	8006f08 <Back_LED_Light>

		MF.FLAG.MT_CTRL = 0;
 80085bc:	4a5b      	ldr	r2, [pc, #364]	; (800872c <Mode_Four+0x5b0>)
 80085be:	8813      	ldrh	r3, [r2, #0]
 80085c0:	f36f 0300 	bfc	r3, #0, #1
 80085c4:	8013      	strh	r3, [r2, #0]
		Motor_Drive_Stop();
 80085c6:	f7fd fe87 	bl	80062d8 <Motor_Drive_Stop>
		break;
 80085ca:	e0a9      	b.n	8008720 <Mode_Four+0x5a4>

	case 6:
		//Pivot右回転
			MF.FLAG.MT_CTRL = 1;
 80085cc:	4a57      	ldr	r2, [pc, #348]	; (800872c <Mode_Four+0x5b0>)
 80085ce:	8813      	ldrh	r3, [r2, #0]
 80085d0:	f043 0301 	orr.w	r3, r3, #1
 80085d4:	8013      	strh	r3, [r2, #0]
			MF.FLAG.WALL_CTRL = 0;
 80085d6:	4a55      	ldr	r2, [pc, #340]	; (800872c <Mode_Four+0x5b0>)
 80085d8:	8813      	ldrh	r3, [r2, #0]
 80085da:	f36f 13c7 	bfc	r3, #7, #1
 80085de:	8013      	strh	r3, [r2, #0]

			Back_LED_Light(1,0,0);
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	2001      	movs	r0, #1
 80085e6:	f7fe fc8f 	bl	8006f08 <Back_LED_Light>
			Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80085ea:	4b4f      	ldr	r3, [pc, #316]	; (8008728 <Mode_Four+0x5ac>)
 80085ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80085f0:	4b4d      	ldr	r3, [pc, #308]	; (8008728 <Mode_Four+0x5ac>)
 80085f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80085f6:	eef0 0a47 	vmov.f32	s1, s14
 80085fa:	eeb0 0a67 	vmov.f32	s0, s15
 80085fe:	f7fd fbe7 	bl	8005dd0 <Accel_Half_Section>
			Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008602:	4b49      	ldr	r3, [pc, #292]	; (8008728 <Mode_Four+0x5ac>)
 8008604:	edd3 7a02 	vldr	s15, [r3, #8]
 8008608:	4b47      	ldr	r3, [pc, #284]	; (8008728 <Mode_Four+0x5ac>)
 800860a:	ed93 7a01 	vldr	s14, [r3, #4]
 800860e:	eef0 0a47 	vmov.f32	s1, s14
 8008612:	eeb0 0a67 	vmov.f32	s0, s15
 8008616:	f7fd fcad 	bl	8005f74 <Decel_Half_Section>

			PivotR90(rot_params.acceleration,rot_params.velocity);
 800861a:	4b45      	ldr	r3, [pc, #276]	; (8008730 <Mode_Four+0x5b4>)
 800861c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008620:	4b43      	ldr	r3, [pc, #268]	; (8008730 <Mode_Four+0x5b4>)
 8008622:	ed93 7a01 	vldr	s14, [r3, #4]
 8008626:	eef0 0a47 	vmov.f32	s1, s14
 800862a:	eeb0 0a67 	vmov.f32	s0, s15
 800862e:	f7fd fce9 	bl	8006004 <PivotR90>

			Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008632:	4b3d      	ldr	r3, [pc, #244]	; (8008728 <Mode_Four+0x5ac>)
 8008634:	edd3 7a02 	vldr	s15, [r3, #8]
 8008638:	4b3b      	ldr	r3, [pc, #236]	; (8008728 <Mode_Four+0x5ac>)
 800863a:	ed93 7a01 	vldr	s14, [r3, #4]
 800863e:	eef0 0a47 	vmov.f32	s1, s14
 8008642:	eeb0 0a67 	vmov.f32	s0, s15
 8008646:	f7fd fbc3 	bl	8005dd0 <Accel_Half_Section>
			Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 800864a:	4b37      	ldr	r3, [pc, #220]	; (8008728 <Mode_Four+0x5ac>)
 800864c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <Mode_Four+0x5ac>)
 8008652:	ed93 7a01 	vldr	s14, [r3, #4]
 8008656:	eef0 0a47 	vmov.f32	s1, s14
 800865a:	eeb0 0a67 	vmov.f32	s0, s15
 800865e:	f7fd fc89 	bl	8005f74 <Decel_Half_Section>

			Back_LED_Light(0,0,1);
 8008662:	2201      	movs	r2, #1
 8008664:	2100      	movs	r1, #0
 8008666:	2000      	movs	r0, #0
 8008668:	f7fe fc4e 	bl	8006f08 <Back_LED_Light>

			MF.FLAG.MT_CTRL = 0;
 800866c:	4a2f      	ldr	r2, [pc, #188]	; (800872c <Mode_Four+0x5b0>)
 800866e:	8813      	ldrh	r3, [r2, #0]
 8008670:	f36f 0300 	bfc	r3, #0, #1
 8008674:	8013      	strh	r3, [r2, #0]
			Motor_Drive_Stop();
 8008676:	f7fd fe2f 	bl	80062d8 <Motor_Drive_Stop>

			break;
 800867a:	e051      	b.n	8008720 <Mode_Four+0x5a4>

	case 7:
		//drive check 4 区間
			printf("Drive Start!\r\n");
 800867c:	482d      	ldr	r0, [pc, #180]	; (8008734 <Mode_Four+0x5b8>)
 800867e:	f002 faed 	bl	800ac5c <puts>

			MF.FLAG.MT_CTRL = 1;
 8008682:	4a2a      	ldr	r2, [pc, #168]	; (800872c <Mode_Four+0x5b0>)
 8008684:	8813      	ldrh	r3, [r2, #0]
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	8013      	strh	r3, [r2, #0]
			MF.FLAG.WALL_CTRL = 0;
 800868c:	4a27      	ldr	r2, [pc, #156]	; (800872c <Mode_Four+0x5b0>)
 800868e:	8813      	ldrh	r3, [r2, #0]
 8008690:	f36f 13c7 	bfc	r3, #7, #1
 8008694:	8013      	strh	r3, [r2, #0]

			Accel_Half_Section(trans_params.acceleration, trans_params.velocity);
 8008696:	4b24      	ldr	r3, [pc, #144]	; (8008728 <Mode_Four+0x5ac>)
 8008698:	edd3 7a02 	vldr	s15, [r3, #8]
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <Mode_Four+0x5ac>)
 800869e:	ed93 7a01 	vldr	s14, [r3, #4]
 80086a2:	eef0 0a47 	vmov.f32	s1, s14
 80086a6:	eeb0 0a67 	vmov.f32	s0, s15
 80086aa:	f7fd fb91 	bl	8005dd0 <Accel_Half_Section>
			Back_LED_Light(1,0,0);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	2001      	movs	r0, #1
 80086b4:	f7fe fc28 	bl	8006f08 <Back_LED_Light>

			for(int i=0; i<5; i++){
 80086b8:	2300      	movs	r3, #0
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	e011      	b.n	80086e2 <Mode_Four+0x566>
				Forward_One_Section(trans_params.velocity);
 80086be:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <Mode_Four+0x5ac>)
 80086c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80086c4:	eeb0 0a67 	vmov.f32	s0, s15
 80086c8:	f7fd fba6 	bl	8005e18 <Forward_One_Section>
				printf("Accel!\r\n");
 80086cc:	481a      	ldr	r0, [pc, #104]	; (8008738 <Mode_Four+0x5bc>)
 80086ce:	f002 fac5 	bl	800ac5c <puts>

				Back_LED_Light(0,1,0);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2101      	movs	r1, #1
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7fe fc16 	bl	8006f08 <Back_LED_Light>
			for(int i=0; i<5; i++){
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	3301      	adds	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	ddea      	ble.n	80086be <Mode_Four+0x542>
			}

				printf("Decel!\r\n");
 80086e8:	4814      	ldr	r0, [pc, #80]	; (800873c <Mode_Four+0x5c0>)
 80086ea:	f002 fab7 	bl	800ac5c <puts>

			Decel_Half_Section(trans_params.acceleration, trans_params.velocity);
 80086ee:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <Mode_Four+0x5ac>)
 80086f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80086f4:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <Mode_Four+0x5ac>)
 80086f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80086fa:	eef0 0a47 	vmov.f32	s1, s14
 80086fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008702:	f7fd fc37 	bl	8005f74 <Decel_Half_Section>
			Back_LED_Light(0,0,1);
 8008706:	2201      	movs	r2, #1
 8008708:	2100      	movs	r1, #0
 800870a:	2000      	movs	r0, #0
 800870c:	f7fe fbfc 	bl	8006f08 <Back_LED_Light>

			MF.FLAG.MT_CTRL = 0;
 8008710:	4a06      	ldr	r2, [pc, #24]	; (800872c <Mode_Four+0x5b0>)
 8008712:	8813      	ldrh	r3, [r2, #0]
 8008714:	f36f 0300 	bfc	r3, #0, #1
 8008718:	8013      	strh	r3, [r2, #0]

			Motor_Drive_Stop();
 800871a:	f7fd fddd 	bl	80062d8 <Motor_Drive_Stop>

			break;
 800871e:	bf00      	nop
	}
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20002578 	.word	0x20002578
 800872c:	200029dc 	.word	0x200029dc
 8008730:	200027b4 	.word	0x200027b4
 8008734:	0800cc98 	.word	0x0800cc98
 8008738:	0800cca8 	.word	0x0800cca8
 800873c:	0800ccb0 	.word	0x0800ccb0

08008740 <Mode_Five>:

void Mode_Five(){
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
	//Log Check
	printf("Log Check Mode!\r\n");
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <Mode_Five+0x14>)
 8008746:	f002 fa89 	bl	800ac5c <puts>
	Log_Shower();
 800874a:	f7fe fc7b 	bl	8007044 <Log_Shower>
}
 800874e:	bf00      	nop
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	0800ccb8 	.word	0x0800ccb8

08008758 <Mode_Six>:
void Mode_Six(){
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
}
 800875c:	bf00      	nop
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <Mode_Seven>:

void Mode_Seven(){
 8008766:	b480      	push	{r7}
 8008768:	af00      	add	r7, sp, #0
}
 800876a:	bf00      	nop
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <Mode_Default>:

void Mode_Eight(){
}

void Mode_Default(){
 8008774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008776:	b087      	sub	sp, #28
 8008778:	af04      	add	r7, sp, #16

	adc_case = 0;
 800877a:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <Mode_Default+0x6c>)
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
		ADC_Start();
 8008780:	f000 feac 	bl	80094dc <ADC_Start>
		HAL_Delay(500);
 8008784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008788:	f7f8 fc00 	bl	8000f8c <HAL_Delay>
		get_base_info();
 800878c:	f000 ffa6 	bl	80096dc <get_base_info>
		while(1){
		//	printf("OFF->FL:%4d,SL:%4d,SR:%4d,FR:%4d ON->FL:%4d,SL:%4d,SR:%4d,FR:%4d\r\n",
		//		Sensor_Off_Data[1],Sensor_Off_Data[3],Sensor_Off_Data[2],Sensor_Off_Data[0],
		//			Sensor_On_Data[1],Sensor_On_Data[3],Sensor_On_Data[2],Sensor_On_Data[0]);

			printf("FL:%4ld,SL:%4ld,SR:%4ld,FR:%4ld,diffL:%4ld, diffR:%4ld error:%4ld\r\n",sensor_data.frontL,sensor_data.sideL, sensor_data.sideR, sensor_data.frontR,
 8008790:	4b14      	ldr	r3, [pc, #80]	; (80087e4 <Mode_Default+0x70>)
 8008792:	681e      	ldr	r6, [r3, #0]
 8008794:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <Mode_Default+0x70>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <Mode_Default+0x70>)
 800879c:	68d9      	ldr	r1, [r3, #12]
 800879e:	6039      	str	r1, [r7, #0]
 80087a0:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <Mode_Default+0x70>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a10      	ldr	r2, [pc, #64]	; (80087e8 <Mode_Default+0x74>)
 80087a6:	6892      	ldr	r2, [r2, #8]
 80087a8:	490f      	ldr	r1, [pc, #60]	; (80087e8 <Mode_Default+0x74>)
 80087aa:	68c9      	ldr	r1, [r1, #12]
				difference.sideL,difference.sideR,((sensor_data.sideL - base_data.sideL) - (sensor_data.sideR - base_data.sideR)));
 80087ac:	480d      	ldr	r0, [pc, #52]	; (80087e4 <Mode_Default+0x70>)
 80087ae:	6884      	ldr	r4, [r0, #8]
 80087b0:	480e      	ldr	r0, [pc, #56]	; (80087ec <Mode_Default+0x78>)
 80087b2:	6880      	ldr	r0, [r0, #8]
 80087b4:	1a24      	subs	r4, r4, r0
 80087b6:	480d      	ldr	r0, [pc, #52]	; (80087ec <Mode_Default+0x78>)
 80087b8:	68c5      	ldr	r5, [r0, #12]
 80087ba:	480a      	ldr	r0, [pc, #40]	; (80087e4 <Mode_Default+0x70>)
 80087bc:	68c0      	ldr	r0, [r0, #12]
 80087be:	1a28      	subs	r0, r5, r0
			printf("FL:%4ld,SL:%4ld,SR:%4ld,FR:%4ld,diffL:%4ld, diffR:%4ld error:%4ld\r\n",sensor_data.frontL,sensor_data.sideL, sensor_data.sideR, sensor_data.frontR,
 80087c0:	4420      	add	r0, r4
 80087c2:	9003      	str	r0, [sp, #12]
 80087c4:	9102      	str	r1, [sp, #8]
 80087c6:	9201      	str	r2, [sp, #4]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4631      	mov	r1, r6
 80087d0:	4807      	ldr	r0, [pc, #28]	; (80087f0 <Mode_Default+0x7c>)
 80087d2:	f002 f9cf 	bl	800ab74 <iprintf>
			HAL_Delay(50);
 80087d6:	2032      	movs	r0, #50	; 0x32
 80087d8:	f7f8 fbd8 	bl	8000f8c <HAL_Delay>
			printf("FL:%4ld,SL:%4ld,SR:%4ld,FR:%4ld,diffL:%4ld, diffR:%4ld error:%4ld\r\n",sensor_data.frontL,sensor_data.sideL, sensor_data.sideR, sensor_data.frontR,
 80087dc:	e7d8      	b.n	8008790 <Mode_Default+0x1c>
 80087de:	bf00      	nop
 80087e0:	20002584 	.word	0x20002584
 80087e4:	20000238 	.word	0x20000238
 80087e8:	200025a4 	.word	0x200025a4
 80087ec:	20002684 	.word	0x20002684
 80087f0:	0800cccc 	.word	0x0800cccc

080087f4 <search_init>:
//search_init
// 探索系の変数とマップの初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void search_init(void){
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0

  //====マウスフラグの初期化===
  MF.FLAGS = 0;         //フラグクリア
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <search_init+0x38>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	801a      	strh	r2, [r3, #0]

  //====探索系の変数の初期化====
  goal_x = GOAL_X;      //GOAL_Xはglobal.hにマクロ定義あり
 80087fe:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <search_init+0x3c>)
 8008800:	2207      	movs	r2, #7
 8008802:	701a      	strb	r2, [r3, #0]
  goal_y = GOAL_Y;      //GOAL_Yはglobal.hにマクロ定義あり
 8008804:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <search_init+0x40>)
 8008806:	2207      	movs	r2, #7
 8008808:	701a      	strb	r2, [r3, #0]
  map_Init();           //マップの初期化
 800880a:	f000 fa37 	bl	8008c7c <map_Init>
  mouse.x = 0;
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <search_init+0x44>)
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
  mouse.y = 0;          //現在地の初期化
 8008814:	4b08      	ldr	r3, [pc, #32]	; (8008838 <search_init+0x44>)
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
  mouse.dir = 0;        //マウスの向きの初期化
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <search_init+0x44>)
 800881c:	2200      	movs	r2, #0
 800881e:	709a      	strb	r2, [r3, #2]
  known_counter = 0;
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <search_init+0x48>)
 8008822:	2200      	movs	r2, #0
 8008824:	801a      	strh	r2, [r3, #0]
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200029dc 	.word	0x200029dc
 8008830:	2000265c 	.word	0x2000265c
 8008834:	20002564 	.word	0x20002564
 8008838:	20002710 	.word	0x20002710
 800883c:	200022ac 	.word	0x200022ac

08008840 <Maze_Search_Slalom>:


/*-----------------------------------------------------------
		足立法探索走行（スラローム連続走行）
-----------------------------------------------------------*/
void Maze_Search_Slalom(motion *trans,motion *trans_known, motion *rot){
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]

	if(MF.FLAG.SCND){
 800884c:	4ba1      	ldr	r3, [pc, #644]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <Maze_Search_Slalom+0x1e>
		load_map_from_eeprom();//2次走行ならマップを読み込む
 800885a:	f000 fe13 	bl	8009484 <load_map_from_eeprom>
	}

	//====スタート位置壁情報取得====
										//壁情報の初期化, 後壁はなくなる
	if(!MF.FLAG.SCND){
 800885e:	4b9d      	ldr	r3, [pc, #628]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <Maze_Search_Slalom+0x42>
	get_wall_info();										//壁情報の初期化, 後壁はなくなる
 800886c:	f000 ff6a 	bl	8009744 <get_wall_info>
	wall_info &= ~0x88;										//前壁は存在するはずがないので削除する
 8008870:	4b99      	ldr	r3, [pc, #612]	; (8008ad8 <Maze_Search_Slalom+0x298>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b97      	ldr	r3, [pc, #604]	; (8008ad8 <Maze_Search_Slalom+0x298>)
 800887c:	701a      	strb	r2, [r3, #0]
	write_map();											//壁情報を地図に記入
 800887e:	f000 fa69 	bl	8008d54 <write_map>
	}
	//====前に壁が無い想定で問答無用で前進====

	printf("Start Maze Run!\r\n");
 8008882:	4896      	ldr	r0, [pc, #600]	; (8008adc <Maze_Search_Slalom+0x29c>)
 8008884:	f002 f9ea 	bl	800ac5c <puts>
	Adjust_Forward( trans->acceleration, trans->velocity );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	edd3 7a02 	vldr	s15, [r3, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	ed93 7a01 	vldr	s14, [r3, #4]
 8008894:	eef0 0a47 	vmov.f32	s1, s14
 8008898:	eeb0 0a67 	vmov.f32	s0, s15
 800889c:	f7fd fade 	bl	8005e5c <Adjust_Forward>
	adv_pos();
 80088a0:	f000 f994 	bl	8008bcc <adv_pos>
	if(!MF.FLAG.SCND){
 80088a4:	4b8b      	ldr	r3, [pc, #556]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <Maze_Search_Slalom+0x76>
	get_wall_info();
 80088b2:	f000 ff47 	bl	8009744 <get_wall_info>
	}
	//====歩数マップ・経路作成====
	write_map();											//壁情報を地図に記入
 80088b6:	f000 fa4d 	bl	8008d54 <write_map>
	r_cnt = 0;												//経路カウンタの初期化
 80088ba:	4b89      	ldr	r3, [pc, #548]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 80088bc:	2200      	movs	r2, #0
 80088be:	701a      	strb	r2, [r3, #0]
	ketsuate_cnt = 0;
 80088c0:	4b88      	ldr	r3, [pc, #544]	; (8008ae4 <Maze_Search_Slalom+0x2a4>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	801a      	strh	r2, [r3, #0]
	make_smap();											//歩数マップ作成
 80088c6:	f000 fb85 	bl	8008fd4 <make_smap>
	make_route();											//最短経路探索（route配列に動作が格納される）
 80088ca:	f000 fc7d 	bl	80091c8 <make_route>


	//====探索走行====
	do{
		//----進行----
		switch(route[r_cnt++]){								//route配列によって進行を決定。経路カウンタを進める
 80088ce:	4b84      	ldr	r3, [pc, #528]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	b2d1      	uxtb	r1, r2
 80088d6:	4a82      	ldr	r2, [pc, #520]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 80088d8:	7011      	strb	r1, [r2, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	4b82      	ldr	r3, [pc, #520]	; (8008ae8 <Maze_Search_Slalom+0x2a8>)
 80088de:	5c9b      	ldrb	r3, [r3, r2]
 80088e0:	2b22      	cmp	r3, #34	; 0x22
 80088e2:	f000 8097 	beq.w	8008a14 <Maze_Search_Slalom+0x1d4>
 80088e6:	2b22      	cmp	r3, #34	; 0x22
 80088e8:	dc03      	bgt.n	80088f2 <Maze_Search_Slalom+0xb2>
 80088ea:	2b11      	cmp	r3, #17
 80088ec:	f000 80d3 	beq.w	8008a96 <Maze_Search_Slalom+0x256>
 80088f0:	e105      	b.n	8008afe <Maze_Search_Slalom+0x2be>
 80088f2:	2b44      	cmp	r3, #68	; 0x44
 80088f4:	d072      	beq.n	80089dc <Maze_Search_Slalom+0x19c>
 80088f6:	2b88      	cmp	r3, #136	; 0x88
 80088f8:	f040 8101 	bne.w	8008afe <Maze_Search_Slalom+0x2be>
			//----前進----
			case 0x88:
				if(MF.FLAG.KNOWN == 1)
 80088fc:	4b75      	ldr	r3, [pc, #468]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d157      	bne.n	80089ba <Maze_Search_Slalom+0x17a>
			{
				if(((route[r_cnt-1] & route[r_cnt]) == 0x88) && (route[r_cnt] != 0xff) &&(known_counter == 0) ){
 800890a:	4b75      	ldr	r3, [pc, #468]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	3b01      	subs	r3, #1
 8008910:	4a75      	ldr	r2, [pc, #468]	; (8008ae8 <Maze_Search_Slalom+0x2a8>)
 8008912:	5cd2      	ldrb	r2, [r2, r3]
 8008914:	4b72      	ldr	r3, [pc, #456]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	4619      	mov	r1, r3
 800891a:	4b73      	ldr	r3, [pc, #460]	; (8008ae8 <Maze_Search_Slalom+0x2a8>)
 800891c:	5c5b      	ldrb	r3, [r3, r1]
 800891e:	4013      	ands	r3, r2
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b88      	cmp	r3, #136	; 0x88
 8008924:	d11f      	bne.n	8008966 <Maze_Search_Slalom+0x126>
 8008926:	4b6e      	ldr	r3, [pc, #440]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	4b6e      	ldr	r3, [pc, #440]	; (8008ae8 <Maze_Search_Slalom+0x2a8>)
 800892e:	5c9b      	ldrb	r3, [r3, r2]
 8008930:	2bff      	cmp	r3, #255	; 0xff
 8008932:	d018      	beq.n	8008966 <Maze_Search_Slalom+0x126>
 8008934:	4b6d      	ldr	r3, [pc, #436]	; (8008aec <Maze_Search_Slalom+0x2ac>)
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d114      	bne.n	8008966 <Maze_Search_Slalom+0x126>
						//printf("Acc\r\n");
						Accel_Known_Section(trans_known->acceleration,trans->velocity,trans_known->velocity);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	ed93 7a01 	vldr	s14, [r3, #4]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	edd3 6a01 	vldr	s13, [r3, #4]
 800894e:	eeb0 1a66 	vmov.f32	s2, s13
 8008952:	eef0 0a47 	vmov.f32	s1, s14
 8008956:	eeb0 0a67 	vmov.f32	s0, s15
 800895a:	f7fd fabd 	bl	8005ed8 <Accel_Known_Section>
						known_counter = 1;
 800895e:	4b63      	ldr	r3, [pc, #396]	; (8008aec <Maze_Search_Slalom+0x2ac>)
 8008960:	2201      	movs	r2, #1
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e030      	b.n	80089c8 <Maze_Search_Slalom+0x188>
					}
				else if((route[r_cnt] & 0x55) && (known_counter == 1)){
 8008966:	4b5e      	ldr	r3, [pc, #376]	; (8008ae0 <Maze_Search_Slalom+0x2a0>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	4b5e      	ldr	r3, [pc, #376]	; (8008ae8 <Maze_Search_Slalom+0x2a8>)
 800896e:	5c9b      	ldrb	r3, [r3, r2]
 8008970:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8008974:	2b00      	cmp	r3, #0
 8008976:	d018      	beq.n	80089aa <Maze_Search_Slalom+0x16a>
 8008978:	4b5c      	ldr	r3, [pc, #368]	; (8008aec <Maze_Search_Slalom+0x2ac>)
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d114      	bne.n	80089aa <Maze_Search_Slalom+0x16a>
						//printf("Dec\r\n");
						Decel_Known_Section(trans_known->acceleration,trans_known->velocity,trans->velocity);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	edd3 7a02 	vldr	s15, [r3, #8]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	ed93 7a01 	vldr	s14, [r3, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008992:	eeb0 1a66 	vmov.f32	s2, s13
 8008996:	eef0 0a47 	vmov.f32	s1, s14
 800899a:	eeb0 0a67 	vmov.f32	s0, s15
 800899e:	f7fd fabf 	bl	8005f20 <Decel_Known_Section>
						known_counter = 0;
 80089a2:	4b52      	ldr	r3, [pc, #328]	; (8008aec <Maze_Search_Slalom+0x2ac>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e00e      	b.n	80089c8 <Maze_Search_Slalom+0x188>
					}else{
						//printf("FastF\r\n");
						Forward_One_Section(trans_known->velocity);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80089b0:	eeb0 0a67 	vmov.f32	s0, s15
 80089b4:	f7fd fa30 	bl	8005e18 <Forward_One_Section>
 80089b8:	e006      	b.n	80089c8 <Maze_Search_Slalom+0x188>
				}
			}	else {
						//printf("Forward\r\n");
						Forward_One_Section(trans->velocity);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80089c0:	eeb0 0a67 	vmov.f32	s0, s15
 80089c4:	f7fd fa28 	bl	8005e18 <Forward_One_Section>
				}

				if(!MF.FLAG.SCND)	{
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d17b      	bne.n	8008ace <Maze_Search_Slalom+0x28e>
					get_wall_info();
 80089d6:	f000 feb5 	bl	8009744 <get_wall_info>
				}

				break;
 80089da:	e078      	b.n	8008ace <Maze_Search_Slalom+0x28e>

			//----右折----
			case 0x44:
				Buzzer_Scale(2000, 100);
 80089dc:	2164      	movs	r1, #100	; 0x64
 80089de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80089e2:	f001 fbd9 	bl	800a198 <Buzzer_Scale>
				printf("turnR\r\n");
 80089e6:	4842      	ldr	r0, [pc, #264]	; (8008af0 <Maze_Search_Slalom+0x2b0>)
 80089e8:	f002 f938 	bl	800ac5c <puts>
				Slalom_R(rot->velocity);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80089f2:	eeb0 0a67 	vmov.f32	s0, s15
 80089f6:	f7fd fb91 	bl	800611c <Slalom_R>
				if(!MF.FLAG.SCND){
 80089fa:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <Maze_Search_Slalom+0x1cc>
				get_wall_info();
 8008a08:	f000 fe9c 	bl	8009744 <get_wall_info>
				}
				turn_dir(DIR_TURN_R90);
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f000 fac9 	bl	8008fa4 <turn_dir>

				break;
 8008a12:	e074      	b.n	8008afe <Maze_Search_Slalom+0x2be>

			//----180回転----
			case 0x22:
				printf("turn180\r\n");
 8008a14:	4837      	ldr	r0, [pc, #220]	; (8008af4 <Maze_Search_Slalom+0x2b4>)
 8008a16:	f002 f921 	bl	800ac5c <puts>
				Buzzer_Scale(5000, 100);
 8008a1a:	2164      	movs	r1, #100	; 0x64
 8008a1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008a20:	f001 fbba 	bl	800a198 <Buzzer_Scale>
				Decel_Half_Section(trans->acceleration,trans->velocity);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a30:	eef0 0a47 	vmov.f32	s1, s14
 8008a34:	eeb0 0a67 	vmov.f32	s0, s15
 8008a38:	f7fd fa9c 	bl	8005f74 <Decel_Half_Section>

				turn_dir(DIR_TURN_180);
 8008a3c:	2002      	movs	r0, #2
 8008a3e:	f000 fab1 	bl	8008fa4 <turn_dir>

				if(wall_info & 0x88){
 8008a42:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <Maze_Search_Slalom+0x298>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00d      	beq.n	8008a6a <Maze_Search_Slalom+0x22a>
						PivotL180(rot->acceleration,rot->velocity);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a5a:	eef0 0a47 	vmov.f32	s1, s14
 8008a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a62:	f7fd faf3 	bl	800604c <PivotL180>
						Adjust_Back();
 8008a66:	f7fd fa1d 	bl	8005ea4 <Adjust_Back>
				}

//				Accel_Half_Section(trans->acceleration, trans->velocity);
				Adjust_Forward( trans->acceleration, trans->velocity );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a76:	eef0 0a47 	vmov.f32	s1, s14
 8008a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7e:	f7fd f9ed 	bl	8005e5c <Adjust_Forward>
				if(!MF.FLAG.SCND){
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d135      	bne.n	8008afc <Maze_Search_Slalom+0x2bc>
				get_wall_info();
 8008a90:	f000 fe58 	bl	8009744 <get_wall_info>
				}

				break;
 8008a94:	e032      	b.n	8008afc <Maze_Search_Slalom+0x2bc>

			//----左折----
			case 0x11:
				Buzzer_Scale(1500, 100);
 8008a96:	2164      	movs	r1, #100	; 0x64
 8008a98:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008a9c:	f001 fb7c 	bl	800a198 <Buzzer_Scale>

				printf("turnL\r\n");
 8008aa0:	4815      	ldr	r0, [pc, #84]	; (8008af8 <Maze_Search_Slalom+0x2b8>)
 8008aa2:	f002 f8db 	bl	800ac5c <puts>
				Slalom_L(rot->velocity);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8008aac:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab0:	f7fd faec 	bl	800608c <Slalom_L>
				if(!MF.FLAG.SCND){
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <Maze_Search_Slalom+0x294>)
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <Maze_Search_Slalom+0x286>
				get_wall_info();
 8008ac2:	f000 fe3f 	bl	8009744 <get_wall_info>
				}
				turn_dir(DIR_TURN_L90);
 8008ac6:	20ff      	movs	r0, #255	; 0xff
 8008ac8:	f000 fa6c 	bl	8008fa4 <turn_dir>

				break;
 8008acc:	e017      	b.n	8008afe <Maze_Search_Slalom+0x2be>
				break;
 8008ace:	bf00      	nop
 8008ad0:	e015      	b.n	8008afe <Maze_Search_Slalom+0x2be>
 8008ad2:	bf00      	nop
 8008ad4:	200029dc 	.word	0x200029dc
 8008ad8:	2000231c 	.word	0x2000231c
 8008adc:	0800cd10 	.word	0x0800cd10
 8008ae0:	20002a01 	.word	0x20002a01
 8008ae4:	200022ae 	.word	0x200022ae
 8008ae8:	200027c4 	.word	0x200027c4
 8008aec:	200022ac 	.word	0x200022ac
 8008af0:	0800cd24 	.word	0x0800cd24
 8008af4:	0800cd2c 	.word	0x0800cd2c
 8008af8:	0800cd38 	.word	0x0800cd38
				break;
 8008afc:	bf00      	nop
		}
		adv_pos();
 8008afe:	f000 f865 	bl	8008bcc <adv_pos>
		if(!MF.FLAG.SCND){
 8008b02:	4b2b      	ldr	r3, [pc, #172]	; (8008bb0 <Maze_Search_Slalom+0x370>)
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <Maze_Search_Slalom+0x2d4>
		conf_route();
 8008b10:	f000 f896 	bl	8008c40 <conf_route>
		}

	}while((mouse.x != goal_x) || (mouse.y != goal_y));
 8008b14:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <Maze_Search_Slalom+0x374>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	4b27      	ldr	r3, [pc, #156]	; (8008bb8 <Maze_Search_Slalom+0x378>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	f47f aed5 	bne.w	80088ce <Maze_Search_Slalom+0x8e>
 8008b24:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <Maze_Search_Slalom+0x374>)
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	4b24      	ldr	r3, [pc, #144]	; (8008bbc <Maze_Search_Slalom+0x37c>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	f47f aecd 	bne.w	80088ce <Maze_Search_Slalom+0x8e>

	Decel_Half_Section(trans->acceleration,trans->velocity);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b40:	eef0 0a47 	vmov.f32	s1, s14
 8008b44:	eeb0 0a67 	vmov.f32	s0, s15
 8008b48:	f7fd fa14 	bl	8005f74 <Decel_Half_Section>

	printf("Decel\r\n");
 8008b4c:	481c      	ldr	r0, [pc, #112]	; (8008bc0 <Maze_Search_Slalom+0x380>)
 8008b4e:	f002 f885 	bl	800ac5c <puts>
	Motor_Drive_Stop();
 8008b52:	f7fd fbc1 	bl	80062d8 <Motor_Drive_Stop>
	printf("Goal\r\n");
 8008b56:	481b      	ldr	r0, [pc, #108]	; (8008bc4 <Maze_Search_Slalom+0x384>)
 8008b58:	f002 f880 	bl	800ac5c <puts>

	HAL_Delay(2000);
 8008b5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008b60:	f7f8 fa14 	bl	8000f8c <HAL_Delay>

	PivotL180(rot->acceleration,rot->velocity);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b70:	eef0 0a47 	vmov.f32	s1, s14
 8008b74:	eeb0 0a67 	vmov.f32	s0, s15
 8008b78:	f7fd fa68 	bl	800604c <PivotL180>
	turn_dir(DIR_TURN_180);
 8008b7c:	2002      	movs	r0, #2
 8008b7e:	f000 fa11 	bl	8008fa4 <turn_dir>

	if(wall_info & 0x88){
 8008b82:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <Maze_Search_Slalom+0x388>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <Maze_Search_Slalom+0x352>
		Adjust_Back();
 8008b8e:	f7fd f989 	bl	8005ea4 <Adjust_Back>
	}
	Motor_Drive_Stop();
 8008b92:	f7fd fba1 	bl	80062d8 <Motor_Drive_Stop>

	if(!MF.FLAG.SCND){
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <Maze_Search_Slalom+0x370>)
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <Maze_Search_Slalom+0x368>
		store_map_in_eeprom();
 8008ba4:	f000 fc3e 	bl	8009424 <store_map_in_eeprom>
	}

}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	200029dc 	.word	0x200029dc
 8008bb4:	20002710 	.word	0x20002710
 8008bb8:	2000265c 	.word	0x2000265c
 8008bbc:	20002564 	.word	0x20002564
 8008bc0:	0800cd40 	.word	0x0800cd40
 8008bc4:	0800cd48 	.word	0x0800cd48
 8008bc8:	2000231c 	.word	0x2000231c

08008bcc <adv_pos>:
//adv_pos
// マイクロマウス内部位置情報で前進させる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos(){
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0

  switch(mouse.dir){                //マイクロマウスが現在向いている方向で判定
 8008bd0:	4b1a      	ldr	r3, [pc, #104]	; (8008c3c <adv_pos+0x70>)
 8008bd2:	789b      	ldrb	r3, [r3, #2]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d82a      	bhi.n	8008c30 <adv_pos+0x64>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <adv_pos+0x14>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008c01 	.word	0x08008c01
 8008be8:	08008c11 	.word	0x08008c11
 8008bec:	08008c21 	.word	0x08008c21
  case 0x00:                        //北方向に向いている場合
    mouse.y++;                      //Y座標をインクリメント
 8008bf0:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <adv_pos+0x70>)
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <adv_pos+0x70>)
 8008bfc:	705a      	strb	r2, [r3, #1]
    break;
 8008bfe:	e017      	b.n	8008c30 <adv_pos+0x64>
  case 0x01:                        //東方向に向いている場合
    mouse.x++;                      //X座標をインクリメント
 8008c00:	4b0e      	ldr	r3, [pc, #56]	; (8008c3c <adv_pos+0x70>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	3301      	adds	r3, #1
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <adv_pos+0x70>)
 8008c0c:	701a      	strb	r2, [r3, #0]
    break;
 8008c0e:	e00f      	b.n	8008c30 <adv_pos+0x64>
  case 0x02:                        //南方向に向いている場合
    mouse.y--;                      //Y座標をデクリメント
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <adv_pos+0x70>)
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <adv_pos+0x70>)
 8008c1c:	705a      	strb	r2, [r3, #1]
    break;
 8008c1e:	e007      	b.n	8008c30 <adv_pos+0x64>
  case 0x03:                        //西方向に向いている場合
    mouse.x--;                      //X座標をデクリメント
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <adv_pos+0x70>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <adv_pos+0x70>)
 8008c2c:	701a      	strb	r2, [r3, #0]
    break;
 8008c2e:	bf00      	nop
  }
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20002710 	.word	0x20002710

08008c40 <conf_route>:
//conf_route
// 進路を判定する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route(){
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0

  //----壁情報書き込み----
  write_map();
 8008c44:	f000 f886 	bl	8008d54 <write_map>

  //----最短経路上に壁があれば進路変更----
  if(wall_info & route[r_cnt]){
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <conf_route+0x30>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <conf_route+0x34>)
 8008c50:	5c9a      	ldrb	r2, [r3, r2]
 8008c52:	4b09      	ldr	r3, [pc, #36]	; (8008c78 <conf_route+0x38>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d006      	beq.n	8008c6c <conf_route+0x2c>
    make_smap();                    //歩数マップを更新
 8008c5e:	f000 f9b9 	bl	8008fd4 <make_smap>
    make_route();                   //最短経路を更新
 8008c62:	f000 fab1 	bl	80091c8 <make_route>
    r_cnt = 0;                      //経路カウンタを0に
 8008c66:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <conf_route+0x30>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20002a01 	.word	0x20002a01
 8008c74:	200027c4 	.word	0x200027c4
 8008c78:	2000231c 	.word	0x2000231c

08008c7c <map_Init>:
//map_Init
// マップ格納配列map[][]の初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init(){
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
  //====変数宣言====
  uint8_t x, y;                     //for文用変数

  //====初期化開始====
  //マップのクリア
  for(y = 0; y < 16; y++){          //各Y座標で実行
 8008c82:	2300      	movs	r3, #0
 8008c84:	71bb      	strb	r3, [r7, #6]
 8008c86:	e013      	b.n	8008cb0 <map_Init+0x34>
    for(x = 0; x < 16; x++){        //各X座標で実行
 8008c88:	2300      	movs	r3, #0
 8008c8a:	71fb      	strb	r3, [r7, #7]
 8008c8c:	e00a      	b.n	8008ca4 <map_Init+0x28>
      map[y][x] = 0xf0;             //上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
 8008c8e:	79ba      	ldrb	r2, [r7, #6]
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	492f      	ldr	r1, [pc, #188]	; (8008d50 <map_Init+0xd4>)
 8008c94:	0112      	lsls	r2, r2, #4
 8008c96:	440a      	add	r2, r1
 8008c98:	4413      	add	r3, r2
 8008c9a:	22f0      	movs	r2, #240	; 0xf0
 8008c9c:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < 16; x++){        //各X座標で実行
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	71fb      	strb	r3, [r7, #7]
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d9f1      	bls.n	8008c8e <map_Init+0x12>
  for(y = 0; y < 16; y++){          //各Y座標で実行
 8008caa:	79bb      	ldrb	r3, [r7, #6]
 8008cac:	3301      	adds	r3, #1
 8008cae:	71bb      	strb	r3, [r7, #6]
 8008cb0:	79bb      	ldrb	r3, [r7, #6]
 8008cb2:	2b0f      	cmp	r3, #15
 8008cb4:	d9e8      	bls.n	8008c88 <map_Init+0xc>
    }
  }

  //確定壁の配置
  for(y = 0; y < 16; y++){          //各Y座標で実行
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	71bb      	strb	r3, [r7, #6]
 8008cba:	e020      	b.n	8008cfe <map_Init+0x82>
    map[y][0] |= 0xf1;              //最西に壁を配置
 8008cbc:	79bb      	ldrb	r3, [r7, #6]
 8008cbe:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <map_Init+0xd4>)
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	4413      	add	r3, r2
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	79bb      	ldrb	r3, [r7, #6]
 8008cc8:	f062 020e 	orn	r2, r2, #14
 8008ccc:	b2d1      	uxtb	r1, r2
 8008cce:	4a20      	ldr	r2, [pc, #128]	; (8008d50 <map_Init+0xd4>)
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	4413      	add	r3, r2
 8008cd4:	460a      	mov	r2, r1
 8008cd6:	701a      	strb	r2, [r3, #0]
    map[y][15] |= 0xf4;             //最東に壁を配置
 8008cd8:	79bb      	ldrb	r3, [r7, #6]
 8008cda:	4a1d      	ldr	r2, [pc, #116]	; (8008d50 <map_Init+0xd4>)
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	4413      	add	r3, r2
 8008ce0:	330f      	adds	r3, #15
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	79bb      	ldrb	r3, [r7, #6]
 8008ce6:	f062 020b 	orn	r2, r2, #11
 8008cea:	b2d1      	uxtb	r1, r2
 8008cec:	4a18      	ldr	r2, [pc, #96]	; (8008d50 <map_Init+0xd4>)
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	4413      	add	r3, r2
 8008cf2:	330f      	adds	r3, #15
 8008cf4:	460a      	mov	r2, r1
 8008cf6:	701a      	strb	r2, [r3, #0]
  for(y = 0; y < 16; y++){          //各Y座標で実行
 8008cf8:	79bb      	ldrb	r3, [r7, #6]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	71bb      	strb	r3, [r7, #6]
 8008cfe:	79bb      	ldrb	r3, [r7, #6]
 8008d00:	2b0f      	cmp	r3, #15
 8008d02:	d9db      	bls.n	8008cbc <map_Init+0x40>
  }
  for(x = 0; x < 16; x++){          //各X座標で実行
 8008d04:	2300      	movs	r3, #0
 8008d06:	71fb      	strb	r3, [r7, #7]
 8008d08:	e019      	b.n	8008d3e <map_Init+0xc2>
    map[0][x] |= 0xf2;              //最南に壁を配置
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	4a10      	ldr	r2, [pc, #64]	; (8008d50 <map_Init+0xd4>)
 8008d0e:	5cd2      	ldrb	r2, [r2, r3]
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	f062 020d 	orn	r2, r2, #13
 8008d16:	b2d1      	uxtb	r1, r2
 8008d18:	4a0d      	ldr	r2, [pc, #52]	; (8008d50 <map_Init+0xd4>)
 8008d1a:	54d1      	strb	r1, [r2, r3]
    map[15][x] |= 0xf8;             //最北に壁を配置
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	4a0c      	ldr	r2, [pc, #48]	; (8008d50 <map_Init+0xd4>)
 8008d20:	4413      	add	r3, r2
 8008d22:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	f062 0207 	orn	r2, r2, #7
 8008d2c:	b2d1      	uxtb	r1, r2
 8008d2e:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <map_Init+0xd4>)
 8008d30:	4413      	add	r3, r2
 8008d32:	460a      	mov	r2, r1
 8008d34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for(x = 0; x < 16; x++){          //各X座標で実行
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	71fb      	strb	r3, [r7, #7]
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2b0f      	cmp	r3, #15
 8008d42:	d9e2      	bls.n	8008d0a <map_Init+0x8e>
  }
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	20000254 	.word	0x20000254

08008d54 <write_map>:
//write_map
// マップデータを書き込む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map(){
 8008d54:	b490      	push	{r4, r7}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0

  //====変数宣言====
  uint8_t m_temp;                               //向きを補正した壁情報

  //====壁情報の補正格納====
  m_temp = (wall_info >> mouse.dir) & 0x0f;     //センサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
 8008d5a:	4b8f      	ldr	r3, [pc, #572]	; (8008f98 <write_map+0x244>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4b8e      	ldr	r3, [pc, #568]	; (8008f9c <write_map+0x248>)
 8008d62:	789b      	ldrb	r3, [r3, #2]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	fa42 f303 	asr.w	r3, r2, r3
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	71fb      	strb	r3, [r7, #7]
  m_temp |= (m_temp << 4);                      //上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	b25a      	sxtb	r2, r3
 8008d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b25b      	sxtb	r3, r3
 8008d80:	71fb      	strb	r3, [r7, #7]

  //====データの書き込み====
  map[mouse.y][mouse.x] = m_temp;               //現在地に壁情報書き込み
 8008d82:	4b86      	ldr	r3, [pc, #536]	; (8008f9c <write_map+0x248>)
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	4618      	mov	r0, r3
 8008d8a:	4b84      	ldr	r3, [pc, #528]	; (8008f9c <write_map+0x248>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	4a83      	ldr	r2, [pc, #524]	; (8008fa0 <write_map+0x24c>)
 8008d94:	0103      	lsls	r3, r0, #4
 8008d96:	4413      	add	r3, r2
 8008d98:	440b      	add	r3, r1
 8008d9a:	79fa      	ldrb	r2, [r7, #7]
 8008d9c:	701a      	strb	r2, [r3, #0]
  //----周辺に書き込む----
  //北側について
  if(mouse.y != 15){                            //現在最北端でないとき
 8008d9e:	4b7f      	ldr	r3, [pc, #508]	; (8008f9c <write_map+0x248>)
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b0f      	cmp	r3, #15
 8008da6:	d039      	beq.n	8008e1c <write_map+0xc8>
    if(m_temp & 0x88){                          //北壁がある場合
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d01a      	beq.n	8008de8 <write_map+0x94>
      map[mouse.y + 1][mouse.x] |= 0x22;        //北側の区画から見て南壁ありを書き込む
 8008db2:	4b7a      	ldr	r3, [pc, #488]	; (8008f9c <write_map+0x248>)
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	b2d8      	uxtb	r0, r3
 8008db8:	4603      	mov	r3, r0
 8008dba:	3301      	adds	r3, #1
 8008dbc:	4a77      	ldr	r2, [pc, #476]	; (8008f9c <write_map+0x248>)
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	b2d1      	uxtb	r1, r2
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	4a76      	ldr	r2, [pc, #472]	; (8008fa0 <write_map+0x24c>)
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	4413      	add	r3, r2
 8008dca:	4423      	add	r3, r4
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	4603      	mov	r3, r0
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8008dd8:	b2d1      	uxtb	r1, r2
 8008dda:	4a71      	ldr	r2, [pc, #452]	; (8008fa0 <write_map+0x24c>)
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	4413      	add	r3, r2
 8008de0:	4403      	add	r3, r0
 8008de2:	460a      	mov	r2, r1
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	e019      	b.n	8008e1c <write_map+0xc8>
    }else{                                      //北壁がない場合
      map[mouse.y + 1][mouse.x] &= 0xDD;        //北側の区画から見て南壁なしを書き込む
 8008de8:	4b6c      	ldr	r3, [pc, #432]	; (8008f9c <write_map+0x248>)
 8008dea:	785b      	ldrb	r3, [r3, #1]
 8008dec:	b2d8      	uxtb	r0, r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a6a      	ldr	r2, [pc, #424]	; (8008f9c <write_map+0x248>)
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	b2d1      	uxtb	r1, r2
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4a69      	ldr	r2, [pc, #420]	; (8008fa0 <write_map+0x24c>)
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	4413      	add	r3, r2
 8008e00:	4423      	add	r3, r4
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	4603      	mov	r3, r0
 8008e06:	3301      	adds	r3, #1
 8008e08:	4608      	mov	r0, r1
 8008e0a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008e0e:	b2d1      	uxtb	r1, r2
 8008e10:	4a63      	ldr	r2, [pc, #396]	; (8008fa0 <write_map+0x24c>)
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	4413      	add	r3, r2
 8008e16:	4403      	add	r3, r0
 8008e18:	460a      	mov	r2, r1
 8008e1a:	701a      	strb	r2, [r3, #0]
    }
  }
  //東側について
  if(mouse.x != 15){                            //現在最東端でないとき
 8008e1c:	4b5f      	ldr	r3, [pc, #380]	; (8008f9c <write_map+0x248>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	d037      	beq.n	8008e96 <write_map+0x142>
    if(m_temp & 0x44){                          //東壁がある場合
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d019      	beq.n	8008e64 <write_map+0x110>
      map[mouse.y][mouse.x + 1] |= 0x11;        //東側の区画から見て西壁ありを書き込む
 8008e30:	4b5a      	ldr	r3, [pc, #360]	; (8008f9c <write_map+0x248>)
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	b2dc      	uxtb	r4, r3
 8008e36:	4622      	mov	r2, r4
 8008e38:	4b58      	ldr	r3, [pc, #352]	; (8008f9c <write_map+0x248>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b2d8      	uxtb	r0, r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	3301      	adds	r3, #1
 8008e42:	4957      	ldr	r1, [pc, #348]	; (8008fa0 <write_map+0x24c>)
 8008e44:	0112      	lsls	r2, r2, #4
 8008e46:	440a      	add	r2, r1
 8008e48:	4413      	add	r3, r2
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	3301      	adds	r3, #1
 8008e50:	f042 0211 	orr.w	r2, r2, #17
 8008e54:	b2d0      	uxtb	r0, r2
 8008e56:	4952      	ldr	r1, [pc, #328]	; (8008fa0 <write_map+0x24c>)
 8008e58:	0122      	lsls	r2, r4, #4
 8008e5a:	440a      	add	r2, r1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4602      	mov	r2, r0
 8008e60:	701a      	strb	r2, [r3, #0]
 8008e62:	e018      	b.n	8008e96 <write_map+0x142>
    }else{                                      //北壁がない場合
      map[mouse.y][mouse.x + 1] &= 0xEE;        //東側の区画から見て西壁なしを書き込む
 8008e64:	4b4d      	ldr	r3, [pc, #308]	; (8008f9c <write_map+0x248>)
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	b2dc      	uxtb	r4, r3
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	4b4b      	ldr	r3, [pc, #300]	; (8008f9c <write_map+0x248>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b2d8      	uxtb	r0, r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	3301      	adds	r3, #1
 8008e76:	494a      	ldr	r1, [pc, #296]	; (8008fa0 <write_map+0x24c>)
 8008e78:	0112      	lsls	r2, r2, #4
 8008e7a:	440a      	add	r2, r1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	4603      	mov	r3, r0
 8008e82:	3301      	adds	r3, #1
 8008e84:	f022 0211 	bic.w	r2, r2, #17
 8008e88:	b2d0      	uxtb	r0, r2
 8008e8a:	4945      	ldr	r1, [pc, #276]	; (8008fa0 <write_map+0x24c>)
 8008e8c:	0122      	lsls	r2, r4, #4
 8008e8e:	440a      	add	r2, r1
 8008e90:	4413      	add	r3, r2
 8008e92:	4602      	mov	r2, r0
 8008e94:	701a      	strb	r2, [r3, #0]
    }
  }
  //南壁について
  if(mouse.y != 0){                             //現在最南端でないとき
 8008e96:	4b41      	ldr	r3, [pc, #260]	; (8008f9c <write_map+0x248>)
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d039      	beq.n	8008f14 <write_map+0x1c0>
    if(m_temp & 0x22){                          //南壁がある場合
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01a      	beq.n	8008ee0 <write_map+0x18c>
      map[mouse.y - 1][mouse.x] |= 0x88;        //南側の区画から見て北壁ありを書き込む
 8008eaa:	4b3c      	ldr	r3, [pc, #240]	; (8008f9c <write_map+0x248>)
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	b2d8      	uxtb	r0, r3
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	4a39      	ldr	r2, [pc, #228]	; (8008f9c <write_map+0x248>)
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	b2d1      	uxtb	r1, r2
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4a38      	ldr	r2, [pc, #224]	; (8008fa0 <write_map+0x24c>)
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4423      	add	r3, r4
 8008ec4:	781a      	ldrb	r2, [r3, #0]
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	4608      	mov	r0, r1
 8008ecc:	f062 0277 	orn	r2, r2, #119	; 0x77
 8008ed0:	b2d1      	uxtb	r1, r2
 8008ed2:	4a33      	ldr	r2, [pc, #204]	; (8008fa0 <write_map+0x24c>)
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	4413      	add	r3, r2
 8008ed8:	4403      	add	r3, r0
 8008eda:	460a      	mov	r2, r1
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e019      	b.n	8008f14 <write_map+0x1c0>
    }else{                                      //南壁がない場合
      map[mouse.y - 1][mouse.x] &= 0x77;        //南側の区画から見て北壁なしを書き込む
 8008ee0:	4b2e      	ldr	r3, [pc, #184]	; (8008f9c <write_map+0x248>)
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	b2d8      	uxtb	r0, r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	4a2c      	ldr	r2, [pc, #176]	; (8008f9c <write_map+0x248>)
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	b2d1      	uxtb	r1, r2
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	4a2b      	ldr	r2, [pc, #172]	; (8008fa0 <write_map+0x24c>)
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	4413      	add	r3, r2
 8008ef8:	4423      	add	r3, r4
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	4603      	mov	r3, r0
 8008efe:	3b01      	subs	r3, #1
 8008f00:	4608      	mov	r0, r1
 8008f02:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8008f06:	b2d1      	uxtb	r1, r2
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <write_map+0x24c>)
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	4413      	add	r3, r2
 8008f0e:	4403      	add	r3, r0
 8008f10:	460a      	mov	r2, r1
 8008f12:	701a      	strb	r2, [r3, #0]
    }
  }
  //西側について
  if(mouse.x != 0){                             //現在最西端でないとき
 8008f14:	4b21      	ldr	r3, [pc, #132]	; (8008f9c <write_map+0x248>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d037      	beq.n	8008f8e <write_map+0x23a>
    if(m_temp & 0x11){                          //西壁がある場合
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	f003 0311 	and.w	r3, r3, #17
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d019      	beq.n	8008f5c <write_map+0x208>
      map[mouse.y][mouse.x - 1] |= 0x44;        //西側の区画から見て東壁ありを書き込む
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <write_map+0x248>)
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	b2dc      	uxtb	r4, r3
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4b1a      	ldr	r3, [pc, #104]	; (8008f9c <write_map+0x248>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b2d8      	uxtb	r0, r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	4919      	ldr	r1, [pc, #100]	; (8008fa0 <write_map+0x24c>)
 8008f3c:	0112      	lsls	r2, r2, #4
 8008f3e:	440a      	add	r2, r1
 8008f40:	4413      	add	r3, r2
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	4603      	mov	r3, r0
 8008f46:	3b01      	subs	r3, #1
 8008f48:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8008f4c:	b2d0      	uxtb	r0, r2
 8008f4e:	4914      	ldr	r1, [pc, #80]	; (8008fa0 <write_map+0x24c>)
 8008f50:	0122      	lsls	r2, r4, #4
 8008f52:	440a      	add	r2, r1
 8008f54:	4413      	add	r3, r2
 8008f56:	4602      	mov	r2, r0
 8008f58:	701a      	strb	r2, [r3, #0]
    }else{                                      //西壁がない場合
      map[mouse.y][mouse.x - 1] &= 0xBB;        //西側の区画から見て東側なしを書き込む
    }
  }
}
 8008f5a:	e018      	b.n	8008f8e <write_map+0x23a>
      map[mouse.y][mouse.x - 1] &= 0xBB;        //西側の区画から見て東側なしを書き込む
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <write_map+0x248>)
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	b2dc      	uxtb	r4, r3
 8008f62:	4622      	mov	r2, r4
 8008f64:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <write_map+0x248>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	b2d8      	uxtb	r0, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	490c      	ldr	r1, [pc, #48]	; (8008fa0 <write_map+0x24c>)
 8008f70:	0112      	lsls	r2, r2, #4
 8008f72:	440a      	add	r2, r1
 8008f74:	4413      	add	r3, r2
 8008f76:	781a      	ldrb	r2, [r3, #0]
 8008f78:	4603      	mov	r3, r0
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8008f80:	b2d0      	uxtb	r0, r2
 8008f82:	4907      	ldr	r1, [pc, #28]	; (8008fa0 <write_map+0x24c>)
 8008f84:	0122      	lsls	r2, r4, #4
 8008f86:	440a      	add	r2, r1
 8008f88:	4413      	add	r3, r2
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	701a      	strb	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc90      	pop	{r4, r7}
 8008f96:	4770      	bx	lr
 8008f98:	2000231c 	.word	0x2000231c
 8008f9c:	20002710 	.word	0x20002710
 8008fa0:	20000254 	.word	0x20000254

08008fa4 <turn_dir>:
//write_map
// マウスの方向を変更する
// 引数1：t_pat …… 回転方向(drive.hでマクロ定義)
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat){
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]

  //====方向を変更====
  mouse.dir = (mouse.dir + t_pat) & 0x03;       //指定された分mouse.dirを回転させる
 8008fae:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <turn_dir+0x2c>)
 8008fb0:	789b      	ldrb	r3, [r3, #2]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <turn_dir+0x2c>)
 8008fc2:	709a      	strb	r2, [r3, #2]
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20002710 	.word	0x20002710

08008fd4 <make_smap>:
//make_smap
// 歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void){
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0

  //====変数宣言====
  uint8_t x, y;                                 //for文用変数

  //====歩数マップのクリア====
  for(y = 0; y <= 15; y++){                     //各Y座標で実行
 8008fda:	2300      	movs	r3, #0
 8008fdc:	71bb      	strb	r3, [r7, #6]
 8008fde:	e013      	b.n	8009008 <make_smap+0x34>
    for( x = 0; x <= 15; x++){                  //各X座標で実行
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	71fb      	strb	r3, [r7, #7]
 8008fe4:	e00a      	b.n	8008ffc <make_smap+0x28>
      smap[y][x] = 0xff;                        //未記入部分は歩数最大とする
 8008fe6:	79ba      	ldrb	r2, [r7, #6]
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	4971      	ldr	r1, [pc, #452]	; (80091b0 <make_smap+0x1dc>)
 8008fec:	0112      	lsls	r2, r2, #4
 8008fee:	440a      	add	r2, r1
 8008ff0:	4413      	add	r3, r2
 8008ff2:	22ff      	movs	r2, #255	; 0xff
 8008ff4:	701a      	strb	r2, [r3, #0]
    for( x = 0; x <= 15; x++){                  //各X座標で実行
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	71fb      	strb	r3, [r7, #7]
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b0f      	cmp	r3, #15
 8009000:	d9f1      	bls.n	8008fe6 <make_smap+0x12>
  for(y = 0; y <= 15; y++){                     //各Y座標で実行
 8009002:	79bb      	ldrb	r3, [r7, #6]
 8009004:	3301      	adds	r3, #1
 8009006:	71bb      	strb	r3, [r7, #6]
 8009008:	79bb      	ldrb	r3, [r7, #6]
 800900a:	2b0f      	cmp	r3, #15
 800900c:	d9e8      	bls.n	8008fe0 <make_smap+0xc>
    }
  }

  //====ゴール座標を0にする====
  uint8_t m_step = 0;                           //歩数カウンタを0にする
 800900e:	2300      	movs	r3, #0
 8009010:	717b      	strb	r3, [r7, #5]
  smap[goal_y][goal_x] = 0;
 8009012:	4b68      	ldr	r3, [pc, #416]	; (80091b4 <make_smap+0x1e0>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	4b67      	ldr	r3, [pc, #412]	; (80091b8 <make_smap+0x1e4>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	4619      	mov	r1, r3
 800901e:	4a64      	ldr	r2, [pc, #400]	; (80091b0 <make_smap+0x1dc>)
 8009020:	0103      	lsls	r3, r0, #4
 8009022:	4413      	add	r3, r2
 8009024:	440b      	add	r3, r1
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]

  //====自分の座標にたどり着くまでループ====
  do{
    //----マップ全域を捜索----
    for( y = 0; y <= 15; y++){                  //各Y座標で実行
 800902a:	2300      	movs	r3, #0
 800902c:	71bb      	strb	r3, [r7, #6]
 800902e:	e0a1      	b.n	8009174 <make_smap+0x1a0>
      for( x = 0; x <= 15; x++){                //各X座標で実行
 8009030:	2300      	movs	r3, #0
 8009032:	71fb      	strb	r3, [r7, #7]
 8009034:	e097      	b.n	8009166 <make_smap+0x192>
        //----現在最大の歩数を発見したとき----
        if( smap[y][x] == m_step){              //歩数カウンタm_stepの値が現在最大の歩数
 8009036:	79ba      	ldrb	r2, [r7, #6]
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	495d      	ldr	r1, [pc, #372]	; (80091b0 <make_smap+0x1dc>)
 800903c:	0112      	lsls	r2, r2, #4
 800903e:	440a      	add	r2, r1
 8009040:	4413      	add	r3, r2
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	797a      	ldrb	r2, [r7, #5]
 8009046:	429a      	cmp	r2, r3
 8009048:	f040 808a 	bne.w	8009160 <make_smap+0x18c>
          uint8_t m_temp = map[y][x];           //map配列からマップデータを取り出す
 800904c:	79ba      	ldrb	r2, [r7, #6]
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	495a      	ldr	r1, [pc, #360]	; (80091bc <make_smap+0x1e8>)
 8009052:	0112      	lsls	r2, r2, #4
 8009054:	440a      	add	r2, r1
 8009056:	4413      	add	r3, r2
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	713b      	strb	r3, [r7, #4]
          if(MF.FLAG.SCND){                     //二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800905c:	4b58      	ldr	r3, [pc, #352]	; (80091c0 <make_smap+0x1ec>)
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <make_smap+0x9c>
            m_temp >>= 4;                       //上位4bitを使うので4bit分右にシフトさせる
 800906a:	793b      	ldrb	r3, [r7, #4]
 800906c:	091b      	lsrs	r3, r3, #4
 800906e:	713b      	strb	r3, [r7, #4]
          }
          //----北壁についての処理----
          if(!(m_temp & 0x08) && y != 15){      //北壁がなく現在最北端でないとき
 8009070:	793b      	ldrb	r3, [r7, #4]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b00      	cmp	r3, #0
 8009078:	d118      	bne.n	80090ac <make_smap+0xd8>
 800907a:	79bb      	ldrb	r3, [r7, #6]
 800907c:	2b0f      	cmp	r3, #15
 800907e:	d015      	beq.n	80090ac <make_smap+0xd8>
            if(smap[y+1][x] == 0xff){           //北側が未記入なら
 8009080:	79bb      	ldrb	r3, [r7, #6]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	494a      	ldr	r1, [pc, #296]	; (80091b0 <make_smap+0x1dc>)
 8009088:	0112      	lsls	r2, r2, #4
 800908a:	440a      	add	r2, r1
 800908c:	4413      	add	r3, r2
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2bff      	cmp	r3, #255	; 0xff
 8009092:	d10b      	bne.n	80090ac <make_smap+0xd8>
              smap[y+1][x] = m_step + 1;        //次の歩数を書き込む
 8009094:	79bb      	ldrb	r3, [r7, #6]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	7979      	ldrb	r1, [r7, #5]
 800909c:	3101      	adds	r1, #1
 800909e:	b2c8      	uxtb	r0, r1
 80090a0:	4943      	ldr	r1, [pc, #268]	; (80091b0 <make_smap+0x1dc>)
 80090a2:	0112      	lsls	r2, r2, #4
 80090a4:	440a      	add	r2, r1
 80090a6:	4413      	add	r3, r2
 80090a8:	4602      	mov	r2, r0
 80090aa:	701a      	strb	r2, [r3, #0]
            }
          }
          //----東壁についての処理----
          if(!(m_temp & 0x04) && x != 15){      //東壁がなく現在最東端でないとき
 80090ac:	793b      	ldrb	r3, [r7, #4]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d118      	bne.n	80090e8 <make_smap+0x114>
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b0f      	cmp	r3, #15
 80090ba:	d015      	beq.n	80090e8 <make_smap+0x114>
            if(smap[y][x+1] == 0xff){           //東側が未記入なら
 80090bc:	79ba      	ldrb	r2, [r7, #6]
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	3301      	adds	r3, #1
 80090c2:	493b      	ldr	r1, [pc, #236]	; (80091b0 <make_smap+0x1dc>)
 80090c4:	0112      	lsls	r2, r2, #4
 80090c6:	440a      	add	r2, r1
 80090c8:	4413      	add	r3, r2
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2bff      	cmp	r3, #255	; 0xff
 80090ce:	d10b      	bne.n	80090e8 <make_smap+0x114>
              smap[y][x+1] = m_step + 1;        //次の歩数を書き込む
 80090d0:	79ba      	ldrb	r2, [r7, #6]
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	3301      	adds	r3, #1
 80090d6:	7979      	ldrb	r1, [r7, #5]
 80090d8:	3101      	adds	r1, #1
 80090da:	b2c8      	uxtb	r0, r1
 80090dc:	4934      	ldr	r1, [pc, #208]	; (80091b0 <make_smap+0x1dc>)
 80090de:	0112      	lsls	r2, r2, #4
 80090e0:	440a      	add	r2, r1
 80090e2:	4413      	add	r3, r2
 80090e4:	4602      	mov	r2, r0
 80090e6:	701a      	strb	r2, [r3, #0]
            }
          }
          //----南壁についての処理----
          if(!(m_temp & 0x02) && y != 0){       //南壁がなく現在最南端でないとき
 80090e8:	793b      	ldrb	r3, [r7, #4]
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d118      	bne.n	8009124 <make_smap+0x150>
 80090f2:	79bb      	ldrb	r3, [r7, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d015      	beq.n	8009124 <make_smap+0x150>
            if(smap[y-1][x] == 0xff){           //南側が未記入なら
 80090f8:	79bb      	ldrb	r3, [r7, #6]
 80090fa:	1e5a      	subs	r2, r3, #1
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	492c      	ldr	r1, [pc, #176]	; (80091b0 <make_smap+0x1dc>)
 8009100:	0112      	lsls	r2, r2, #4
 8009102:	440a      	add	r2, r1
 8009104:	4413      	add	r3, r2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2bff      	cmp	r3, #255	; 0xff
 800910a:	d10b      	bne.n	8009124 <make_smap+0x150>
              smap[y-1][x] = m_step + 1;        //次の歩数を書き込む
 800910c:	79bb      	ldrb	r3, [r7, #6]
 800910e:	1e5a      	subs	r2, r3, #1
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	7979      	ldrb	r1, [r7, #5]
 8009114:	3101      	adds	r1, #1
 8009116:	b2c8      	uxtb	r0, r1
 8009118:	4925      	ldr	r1, [pc, #148]	; (80091b0 <make_smap+0x1dc>)
 800911a:	0112      	lsls	r2, r2, #4
 800911c:	440a      	add	r2, r1
 800911e:	4413      	add	r3, r2
 8009120:	4602      	mov	r2, r0
 8009122:	701a      	strb	r2, [r3, #0]
            }
          }
          //----西壁についての処理----
          if(!(m_temp & 0x01) && x != 0){       //西壁がなく現在最西端でないとき
 8009124:	793b      	ldrb	r3, [r7, #4]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d118      	bne.n	8009160 <make_smap+0x18c>
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d015      	beq.n	8009160 <make_smap+0x18c>
            if(smap[y][x-1] == 0xff){           //西側が未記入なら
 8009134:	79ba      	ldrb	r2, [r7, #6]
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	3b01      	subs	r3, #1
 800913a:	491d      	ldr	r1, [pc, #116]	; (80091b0 <make_smap+0x1dc>)
 800913c:	0112      	lsls	r2, r2, #4
 800913e:	440a      	add	r2, r1
 8009140:	4413      	add	r3, r2
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2bff      	cmp	r3, #255	; 0xff
 8009146:	d10b      	bne.n	8009160 <make_smap+0x18c>
              smap[y][x-1] = m_step + 1;        //次の歩数を書き込む
 8009148:	79ba      	ldrb	r2, [r7, #6]
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	3b01      	subs	r3, #1
 800914e:	7979      	ldrb	r1, [r7, #5]
 8009150:	3101      	adds	r1, #1
 8009152:	b2c8      	uxtb	r0, r1
 8009154:	4916      	ldr	r1, [pc, #88]	; (80091b0 <make_smap+0x1dc>)
 8009156:	0112      	lsls	r2, r2, #4
 8009158:	440a      	add	r2, r1
 800915a:	4413      	add	r3, r2
 800915c:	4602      	mov	r2, r0
 800915e:	701a      	strb	r2, [r3, #0]
      for( x = 0; x <= 15; x++){                //各X座標で実行
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	3301      	adds	r3, #1
 8009164:	71fb      	strb	r3, [r7, #7]
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	2b0f      	cmp	r3, #15
 800916a:	f67f af64 	bls.w	8009036 <make_smap+0x62>
    for( y = 0; y <= 15; y++){                  //各Y座標で実行
 800916e:	79bb      	ldrb	r3, [r7, #6]
 8009170:	3301      	adds	r3, #1
 8009172:	71bb      	strb	r3, [r7, #6]
 8009174:	79bb      	ldrb	r3, [r7, #6]
 8009176:	2b0f      	cmp	r3, #15
 8009178:	f67f af5a 	bls.w	8009030 <make_smap+0x5c>
          }
        }
      }
    }
    //====歩数カウンタのインクリメント====
    m_step++;
 800917c:	797b      	ldrb	r3, [r7, #5]
 800917e:	3301      	adds	r3, #1
 8009180:	717b      	strb	r3, [r7, #5]
  }while(smap[mouse.y][mouse.x] == 0xff);       //現在座標が未記入ではなくなるまで実行
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <make_smap+0x1f0>)
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4618      	mov	r0, r3
 800918a:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <make_smap+0x1f0>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4619      	mov	r1, r3
 8009192:	4a07      	ldr	r2, [pc, #28]	; (80091b0 <make_smap+0x1dc>)
 8009194:	0103      	lsls	r3, r0, #4
 8009196:	4413      	add	r3, r2
 8009198:	440b      	add	r3, r1
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2bff      	cmp	r3, #255	; 0xff
 800919e:	f43f af44 	beq.w	800902a <make_smap+0x56>
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	200028c8 	.word	0x200028c8
 80091b4:	20002564 	.word	0x20002564
 80091b8:	2000265c 	.word	0x2000265c
 80091bc:	20000254 	.word	0x20000254
 80091c0:	200029dc 	.word	0x200029dc
 80091c4:	20002710 	.word	0x20002710

080091c8 <make_route>:
//make_route
// 最短経路を導出する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route(){
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0

  //====変数宣言====
  uint8_t x, y;                                 //X，Y座標
  uint8_t dir_temp =  mouse.dir;                //マウスの方角を表すmouse.dirの値をdir_temp変数に退避させる
 80091ce:	4b90      	ldr	r3, [pc, #576]	; (8009410 <make_route+0x248>)
 80091d0:	789b      	ldrb	r3, [r3, #2]
 80091d2:	707b      	strb	r3, [r7, #1]

  //====最短経路を初期化====
  uint16_t i;
  for(i = 0; i < 256; i++){
 80091d4:	2300      	movs	r3, #0
 80091d6:	80bb      	strh	r3, [r7, #4]
 80091d8:	e006      	b.n	80091e8 <make_route+0x20>
    route[i] = 0xff;                            //routeを0xffで初期化
 80091da:	88bb      	ldrh	r3, [r7, #4]
 80091dc:	4a8d      	ldr	r2, [pc, #564]	; (8009414 <make_route+0x24c>)
 80091de:	21ff      	movs	r1, #255	; 0xff
 80091e0:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 256; i++){
 80091e2:	88bb      	ldrh	r3, [r7, #4]
 80091e4:	3301      	adds	r3, #1
 80091e6:	80bb      	strh	r3, [r7, #4]
 80091e8:	88bb      	ldrh	r3, [r7, #4]
 80091ea:	2bff      	cmp	r3, #255	; 0xff
 80091ec:	d9f5      	bls.n	80091da <make_route+0x12>
  }

  //====歩数カウンタをセット====
  uint8_t m_step = smap[mouse.y][mouse.x];      //現在座標の歩数マップ値を取得
 80091ee:	4b88      	ldr	r3, [pc, #544]	; (8009410 <make_route+0x248>)
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	4618      	mov	r0, r3
 80091f6:	4b86      	ldr	r3, [pc, #536]	; (8009410 <make_route+0x248>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	4619      	mov	r1, r3
 80091fe:	4a86      	ldr	r2, [pc, #536]	; (8009418 <make_route+0x250>)
 8009200:	0103      	lsls	r3, r0, #4
 8009202:	4413      	add	r3, r2
 8009204:	440b      	add	r3, r1
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	70fb      	strb	r3, [r7, #3]

  //====x, yに現在座標を書き込み====
  x = mouse.x;
 800920a:	4b81      	ldr	r3, [pc, #516]	; (8009410 <make_route+0x248>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  y = mouse.y;
 8009210:	4b7f      	ldr	r3, [pc, #508]	; (8009410 <make_route+0x248>)
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	71bb      	strb	r3, [r7, #6]

  //====最短経路を導出====
  i = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	80bb      	strh	r3, [r7, #4]
  do{
    uint8_t m_temp = map[y][x];                 //比較用マップ情報の格納
 800921a:	79ba      	ldrb	r2, [r7, #6]
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	497f      	ldr	r1, [pc, #508]	; (800941c <make_route+0x254>)
 8009220:	0112      	lsls	r2, r2, #4
 8009222:	440a      	add	r2, r1
 8009224:	4413      	add	r3, r2
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	70bb      	strb	r3, [r7, #2]
    if(MF.FLAG.SCND){                           //二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 800922a:	4b7d      	ldr	r3, [pc, #500]	; (8009420 <make_route+0x258>)
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <make_route+0x76>
      m_temp >>= 4;                             //上位4bitを使うので4bit分右にシフトさせる
 8009238:	78bb      	ldrb	r3, [r7, #2]
 800923a:	091b      	lsrs	r3, r3, #4
 800923c:	70bb      	strb	r3, [r7, #2]
    }

    //----北を見る----
    if(!(m_temp & 0x08) && (smap[y+1][x] < m_step)){        //北側に壁が無く、現在地より小さい歩数マップ値であれば
 800923e:	78bb      	ldrb	r3, [r7, #2]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d122      	bne.n	800928e <make_route+0xc6>
 8009248:	79bb      	ldrb	r3, [r7, #6]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	4972      	ldr	r1, [pc, #456]	; (8009418 <make_route+0x250>)
 8009250:	0112      	lsls	r2, r2, #4
 8009252:	440a      	add	r2, r1
 8009254:	4413      	add	r3, r2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	78fa      	ldrb	r2, [r7, #3]
 800925a:	429a      	cmp	r2, r3
 800925c:	d917      	bls.n	800928e <make_route+0xc6>
      route[i] = (0x00 - mouse.dir) & 0x03;                 //route配列に進行方向を記録
 800925e:	4b6c      	ldr	r3, [pc, #432]	; (8009410 <make_route+0x248>)
 8009260:	789b      	ldrb	r3, [r3, #2]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	425b      	negs	r3, r3
 8009266:	b2da      	uxtb	r2, r3
 8009268:	88bb      	ldrh	r3, [r7, #4]
 800926a:	f002 0203 	and.w	r2, r2, #3
 800926e:	b2d1      	uxtb	r1, r2
 8009270:	4a68      	ldr	r2, [pc, #416]	; (8009414 <make_route+0x24c>)
 8009272:	54d1      	strb	r1, [r2, r3]
      m_step = smap[y+1][x];                                //最大歩数マップ値を更新
 8009274:	79bb      	ldrb	r3, [r7, #6]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	4967      	ldr	r1, [pc, #412]	; (8009418 <make_route+0x250>)
 800927c:	0112      	lsls	r2, r2, #4
 800927e:	440a      	add	r2, r1
 8009280:	4413      	add	r3, r2
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	70fb      	strb	r3, [r7, #3]
      y++;                                                  //北に進んだのでY座標をインクリメント
 8009286:	79bb      	ldrb	r3, [r7, #6]
 8009288:	3301      	adds	r3, #1
 800928a:	71bb      	strb	r3, [r7, #6]
 800928c:	e079      	b.n	8009382 <make_route+0x1ba>
    }
    //----東を見る----
    else if(!(m_temp & 0x04) && (smap[y][x+1] < m_step)){   //東側に壁が無く、現在地より小さい歩数マップ値であれば
 800928e:	78bb      	ldrb	r3, [r7, #2]
 8009290:	f003 0304 	and.w	r3, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	d123      	bne.n	80092e0 <make_route+0x118>
 8009298:	79ba      	ldrb	r2, [r7, #6]
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	3301      	adds	r3, #1
 800929e:	495e      	ldr	r1, [pc, #376]	; (8009418 <make_route+0x250>)
 80092a0:	0112      	lsls	r2, r2, #4
 80092a2:	440a      	add	r2, r1
 80092a4:	4413      	add	r3, r2
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d918      	bls.n	80092e0 <make_route+0x118>
      route[i] = (0x01 - mouse.dir) & 0x03;                 //route配列に進行方向を記録
 80092ae:	4b58      	ldr	r3, [pc, #352]	; (8009410 <make_route+0x248>)
 80092b0:	789b      	ldrb	r3, [r3, #2]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f1c3 0301 	rsb	r3, r3, #1
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	88bb      	ldrh	r3, [r7, #4]
 80092bc:	f002 0203 	and.w	r2, r2, #3
 80092c0:	b2d1      	uxtb	r1, r2
 80092c2:	4a54      	ldr	r2, [pc, #336]	; (8009414 <make_route+0x24c>)
 80092c4:	54d1      	strb	r1, [r2, r3]
      m_step = smap[y][x+1];                                //最大歩数マップ値を更新
 80092c6:	79ba      	ldrb	r2, [r7, #6]
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	3301      	adds	r3, #1
 80092cc:	4952      	ldr	r1, [pc, #328]	; (8009418 <make_route+0x250>)
 80092ce:	0112      	lsls	r2, r2, #4
 80092d0:	440a      	add	r2, r1
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	70fb      	strb	r3, [r7, #3]
      x++;                                                  //東に進んだのでX座標をインクリメント
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	3301      	adds	r3, #1
 80092dc:	71fb      	strb	r3, [r7, #7]
 80092de:	e050      	b.n	8009382 <make_route+0x1ba>
    }
    //----南を見る----
    else if(!(m_temp & 0x02) && (smap[y-1][x] < m_step)){   //南側に壁が無く、現在地より小さい歩数マップ値であれば
 80092e0:	78bb      	ldrb	r3, [r7, #2]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d123      	bne.n	8009332 <make_route+0x16a>
 80092ea:	79bb      	ldrb	r3, [r7, #6]
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	4949      	ldr	r1, [pc, #292]	; (8009418 <make_route+0x250>)
 80092f2:	0112      	lsls	r2, r2, #4
 80092f4:	440a      	add	r2, r1
 80092f6:	4413      	add	r3, r2
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d918      	bls.n	8009332 <make_route+0x16a>
      route[i] = (0x02 - mouse.dir) & 0x03;                 //route配列に進行方向を記録
 8009300:	4b43      	ldr	r3, [pc, #268]	; (8009410 <make_route+0x248>)
 8009302:	789b      	ldrb	r3, [r3, #2]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f1c3 0302 	rsb	r3, r3, #2
 800930a:	b2da      	uxtb	r2, r3
 800930c:	88bb      	ldrh	r3, [r7, #4]
 800930e:	f002 0203 	and.w	r2, r2, #3
 8009312:	b2d1      	uxtb	r1, r2
 8009314:	4a3f      	ldr	r2, [pc, #252]	; (8009414 <make_route+0x24c>)
 8009316:	54d1      	strb	r1, [r2, r3]
      m_step = smap[y-1][x];                                //最大歩数マップ値を更新
 8009318:	79bb      	ldrb	r3, [r7, #6]
 800931a:	1e5a      	subs	r2, r3, #1
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	493e      	ldr	r1, [pc, #248]	; (8009418 <make_route+0x250>)
 8009320:	0112      	lsls	r2, r2, #4
 8009322:	440a      	add	r2, r1
 8009324:	4413      	add	r3, r2
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	70fb      	strb	r3, [r7, #3]
      y--;                                                  //南に進んだのでY座標をデクリメント
 800932a:	79bb      	ldrb	r3, [r7, #6]
 800932c:	3b01      	subs	r3, #1
 800932e:	71bb      	strb	r3, [r7, #6]
 8009330:	e027      	b.n	8009382 <make_route+0x1ba>
    }
    //----西を見る----
    else if(!(m_temp & 0x01) && (smap[y][x-1] < m_step)){   //西側に壁が無く、現在地より小さい歩数マップ値であれば
 8009332:	78bb      	ldrb	r3, [r7, #2]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d122      	bne.n	8009382 <make_route+0x1ba>
 800933c:	79ba      	ldrb	r2, [r7, #6]
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	3b01      	subs	r3, #1
 8009342:	4935      	ldr	r1, [pc, #212]	; (8009418 <make_route+0x250>)
 8009344:	0112      	lsls	r2, r2, #4
 8009346:	440a      	add	r2, r1
 8009348:	4413      	add	r3, r2
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	78fa      	ldrb	r2, [r7, #3]
 800934e:	429a      	cmp	r2, r3
 8009350:	d917      	bls.n	8009382 <make_route+0x1ba>
      route[i] = (0x03 - mouse.dir) & 0x03;                 //route配列に進行方向を記録
 8009352:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <make_route+0x248>)
 8009354:	789b      	ldrb	r3, [r3, #2]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f1c3 0303 	rsb	r3, r3, #3
 800935c:	b2da      	uxtb	r2, r3
 800935e:	88bb      	ldrh	r3, [r7, #4]
 8009360:	f002 0203 	and.w	r2, r2, #3
 8009364:	b2d1      	uxtb	r1, r2
 8009366:	4a2b      	ldr	r2, [pc, #172]	; (8009414 <make_route+0x24c>)
 8009368:	54d1      	strb	r1, [r2, r3]
      m_step = smap[y][x-1];                                //最大歩数マップ値を更新
 800936a:	79ba      	ldrb	r2, [r7, #6]
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	3b01      	subs	r3, #1
 8009370:	4929      	ldr	r1, [pc, #164]	; (8009418 <make_route+0x250>)
 8009372:	0112      	lsls	r2, r2, #4
 8009374:	440a      	add	r2, r1
 8009376:	4413      	add	r3, r2
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	70fb      	strb	r3, [r7, #3]
      x--;                                                  //西に進んだのでX座標をデクリメント
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	3b01      	subs	r3, #1
 8009380:	71fb      	strb	r3, [r7, #7]
    }

    //----格納データ形式変更----
    switch(route[i]){                 //route配列に格納した要素値で分岐
 8009382:	88bb      	ldrh	r3, [r7, #4]
 8009384:	4a23      	ldr	r2, [pc, #140]	; (8009414 <make_route+0x24c>)
 8009386:	5cd3      	ldrb	r3, [r2, r3]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d828      	bhi.n	80093de <make_route+0x216>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <make_route+0x1cc>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093a5 	.word	0x080093a5
 8009398:	080093af 	.word	0x080093af
 800939c:	080093bf 	.word	0x080093bf
 80093a0:	080093cf 	.word	0x080093cf
    case 0x00:                        //前進する場合
      route[i] = 0x88;                //格納データ形式を変更
 80093a4:	88bb      	ldrh	r3, [r7, #4]
 80093a6:	4a1b      	ldr	r2, [pc, #108]	; (8009414 <make_route+0x24c>)
 80093a8:	2188      	movs	r1, #136	; 0x88
 80093aa:	54d1      	strb	r1, [r2, r3]
      break;
 80093ac:	e01c      	b.n	80093e8 <make_route+0x220>
    case 0x01:                        //右折する場合
      turn_dir(DIR_TURN_R90);         //内部情報の方向を90度右回転
 80093ae:	2001      	movs	r0, #1
 80093b0:	f7ff fdf8 	bl	8008fa4 <turn_dir>
      route[i] = 0x44;                //格納データ形式を変更
 80093b4:	88bb      	ldrh	r3, [r7, #4]
 80093b6:	4a17      	ldr	r2, [pc, #92]	; (8009414 <make_route+0x24c>)
 80093b8:	2144      	movs	r1, #68	; 0x44
 80093ba:	54d1      	strb	r1, [r2, r3]
      break;
 80093bc:	e014      	b.n	80093e8 <make_route+0x220>
    case 0x02:                        //Uターンする場合
      turn_dir(DIR_TURN_180);         //内部情報の方向を180度回転
 80093be:	2002      	movs	r0, #2
 80093c0:	f7ff fdf0 	bl	8008fa4 <turn_dir>
      route[i] = 0x22;                //格納データ形式を変更
 80093c4:	88bb      	ldrh	r3, [r7, #4]
 80093c6:	4a13      	ldr	r2, [pc, #76]	; (8009414 <make_route+0x24c>)
 80093c8:	2122      	movs	r1, #34	; 0x22
 80093ca:	54d1      	strb	r1, [r2, r3]
      break;
 80093cc:	e00c      	b.n	80093e8 <make_route+0x220>
    case 0x03:                        //左折する場合
      turn_dir(DIR_TURN_L90);         //内部情報の方向を90度右回転
 80093ce:	20ff      	movs	r0, #255	; 0xff
 80093d0:	f7ff fde8 	bl	8008fa4 <turn_dir>
      route[i] = 0x11;                //格納データ形式を変更
 80093d4:	88bb      	ldrh	r3, [r7, #4]
 80093d6:	4a0f      	ldr	r2, [pc, #60]	; (8009414 <make_route+0x24c>)
 80093d8:	2111      	movs	r1, #17
 80093da:	54d1      	strb	r1, [r2, r3]
      break;
 80093dc:	e004      	b.n	80093e8 <make_route+0x220>
    default:                          //それ以外の場合
      route[i] = 0x00;                //格納データ形式を変更
 80093de:	88bb      	ldrh	r3, [r7, #4]
 80093e0:	4a0c      	ldr	r2, [pc, #48]	; (8009414 <make_route+0x24c>)
 80093e2:	2100      	movs	r1, #0
 80093e4:	54d1      	strb	r1, [r2, r3]
      break;
 80093e6:	bf00      	nop
    }
    i++;                              //カウンタをインクリメント
 80093e8:	88bb      	ldrh	r3, [r7, #4]
 80093ea:	3301      	adds	r3, #1
 80093ec:	80bb      	strh	r3, [r7, #4]
  }while( smap[y][x] != 0);           //進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 80093ee:	79ba      	ldrb	r2, [r7, #6]
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	4909      	ldr	r1, [pc, #36]	; (8009418 <make_route+0x250>)
 80093f4:	0112      	lsls	r2, r2, #4
 80093f6:	440a      	add	r2, r1
 80093f8:	4413      	add	r3, r2
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f47f af0c 	bne.w	800921a <make_route+0x52>
  mouse.dir = dir_temp;               //dir_tempに退避させた値をmouse.dirにリストア
 8009402:	4a03      	ldr	r2, [pc, #12]	; (8009410 <make_route+0x248>)
 8009404:	787b      	ldrb	r3, [r7, #1]
 8009406:	7093      	strb	r3, [r2, #2]
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20002710 	.word	0x20002710
 8009414:	200027c4 	.word	0x200027c4
 8009418:	200028c8 	.word	0x200028c8
 800941c:	20000254 	.word	0x20000254
 8009420:	200029dc 	.word	0x200029dc

08009424 <store_map_in_eeprom>:
//store_map_in_eeprom
// mapデータをeepromに格納する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void){
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
  eeprom_enable_write();
 800942a:	f7fd f92d 	bl	8006688 <eeprom_enable_write>
  int i;
  for(i = 0; i < 16; i++){
 800942e:	2300      	movs	r3, #0
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	e01b      	b.n	800946c <store_map_in_eeprom+0x48>
    int j;
    for(j = 0; j < 16; j++){
 8009434:	2300      	movs	r3, #0
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	e012      	b.n	8009460 <store_map_in_eeprom+0x3c>
     eeprom_write_halfword(i*16 + j, (uint16_t) map[i][j]);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	011a      	lsls	r2, r3, #4
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	4413      	add	r3, r2
 8009442:	4618      	mov	r0, r3
 8009444:	4a0e      	ldr	r2, [pc, #56]	; (8009480 <store_map_in_eeprom+0x5c>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	441a      	add	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	4413      	add	r3, r2
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	4619      	mov	r1, r3
 8009456:	f7fd f942 	bl	80066de <eeprom_write_halfword>
    for(j = 0; j < 16; j++){
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b0f      	cmp	r3, #15
 8009464:	dde9      	ble.n	800943a <store_map_in_eeprom+0x16>
  for(i = 0; i < 16; i++){
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3301      	adds	r3, #1
 800946a:	607b      	str	r3, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b0f      	cmp	r3, #15
 8009470:	dde0      	ble.n	8009434 <store_map_in_eeprom+0x10>
    }
  }
  eeprom_disable_write();
 8009472:	f7fd f92d 	bl	80066d0 <eeprom_disable_write>
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000254 	.word	0x20000254

08009484 <load_map_from_eeprom>:
//load_map_in_eeprom
// mapデータをeepromから取得する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void){
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
  int i;
  for(i = 0; i < 16; i++){
 800948a:	2300      	movs	r3, #0
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	e01c      	b.n	80094ca <load_map_from_eeprom+0x46>
    int j;
    for(j = 0; j < 16; j++){
 8009490:	2300      	movs	r3, #0
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	e013      	b.n	80094be <load_map_from_eeprom+0x3a>
      map[i][j] = (uint8_t) eeprom_read_halfword(i*16 + j);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	011a      	lsls	r2, r3, #4
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	4413      	add	r3, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fd f93a 	bl	8006718 <eeprom_read_halfword>
 80094a4:	4603      	mov	r3, r0
 80094a6:	b2d9      	uxtb	r1, r3
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <load_map_from_eeprom+0x54>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	441a      	add	r2, r3
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	4413      	add	r3, r2
 80094b4:	460a      	mov	r2, r1
 80094b6:	701a      	strb	r2, [r3, #0]
    for(j = 0; j < 16; j++){
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	603b      	str	r3, [r7, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b0f      	cmp	r3, #15
 80094c2:	dde8      	ble.n	8009496 <load_map_from_eeprom+0x12>
  for(i = 0; i < 16; i++){
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3301      	adds	r3, #1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b0f      	cmp	r3, #15
 80094ce:	dddf      	ble.n	8009490 <load_map_from_eeprom+0xc>
    }
  }
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000254 	.word	0x20000254

080094dc <ADC_Start>:
#include "global.h"
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;


void ADC_Start(void){
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
	adc_case = 0;
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <ADC_Start+0x24>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
	   if (HAL_ADC_Start_DMA(&hadc1,
 80094e6:	2208      	movs	r2, #8
 80094e8:	4906      	ldr	r1, [pc, #24]	; (8009504 <ADC_Start+0x28>)
 80094ea:	4807      	ldr	r0, [pc, #28]	; (8009508 <ADC_Start+0x2c>)
 80094ec:	f7f7 fdb4 	bl	8001058 <HAL_ADC_Start_DMA>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <ADC_Start+0x1e>
	                         (uint32_t *)ADCBuffer,
	                         sizeof(ADCBuffer)
	                        ) != HAL_OK)
	   {
	     Error_Handler();
 80094f6:	f7fe faeb 	bl	8007ad0 <Error_Handler>
	   }
}
 80094fa:	bf00      	nop
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20002584 	.word	0x20002584
 8009504:	200025b4 	.word	0x200025b4
 8009508:	2000251c 	.word	0x2000251c

0800950c <Get_Sensor_Data>:
	adc_case = 3;
	HAL_ADC_Stop_DMA(&hadc1);
}


void Get_Sensor_Data(int16_t *adc_case){
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

	volatile int8_t i;

	switch(*adc_case){
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d03d      	beq.n	800959a <Get_Sensor_Data+0x8e>
 800951e:	2b02      	cmp	r3, #2
 8009520:	d07e      	beq.n	8009620 <Get_Sensor_Data+0x114>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d000      	beq.n	8009528 <Get_Sensor_Data+0x1c>
		}

		break;

	default:
		break;
 8009526:	e0b1      	b.n	800968c <Get_Sensor_Data+0x180>
		HAL_ADC_Stop_DMA(&hadc1);
 8009528:	485a      	ldr	r0, [pc, #360]	; (8009694 <Get_Sensor_Data+0x188>)
 800952a:	f7f7 fe87 	bl	800123c <HAL_ADC_Stop_DMA>
		Sensor_Off_Data[0] = ADCBuffer[0];
 800952e:	4b5a      	ldr	r3, [pc, #360]	; (8009698 <Get_Sensor_Data+0x18c>)
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	4b59      	ldr	r3, [pc, #356]	; (800969c <Get_Sensor_Data+0x190>)
 8009536:	601a      	str	r2, [r3, #0]
		Sensor_Off_Data[1] = ADCBuffer[1];
 8009538:	4b57      	ldr	r3, [pc, #348]	; (8009698 <Get_Sensor_Data+0x18c>)
 800953a:	885b      	ldrh	r3, [r3, #2]
 800953c:	461a      	mov	r2, r3
 800953e:	4b57      	ldr	r3, [pc, #348]	; (800969c <Get_Sensor_Data+0x190>)
 8009540:	605a      	str	r2, [r3, #4]
		Sensor_Off_Data[2] = ADCBuffer[2];
 8009542:	4b55      	ldr	r3, [pc, #340]	; (8009698 <Get_Sensor_Data+0x18c>)
 8009544:	889b      	ldrh	r3, [r3, #4]
 8009546:	461a      	mov	r2, r3
 8009548:	4b54      	ldr	r3, [pc, #336]	; (800969c <Get_Sensor_Data+0x190>)
 800954a:	609a      	str	r2, [r3, #8]
		Sensor_Off_Data[3] = ADCBuffer[3];
 800954c:	4b52      	ldr	r3, [pc, #328]	; (8009698 <Get_Sensor_Data+0x18c>)
 800954e:	88db      	ldrh	r3, [r3, #6]
 8009550:	461a      	mov	r2, r3
 8009552:	4b52      	ldr	r3, [pc, #328]	; (800969c <Get_Sensor_Data+0x190>)
 8009554:	60da      	str	r2, [r3, #12]
		Red_LED_Light(1,0,0,1);
 8009556:	2301      	movs	r3, #1
 8009558:	2200      	movs	r2, #0
 800955a:	2100      	movs	r1, #0
 800955c:	2001      	movs	r0, #1
 800955e:	f7fd fcf9 	bl	8006f54 <Red_LED_Light>
		for(i=0;i<120;i++){//横LEDの立ち上がりを待つ
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
 8009566:	e006      	b.n	8009576 <Get_Sensor_Data+0x6a>
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	b25b      	sxtb	r3, r3
 800956c:	b2db      	uxtb	r3, r3
 800956e:	3301      	adds	r3, #1
 8009570:	b2db      	uxtb	r3, r3
 8009572:	b25b      	sxtb	r3, r3
 8009574:	73fb      	strb	r3, [r7, #15]
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	b25b      	sxtb	r3, r3
 800957a:	2b77      	cmp	r3, #119	; 0x77
 800957c:	ddf4      	ble.n	8009568 <Get_Sensor_Data+0x5c>
		*adc_case = 1;//タスクポインタ進める
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	801a      	strh	r2, [r3, #0]
		if (HAL_ADC_Start_DMA(&hadc1,
 8009584:	2208      	movs	r2, #8
 8009586:	4944      	ldr	r1, [pc, #272]	; (8009698 <Get_Sensor_Data+0x18c>)
 8009588:	4842      	ldr	r0, [pc, #264]	; (8009694 <Get_Sensor_Data+0x188>)
 800958a:	f7f7 fd65 	bl	8001058 <HAL_ADC_Start_DMA>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d078      	beq.n	8009686 <Get_Sensor_Data+0x17a>
		     Error_Handler();
 8009594:	f7fe fa9c 	bl	8007ad0 <Error_Handler>
		break;
 8009598:	e075      	b.n	8009686 <Get_Sensor_Data+0x17a>
		Red_LED_Light(0,0,0,0);//消灯
 800959a:	2300      	movs	r3, #0
 800959c:	2200      	movs	r2, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	2000      	movs	r0, #0
 80095a2:	f7fd fcd7 	bl	8006f54 <Red_LED_Light>
		HAL_ADC_Stop_DMA(&hadc1);
 80095a6:	483b      	ldr	r0, [pc, #236]	; (8009694 <Get_Sensor_Data+0x188>)
 80095a8:	f7f7 fe48 	bl	800123c <HAL_ADC_Stop_DMA>
		Sensor_On_Data[2] = ADCBuffer[2];
 80095ac:	4b3a      	ldr	r3, [pc, #232]	; (8009698 <Get_Sensor_Data+0x18c>)
 80095ae:	889b      	ldrh	r3, [r3, #4]
 80095b0:	461a      	mov	r2, r3
 80095b2:	4b3b      	ldr	r3, [pc, #236]	; (80096a0 <Get_Sensor_Data+0x194>)
 80095b4:	609a      	str	r2, [r3, #8]
		Sensor_On_Data[3] = ADCBuffer[3];
 80095b6:	4b38      	ldr	r3, [pc, #224]	; (8009698 <Get_Sensor_Data+0x18c>)
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	461a      	mov	r2, r3
 80095bc:	4b38      	ldr	r3, [pc, #224]	; (80096a0 <Get_Sensor_Data+0x194>)
 80095be:	60da      	str	r2, [r3, #12]
		sensor_data.sideR  = Sensor_On_Data[2] - Sensor_Off_Data[2];
 80095c0:	4b37      	ldr	r3, [pc, #220]	; (80096a0 <Get_Sensor_Data+0x194>)
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	4b35      	ldr	r3, [pc, #212]	; (800969c <Get_Sensor_Data+0x190>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	4a36      	ldr	r2, [pc, #216]	; (80096a4 <Get_Sensor_Data+0x198>)
 80095cc:	60d3      	str	r3, [r2, #12]
		sensor_data.sideL  = Sensor_On_Data[3] - Sensor_Off_Data[3];
 80095ce:	4b34      	ldr	r3, [pc, #208]	; (80096a0 <Get_Sensor_Data+0x194>)
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	4b32      	ldr	r3, [pc, #200]	; (800969c <Get_Sensor_Data+0x190>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	4a32      	ldr	r2, [pc, #200]	; (80096a4 <Get_Sensor_Data+0x198>)
 80095da:	6093      	str	r3, [r2, #8]
		Red_LED_Light(0,1,1,0);//frontLED ON
 80095dc:	2300      	movs	r3, #0
 80095de:	2201      	movs	r2, #1
 80095e0:	2101      	movs	r1, #1
 80095e2:	2000      	movs	r0, #0
 80095e4:	f7fd fcb6 	bl	8006f54 <Red_LED_Light>
		for(i=0;i<125;i++){ //130×
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e006      	b.n	80095fc <Get_Sensor_Data+0xf0>
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	3301      	adds	r3, #1
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	b25b      	sxtb	r3, r3
 80095fa:	73fb      	strb	r3, [r7, #15]
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	2b7c      	cmp	r3, #124	; 0x7c
 8009602:	ddf4      	ble.n	80095ee <Get_Sensor_Data+0xe2>
		*adc_case = 2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	801a      	strh	r2, [r3, #0]
		   if (HAL_ADC_Start_DMA(&hadc1,
 800960a:	2208      	movs	r2, #8
 800960c:	4922      	ldr	r1, [pc, #136]	; (8009698 <Get_Sensor_Data+0x18c>)
 800960e:	4821      	ldr	r0, [pc, #132]	; (8009694 <Get_Sensor_Data+0x188>)
 8009610:	f7f7 fd22 	bl	8001058 <HAL_ADC_Start_DMA>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d037      	beq.n	800968a <Get_Sensor_Data+0x17e>
		     Error_Handler();
 800961a:	f7fe fa59 	bl	8007ad0 <Error_Handler>
		break;
 800961e:	e034      	b.n	800968a <Get_Sensor_Data+0x17e>
		Red_LED_Light(0,0,0,0);
 8009620:	2300      	movs	r3, #0
 8009622:	2200      	movs	r2, #0
 8009624:	2100      	movs	r1, #0
 8009626:	2000      	movs	r0, #0
 8009628:	f7fd fc94 	bl	8006f54 <Red_LED_Light>
		HAL_ADC_Stop_DMA(&hadc1);
 800962c:	4819      	ldr	r0, [pc, #100]	; (8009694 <Get_Sensor_Data+0x188>)
 800962e:	f7f7 fe05 	bl	800123c <HAL_ADC_Stop_DMA>
		Sensor_On_Data[0] = ADCBuffer[0];
 8009632:	4b19      	ldr	r3, [pc, #100]	; (8009698 <Get_Sensor_Data+0x18c>)
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	4b19      	ldr	r3, [pc, #100]	; (80096a0 <Get_Sensor_Data+0x194>)
 800963a:	601a      	str	r2, [r3, #0]
		Sensor_On_Data[1] = ADCBuffer[1];
 800963c:	4b16      	ldr	r3, [pc, #88]	; (8009698 <Get_Sensor_Data+0x18c>)
 800963e:	885b      	ldrh	r3, [r3, #2]
 8009640:	461a      	mov	r2, r3
 8009642:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <Get_Sensor_Data+0x194>)
 8009644:	605a      	str	r2, [r3, #4]
		sensor_data.frontR = Sensor_On_Data[0] - Sensor_Off_Data[0];
 8009646:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <Get_Sensor_Data+0x194>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <Get_Sensor_Data+0x190>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	4a14      	ldr	r2, [pc, #80]	; (80096a4 <Get_Sensor_Data+0x198>)
 8009652:	6053      	str	r3, [r2, #4]
		sensor_data.frontL = Sensor_On_Data[1] - Sensor_Off_Data[1];
 8009654:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <Get_Sensor_Data+0x194>)
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	4b10      	ldr	r3, [pc, #64]	; (800969c <Get_Sensor_Data+0x190>)
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <Get_Sensor_Data+0x198>)
 8009660:	6013      	str	r3, [r2, #0]
		*adc_case = 3;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2203      	movs	r2, #3
 8009666:	801a      	strh	r2, [r3, #0]
		for(i=0;i<100;i++){
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
 800966c:	e006      	b.n	800967c <Get_Sensor_Data+0x170>
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	b25b      	sxtb	r3, r3
 8009672:	b2db      	uxtb	r3, r3
 8009674:	3301      	adds	r3, #1
 8009676:	b2db      	uxtb	r3, r3
 8009678:	b25b      	sxtb	r3, r3
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	2b63      	cmp	r3, #99	; 0x63
 8009682:	ddf4      	ble.n	800966e <Get_Sensor_Data+0x162>
		break;
 8009684:	e002      	b.n	800968c <Get_Sensor_Data+0x180>
		break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <Get_Sensor_Data+0x180>
		break;
 800968a:	bf00      	nop
	}
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000251c 	.word	0x2000251c
 8009698:	200025b4 	.word	0x200025b4
 800969c:	200024f0 	.word	0x200024f0
 80096a0:	2000258c 	.word	0x2000258c
 80096a4:	20000238 	.word	0x20000238

080096a8 <ADC_Convert_Check>:


void ADC_Convert_Check(void){
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
	  if ( adc_case == 3 ){
 80096ac:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <ADC_Convert_Check+0x28>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d109      	bne.n	80096ca <ADC_Convert_Check+0x22>
	      adc_case = 0;
 80096b6:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <ADC_Convert_Check+0x28>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
	      update_sensor_data();
 80096bc:	f000 f8a2 	bl	8009804 <update_sensor_data>
	      HAL_ADC_Start_DMA( &hadc1, (uint32_t *)ADCBuffer, sizeof(ADCBuffer) );
 80096c0:	2208      	movs	r2, #8
 80096c2:	4904      	ldr	r1, [pc, #16]	; (80096d4 <ADC_Convert_Check+0x2c>)
 80096c4:	4804      	ldr	r0, [pc, #16]	; (80096d8 <ADC_Convert_Check+0x30>)
 80096c6:	f7f7 fcc7 	bl	8001058 <HAL_ADC_Start_DMA>
	   }
}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20002584 	.word	0x20002584
 80096d4:	200025b4 	.word	0x200025b4
 80096d8:	2000251c 	.word	0x2000251c

080096dc <get_base_info>:


void get_base_info(void){
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
	base_data.sideL = sensor_data.sideL;
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <get_base_info+0x28>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4a08      	ldr	r2, [pc, #32]	; (8009708 <get_base_info+0x2c>)
 80096e6:	6093      	str	r3, [r2, #8]
	base_data.sideR = sensor_data.sideR;
 80096e8:	4b06      	ldr	r3, [pc, #24]	; (8009704 <get_base_info+0x28>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4a06      	ldr	r2, [pc, #24]	; (8009708 <get_base_info+0x2c>)
 80096ee:	60d3      	str	r3, [r2, #12]
	printf("base_L=%4ld, base_R=%4ld\n\r",base_data.sideL, base_data.sideR);
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <get_base_info+0x2c>)
 80096f2:	6899      	ldr	r1, [r3, #8]
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <get_base_info+0x2c>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	461a      	mov	r2, r3
 80096fa:	4804      	ldr	r0, [pc, #16]	; (800970c <get_base_info+0x30>)
 80096fc:	f001 fa3a 	bl	800ab74 <iprintf>

}
 8009700:	bf00      	nop
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000238 	.word	0x20000238
 8009708:	20002684 	.word	0x20002684
 800970c:	0800cd50 	.word	0x0800cd50

08009710 <Set_Threshold>:


void Set_Threshold(sensor *threshold, uint32_t frontL, uint32_t sideL, uint32_t sideR, uint32_t frontR)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
	threshold->frontL = frontL;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	601a      	str	r2, [r3, #0]
	threshold->sideL = sideL;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	609a      	str	r2, [r3, #8]
	threshold->sideR = sideR;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	60da      	str	r2, [r3, #12]
	threshold->frontR = frontR;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	605a      	str	r2, [r3, #4]
}
 8009736:	bf00      	nop
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <get_wall_info>:

void get_wall_info(void){
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0

	//----壁情報の初期化----
	wall_info = 0x00;									//壁情報を初期化
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <get_wall_info+0xac>)
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
	//----前壁を見る----
	if(sensor_data.frontL > threshold.frontL){
 800974e:	4b29      	ldr	r3, [pc, #164]	; (80097f4 <get_wall_info+0xb0>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b29      	ldr	r3, [pc, #164]	; (80097f8 <get_wall_info+0xb4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d90d      	bls.n	8009776 <get_wall_info+0x32>
		//AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
		wall_info |= 0x88;								//壁情報を更新
 800975a:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <get_wall_info+0xac>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8009762:	b2da      	uxtb	r2, r3
 8009764:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <get_wall_info+0xac>)
 8009766:	701a      	strb	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);//BackMid
 8009768:	2201      	movs	r2, #1
 800976a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800976e:	4823      	ldr	r0, [pc, #140]	; (80097fc <get_wall_info+0xb8>)
 8009770:	f7f9 f9c8 	bl	8002b04 <HAL_GPIO_WritePin>
 8009774:	e005      	b.n	8009782 <get_wall_info+0x3e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);//BackLeft
 8009776:	2200      	movs	r2, #0
 8009778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800977c:	481f      	ldr	r0, [pc, #124]	; (80097fc <get_wall_info+0xb8>)
 800977e:	f7f9 f9c1 	bl	8002b04 <HAL_GPIO_WritePin>
	}

	//----右壁を見る----
	if(sensor_data.sideR > threshold.sideR){
 8009782:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <get_wall_info+0xb0>)
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	4b1c      	ldr	r3, [pc, #112]	; (80097f8 <get_wall_info+0xb4>)
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	429a      	cmp	r2, r3
 800978c:	d90d      	bls.n	80097aa <get_wall_info+0x66>
		//AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
		wall_info |= 0x44;								//壁情報を更新
 800978e:	4b18      	ldr	r3, [pc, #96]	; (80097f0 <get_wall_info+0xac>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009796:	b2da      	uxtb	r2, r3
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <get_wall_info+0xac>)
 800979a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);//BackRight
 800979c:	2201      	movs	r2, #1
 800979e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097a2:	4816      	ldr	r0, [pc, #88]	; (80097fc <get_wall_info+0xb8>)
 80097a4:	f7f9 f9ae 	bl	8002b04 <HAL_GPIO_WritePin>
 80097a8:	e005      	b.n	80097b6 <get_wall_info+0x72>
	}
	else{
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);//BackRight
 80097aa:	2200      	movs	r2, #0
 80097ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097b0:	4812      	ldr	r0, [pc, #72]	; (80097fc <get_wall_info+0xb8>)
 80097b2:	f7f9 f9a7 	bl	8002b04 <HAL_GPIO_WritePin>
	}
	//----左壁を見る----
	if(sensor_data.sideL > threshold.sideL){
 80097b6:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <get_wall_info+0xb0>)
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <get_wall_info+0xb4>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d90d      	bls.n	80097de <get_wall_info+0x9a>
		//AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
		wall_info |= 0x11;								//壁情報を更新
 80097c2:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <get_wall_info+0xac>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	f043 0311 	orr.w	r3, r3, #17
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	4b08      	ldr	r3, [pc, #32]	; (80097f0 <get_wall_info+0xac>)
 80097ce:	701a      	strb	r2, [r3, #0]
	   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,1);//BackLeft
 80097d0:	2201      	movs	r2, #1
 80097d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097d6:	480a      	ldr	r0, [pc, #40]	; (8009800 <get_wall_info+0xbc>)
 80097d8:	f7f9 f994 	bl	8002b04 <HAL_GPIO_WritePin>
	}
	else{
	   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);//BackLeft
	}

}
 80097dc:	e005      	b.n	80097ea <get_wall_info+0xa6>
	   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,0);//BackLeft
 80097de:	2200      	movs	r2, #0
 80097e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097e4:	4806      	ldr	r0, [pc, #24]	; (8009800 <get_wall_info+0xbc>)
 80097e6:	f7f9 f98d 	bl	8002b04 <HAL_GPIO_WritePin>
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	2000231c 	.word	0x2000231c
 80097f4:	20000238 	.word	0x20000238
 80097f8:	2000230c 	.word	0x2000230c
 80097fc:	40020000 	.word	0x40020000
 8009800:	40020400 	.word	0x40020400

08009804 <update_sensor_data>:


void update_sensor_data( void )
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
	//前回の取得値との差分を取る
	difference.sideR = sensor_data.sideR - sensor_old.sideR;
 8009808:	4b20      	ldr	r3, [pc, #128]	; (800988c <update_sensor_data+0x88>)
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	4b20      	ldr	r3, [pc, #128]	; (8009890 <update_sensor_data+0x8c>)
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	4a20      	ldr	r2, [pc, #128]	; (8009894 <update_sensor_data+0x90>)
 8009814:	60d3      	str	r3, [r2, #12]
	if(difference.sideR < 0) difference.sideR *= -1;
	difference.sideL = sensor_data.sideL - sensor_old.sideL;
 8009816:	4b1d      	ldr	r3, [pc, #116]	; (800988c <update_sensor_data+0x88>)
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <update_sensor_data+0x8c>)
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <update_sensor_data+0x90>)
 8009822:	6093      	str	r3, [r2, #8]
	if(difference.sideL < 0) difference.sideL *= -1;


  if ( sensor_data.sideL < threshold.sideL ){
 8009824:	4b19      	ldr	r3, [pc, #100]	; (800988c <update_sensor_data+0x88>)
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <update_sensor_data+0x94>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	429a      	cmp	r2, r3
 800982e:	d203      	bcs.n	8009838 <update_sensor_data+0x34>
    wall_data.sideL = 0;
 8009830:	4b1a      	ldr	r3, [pc, #104]	; (800989c <update_sensor_data+0x98>)
 8009832:	2200      	movs	r2, #0
 8009834:	609a      	str	r2, [r3, #8]
 8009836:	e002      	b.n	800983e <update_sensor_data+0x3a>

  } else {
    wall_data.sideL = 1;
 8009838:	4b18      	ldr	r3, [pc, #96]	; (800989c <update_sensor_data+0x98>)
 800983a:	2201      	movs	r2, #1
 800983c:	609a      	str	r2, [r3, #8]
  }

  if ( sensor_data.sideR < threshold.sideR ){
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <update_sensor_data+0x88>)
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <update_sensor_data+0x94>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	429a      	cmp	r2, r3
 8009848:	d203      	bcs.n	8009852 <update_sensor_data+0x4e>
    wall_data.sideR = 0;
 800984a:	4b14      	ldr	r3, [pc, #80]	; (800989c <update_sensor_data+0x98>)
 800984c:	2200      	movs	r2, #0
 800984e:	60da      	str	r2, [r3, #12]
 8009850:	e002      	b.n	8009858 <update_sensor_data+0x54>
  } else {
    wall_data.sideR = 1;
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <update_sensor_data+0x98>)
 8009854:	2201      	movs	r2, #1
 8009856:	60da      	str	r2, [r3, #12]
  }

  if ( sensor_data.frontR < threshold.frontR ){
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <update_sensor_data+0x88>)
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <update_sensor_data+0x94>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d203      	bcs.n	800986c <update_sensor_data+0x68>
    wall_data.frontR = 0;
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <update_sensor_data+0x98>)
 8009866:	2200      	movs	r2, #0
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	e002      	b.n	8009872 <update_sensor_data+0x6e>
  } else {
    wall_data.frontR = 1;
 800986c:	4b0b      	ldr	r3, [pc, #44]	; (800989c <update_sensor_data+0x98>)
 800986e:	2201      	movs	r2, #1
 8009870:	605a      	str	r2, [r3, #4]
  }

// Log_Saver();
 sensor_old.sideR =  sensor_data.sideR;
 8009872:	4b06      	ldr	r3, [pc, #24]	; (800988c <update_sensor_data+0x88>)
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	4a06      	ldr	r2, [pc, #24]	; (8009890 <update_sensor_data+0x8c>)
 8009878:	60d3      	str	r3, [r2, #12]
 sensor_old.sideL =  sensor_data.sideL;
 800987a:	4b04      	ldr	r3, [pc, #16]	; (800988c <update_sensor_data+0x88>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	4a04      	ldr	r2, [pc, #16]	; (8009890 <update_sensor_data+0x8c>)
 8009880:	6093      	str	r3, [r2, #8]

}
 8009882:	bf00      	nop
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20000238 	.word	0x20000238
 8009890:	20002568 	.word	0x20002568
 8009894:	200025a4 	.word	0x200025a4
 8009898:	2000230c 	.word	0x2000230c
 800989c:	2000242c 	.word	0x2000242c

080098a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098a6:	2300      	movs	r3, #0
 80098a8:	607b      	str	r3, [r7, #4]
 80098aa:	4b10      	ldr	r3, [pc, #64]	; (80098ec <HAL_MspInit+0x4c>)
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	4a0f      	ldr	r2, [pc, #60]	; (80098ec <HAL_MspInit+0x4c>)
 80098b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098b4:	6453      	str	r3, [r2, #68]	; 0x44
 80098b6:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <HAL_MspInit+0x4c>)
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098be:	607b      	str	r3, [r7, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80098c2:	2300      	movs	r3, #0
 80098c4:	603b      	str	r3, [r7, #0]
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <HAL_MspInit+0x4c>)
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	4a08      	ldr	r2, [pc, #32]	; (80098ec <HAL_MspInit+0x4c>)
 80098cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098d0:	6413      	str	r3, [r2, #64]	; 0x40
 80098d2:	4b06      	ldr	r3, [pc, #24]	; (80098ec <HAL_MspInit+0x4c>)
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40023800 	.word	0x40023800

080098f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08c      	sub	sp, #48	; 0x30
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098f8:	f107 031c 	add.w	r3, r7, #28
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a53      	ldr	r2, [pc, #332]	; (8009a5c <HAL_ADC_MspInit+0x16c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d172      	bne.n	80099f8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009912:	2300      	movs	r3, #0
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	4b52      	ldr	r3, [pc, #328]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991a:	4a51      	ldr	r2, [pc, #324]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 800991c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009920:	6453      	str	r3, [r2, #68]	; 0x44
 8009922:	4b4f      	ldr	r3, [pc, #316]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	4b4b      	ldr	r3, [pc, #300]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	4a4a      	ldr	r2, [pc, #296]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009938:	f043 0304 	orr.w	r3, r3, #4
 800993c:	6313      	str	r3, [r2, #48]	; 0x30
 800993e:	4b48      	ldr	r3, [pc, #288]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
 800994e:	4b44      	ldr	r3, [pc, #272]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	4a43      	ldr	r2, [pc, #268]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009954:	f043 0301 	orr.w	r3, r3, #1
 8009958:	6313      	str	r3, [r2, #48]	; 0x30
 800995a:	4b41      	ldr	r3, [pc, #260]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 800995c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = FR_Pin|SR_Pin;
 8009966:	2303      	movs	r3, #3
 8009968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800996a:	2303      	movs	r3, #3
 800996c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996e:	2300      	movs	r3, #0
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009972:	f107 031c 	add.w	r3, r7, #28
 8009976:	4619      	mov	r1, r3
 8009978:	483a      	ldr	r0, [pc, #232]	; (8009a64 <HAL_ADC_MspInit+0x174>)
 800997a:	f7f8 ff29 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SL_Pin|FL_Pin;
 800997e:	2303      	movs	r3, #3
 8009980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009982:	2303      	movs	r3, #3
 8009984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009986:	2300      	movs	r3, #0
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800998a:	f107 031c 	add.w	r3, r7, #28
 800998e:	4619      	mov	r1, r3
 8009990:	4835      	ldr	r0, [pc, #212]	; (8009a68 <HAL_ADC_MspInit+0x178>)
 8009992:	f7f8 ff1d 	bl	80027d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8009996:	4b35      	ldr	r3, [pc, #212]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 8009998:	4a35      	ldr	r2, [pc, #212]	; (8009a70 <HAL_ADC_MspInit+0x180>)
 800999a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800999c:	4b33      	ldr	r3, [pc, #204]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099a2:	4b32      	ldr	r3, [pc, #200]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80099a8:	4b30      	ldr	r3, [pc, #192]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80099ae:	4b2f      	ldr	r3, [pc, #188]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80099b6:	4b2d      	ldr	r3, [pc, #180]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80099be:	4b2b      	ldr	r3, [pc, #172]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80099c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80099c6:	4b29      	ldr	r3, [pc, #164]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80099cc:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80099d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80099da:	4824      	ldr	r0, [pc, #144]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099dc:	f7f8 f83e 	bl	8001a5c <HAL_DMA_Init>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80099e6:	f7fe f873 	bl	8007ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a1f      	ldr	r2, [pc, #124]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
 80099f0:	4a1e      	ldr	r2, [pc, #120]	; (8009a6c <HAL_ADC_MspInit+0x17c>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80099f6:	e02c      	b.n	8009a52 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1d      	ldr	r2, [pc, #116]	; (8009a74 <HAL_ADC_MspInit+0x184>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d127      	bne.n	8009a52 <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	4b16      	ldr	r3, [pc, #88]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	4a15      	ldr	r2, [pc, #84]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a10:	6453      	str	r3, [r2, #68]	; 0x44
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a26:	4a0e      	ldr	r2, [pc, #56]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a28:	f043 0304 	orr.w	r3, r3, #4
 8009a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <HAL_ADC_MspInit+0x170>)
 8009a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	60bb      	str	r3, [r7, #8]
 8009a38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 8009a3a:	2320      	movs	r3, #32
 8009a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8009a46:	f107 031c 	add.w	r3, r7, #28
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <HAL_ADC_MspInit+0x174>)
 8009a4e:	f7f8 febf 	bl	80027d0 <HAL_GPIO_Init>
}
 8009a52:	bf00      	nop
 8009a54:	3730      	adds	r7, #48	; 0x30
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40012000 	.word	0x40012000
 8009a60:	40023800 	.word	0x40023800
 8009a64:	40020800 	.word	0x40020800
 8009a68:	40020000 	.word	0x40020000
 8009a6c:	200025f0 	.word	0x200025f0
 8009a70:	40026470 	.word	0x40026470
 8009a74:	40012100 	.word	0x40012100

08009a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08a      	sub	sp, #40	; 0x28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a80:	f107 0314 	add.w	r3, r7, #20
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	605a      	str	r2, [r3, #4]
 8009a8a:	609a      	str	r2, [r3, #8]
 8009a8c:	60da      	str	r2, [r3, #12]
 8009a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a28      	ldr	r2, [pc, #160]	; (8009b38 <HAL_SPI_MspInit+0xc0>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d14a      	bne.n	8009b30 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	4b27      	ldr	r3, [pc, #156]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8009aaa:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
 8009aba:	4b20      	ldr	r3, [pc, #128]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009ac0:	f043 0304 	orr.w	r3, r3, #4
 8009ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac6:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]
 8009ad6:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009adc:	f043 0302 	orr.w	r3, r3, #2
 8009ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ae2:	4b16      	ldr	r3, [pc, #88]	; (8009b3c <HAL_SPI_MspInit+0xc4>)
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	60bb      	str	r3, [r7, #8]
 8009aec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009aee:	230c      	movs	r3, #12
 8009af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af2:	2302      	movs	r3, #2
 8009af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009afa:	2303      	movs	r3, #3
 8009afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009afe:	2305      	movs	r3, #5
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	4619      	mov	r1, r3
 8009b08:	480d      	ldr	r0, [pc, #52]	; (8009b40 <HAL_SPI_MspInit+0xc8>)
 8009b0a:	f7f8 fe61 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b14:	2302      	movs	r3, #2
 8009b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009b20:	2305      	movs	r3, #5
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b24:	f107 0314 	add.w	r3, r7, #20
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4806      	ldr	r0, [pc, #24]	; (8009b44 <HAL_SPI_MspInit+0xcc>)
 8009b2c:	f7f8 fe50 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009b30:	bf00      	nop
 8009b32:	3728      	adds	r7, #40	; 0x28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	40003800 	.word	0x40003800
 8009b3c:	40023800 	.word	0x40023800
 8009b40:	40020800 	.word	0x40020800
 8009b44:	40020400 	.word	0x40020400

08009b48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08c      	sub	sp, #48	; 0x30
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b50:	f107 031c 	add.w	r3, r7, #28
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	605a      	str	r2, [r3, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a32      	ldr	r2, [pc, #200]	; (8009c30 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d12d      	bne.n	8009bc6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b72:	4a30      	ldr	r2, [pc, #192]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b74:	f043 0301 	orr.w	r3, r3, #1
 8009b78:	6453      	str	r3, [r2, #68]	; 0x44
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	61bb      	str	r3, [r7, #24]
 8009b84:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	4b2a      	ldr	r3, [pc, #168]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	4a29      	ldr	r2, [pc, #164]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6313      	str	r3, [r2, #48]	; 0x30
 8009b96:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8009ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bb8:	f107 031c 	add.w	r3, r7, #28
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	481e      	ldr	r0, [pc, #120]	; (8009c38 <HAL_TIM_Encoder_MspInit+0xf0>)
 8009bc0:	f7f8 fe06 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8009bc4:	e030      	b.n	8009c28 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a1c      	ldr	r2, [pc, #112]	; (8009c3c <HAL_TIM_Encoder_MspInit+0xf4>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d12b      	bne.n	8009c28 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd8:	4a16      	ldr	r2, [pc, #88]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009bda:	f043 0302 	orr.w	r3, r3, #2
 8009bde:	6453      	str	r3, [r2, #68]	; 0x44
 8009be0:	4b14      	ldr	r3, [pc, #80]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf4:	4a0f      	ldr	r2, [pc, #60]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009bf6:	f043 0304 	orr.w	r3, r3, #4
 8009bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <HAL_TIM_Encoder_MspInit+0xec>)
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009c08:	23c0      	movs	r3, #192	; 0xc0
 8009c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c14:	2300      	movs	r3, #0
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c1c:	f107 031c 	add.w	r3, r7, #28
 8009c20:	4619      	mov	r1, r3
 8009c22:	4807      	ldr	r0, [pc, #28]	; (8009c40 <HAL_TIM_Encoder_MspInit+0xf8>)
 8009c24:	f7f8 fdd4 	bl	80027d0 <HAL_GPIO_Init>
}
 8009c28:	bf00      	nop
 8009c2a:	3730      	adds	r7, #48	; 0x30
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40023800 	.word	0x40023800
 8009c38:	40020000 	.word	0x40020000
 8009c3c:	40010400 	.word	0x40010400
 8009c40:	40020800 	.word	0x40020800

08009c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c54:	d10e      	bne.n	8009c74 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c60:	f043 0301 	orr.w	r3, r3, #1
 8009c64:	6413      	str	r3, [r2, #64]	; 0x40
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8009c72:	e01a      	b.n	8009caa <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM3)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0f      	ldr	r2, [pc, #60]	; (8009cb8 <HAL_TIM_PWM_MspInit+0x74>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d115      	bne.n	8009caa <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	4a0b      	ldr	r2, [pc, #44]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c88:	f043 0302 	orr.w	r3, r3, #2
 8009c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c8e:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <HAL_TIM_PWM_MspInit+0x70>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	60bb      	str	r3, [r7, #8]
 8009c98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	201d      	movs	r0, #29
 8009ca0:	f7f7 fea5 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009ca4:	201d      	movs	r0, #29
 8009ca6:	f7f7 febe 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	40023800 	.word	0x40023800
 8009cb8:	40000400 	.word	0x40000400

08009cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1c      	ldr	r2, [pc, #112]	; (8009d3c <HAL_TIM_Base_MspInit+0x80>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d116      	bne.n	8009cfc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009cd8:	f043 0304 	orr.w	r3, r3, #4
 8009cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8009cde:	4b18      	ldr	r3, [pc, #96]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	201e      	movs	r0, #30
 8009cf0:	f7f7 fe7d 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009cf4:	201e      	movs	r0, #30
 8009cf6:	f7f7 fe96 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009cfa:	e01a      	b.n	8009d32 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a10      	ldr	r2, [pc, #64]	; (8009d44 <HAL_TIM_Base_MspInit+0x88>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d115      	bne.n	8009d32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	4a0c      	ldr	r2, [pc, #48]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009d10:	f043 0308 	orr.w	r3, r3, #8
 8009d14:	6413      	str	r3, [r2, #64]	; 0x40
 8009d16:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <HAL_TIM_Base_MspInit+0x84>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f003 0308 	and.w	r3, r3, #8
 8009d1e:	60bb      	str	r3, [r7, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8009d22:	2200      	movs	r2, #0
 8009d24:	2100      	movs	r1, #0
 8009d26:	2032      	movs	r0, #50	; 0x32
 8009d28:	f7f7 fe61 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009d2c:	2032      	movs	r0, #50	; 0x32
 8009d2e:	f7f7 fe7a 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40000800 	.word	0x40000800
 8009d40:	40023800 	.word	0x40023800
 8009d44:	40000c00 	.word	0x40000c00

08009d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	; 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	605a      	str	r2, [r3, #4]
 8009d5a:	609a      	str	r2, [r3, #8]
 8009d5c:	60da      	str	r2, [r3, #12]
 8009d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d68:	d13d      	bne.n	8009de6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d72:	4a30      	ldr	r2, [pc, #192]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d74:	f043 0301 	orr.w	r3, r3, #1
 8009d78:	6313      	str	r3, [r2, #48]	; 0x30
 8009d7a:	4b2e      	ldr	r3, [pc, #184]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	613b      	str	r3, [r7, #16]
 8009d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	4a29      	ldr	r2, [pc, #164]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d90:	f043 0302 	orr.w	r3, r3, #2
 8009d94:	6313      	str	r3, [r2, #48]	; 0x30
 8009d96:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8009da2:	2320      	movs	r3, #32
 8009da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009da6:	2302      	movs	r3, #2
 8009da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dae:	2300      	movs	r3, #0
 8009db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009db2:	2301      	movs	r3, #1
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8009db6:	f107 0314 	add.w	r3, r7, #20
 8009dba:	4619      	mov	r1, r3
 8009dbc:	481e      	ldr	r0, [pc, #120]	; (8009e38 <HAL_TIM_MspPostInit+0xf0>)
 8009dbe:	f7f8 fd07 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FUN_Pin;
 8009dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FUN_GPIO_Port, &GPIO_InitStruct);
 8009dd8:	f107 0314 	add.w	r3, r7, #20
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4817      	ldr	r0, [pc, #92]	; (8009e3c <HAL_TIM_MspPostInit+0xf4>)
 8009de0:	f7f8 fcf6 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009de4:	e022      	b.n	8009e2c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <HAL_TIM_MspPostInit+0xf8>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d11d      	bne.n	8009e2c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009df0:	2300      	movs	r3, #0
 8009df2:	60bb      	str	r3, [r7, #8]
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df8:	4a0e      	ldr	r2, [pc, #56]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009dfa:	f043 0302 	orr.w	r3, r3, #2
 8009dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8009e00:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <HAL_TIM_MspPostInit+0xec>)
 8009e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	60bb      	str	r3, [r7, #8]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e10:	2302      	movs	r3, #2
 8009e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e20:	f107 0314 	add.w	r3, r7, #20
 8009e24:	4619      	mov	r1, r3
 8009e26:	4805      	ldr	r0, [pc, #20]	; (8009e3c <HAL_TIM_MspPostInit+0xf4>)
 8009e28:	f7f8 fcd2 	bl	80027d0 <HAL_GPIO_Init>
}
 8009e2c:	bf00      	nop
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40023800 	.word	0x40023800
 8009e38:	40020000 	.word	0x40020000
 8009e3c:	40020400 	.word	0x40020400
 8009e40:	40000400 	.word	0x40000400

08009e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08a      	sub	sp, #40	; 0x28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	605a      	str	r2, [r3, #4]
 8009e56:	609a      	str	r2, [r3, #8]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a19      	ldr	r2, [pc, #100]	; (8009ec8 <HAL_UART_MspInit+0x84>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d12c      	bne.n	8009ec0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009e66:	2300      	movs	r3, #0
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	4b18      	ldr	r3, [pc, #96]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e74:	6413      	str	r3, [r2, #64]	; 0x40
 8009e76:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e82:	2300      	movs	r3, #0
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	4b11      	ldr	r3, [pc, #68]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8a:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e8c:	f043 0304 	orr.w	r3, r3, #4
 8009e90:	6313      	str	r3, [r2, #48]	; 0x30
 8009e92:	4b0e      	ldr	r3, [pc, #56]	; (8009ecc <HAL_UART_MspInit+0x88>)
 8009e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009e9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eac:	2303      	movs	r3, #3
 8009eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009eb0:	2307      	movs	r3, #7
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4805      	ldr	r0, [pc, #20]	; (8009ed0 <HAL_UART_MspInit+0x8c>)
 8009ebc:	f7f8 fc88 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009ec0:	bf00      	nop
 8009ec2:	3728      	adds	r7, #40	; 0x28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	40004800 	.word	0x40004800
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	40020800 	.word	0x40020800

08009ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009ed8:	bf00      	nop
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009ee6:	e7fe      	b.n	8009ee6 <HardFault_Handler+0x4>

08009ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009eec:	e7fe      	b.n	8009eec <MemManage_Handler+0x4>

08009eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009ef2:	e7fe      	b.n	8009ef2 <BusFault_Handler+0x4>

08009ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009ef8:	e7fe      	b.n	8009ef8 <UsageFault_Handler+0x4>

08009efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009efa:	b480      	push	{r7}
 8009efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009efe:	bf00      	nop
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f0c:	bf00      	nop
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009f16:	b480      	push	{r7}
 8009f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009f1a:	bf00      	nop
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009f28:	f7f7 f810 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009f2c:	bf00      	nop
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009f34:	4802      	ldr	r0, [pc, #8]	; (8009f40 <TIM3_IRQHandler+0x10>)
 8009f36:	f7fa f8de 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009f3a:	bf00      	nop
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200024b0 	.word	0x200024b0

08009f44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009f48:	4802      	ldr	r0, [pc, #8]	; (8009f54 <TIM4_IRQHandler+0x10>)
 8009f4a:	f7fa f8d4 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009f4e:	bf00      	nop
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20002360 	.word	0x20002360

08009f58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009f5c:	4802      	ldr	r0, [pc, #8]	; (8009f68 <TIM5_IRQHandler+0x10>)
 8009f5e:	f7fa f8ca 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8009f62:	bf00      	nop
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	2000246c 	.word	0x2000246c

08009f6c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009f70:	4802      	ldr	r0, [pc, #8]	; (8009f7c <DMA2_Stream4_IRQHandler+0x10>)
 8009f72:	f7f7 fef1 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8009f76:	bf00      	nop
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200025f0 	.word	0x200025f0

08009f80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e00a      	b.n	8009fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009f92:	f3af 8000 	nop.w
 8009f96:	4601      	mov	r1, r0
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	60ba      	str	r2, [r7, #8]
 8009f9e:	b2ca      	uxtb	r2, r1
 8009fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	dbf0      	blt.n	8009f92 <_read+0x12>
	}

return len;
 8009fb0:	687b      	ldr	r3, [r7, #4]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
 8009fca:	e009      	b.n	8009fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	60ba      	str	r2, [r7, #8]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fd f863 	bl	80070a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	dbf1      	blt.n	8009fcc <_write+0x12>
	}
	return len;
 8009fe8:	687b      	ldr	r3, [r7, #4]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <_close>:

int _close(int file)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a01a:	605a      	str	r2, [r3, #4]
	return 0;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <_isatty>:

int _isatty(int file)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
	return 1;
 800a032:	2301      	movs	r3, #1
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
	return 0;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
	...

0800a05c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a064:	4b11      	ldr	r3, [pc, #68]	; (800a0ac <_sbrk+0x50>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <_sbrk+0x16>
		heap_end = &end;
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <_sbrk+0x50>)
 800a06e:	4a10      	ldr	r2, [pc, #64]	; (800a0b0 <_sbrk+0x54>)
 800a070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <_sbrk+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a078:	4b0c      	ldr	r3, [pc, #48]	; (800a0ac <_sbrk+0x50>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	466a      	mov	r2, sp
 800a082:	4293      	cmp	r3, r2
 800a084:	d907      	bls.n	800a096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a086:	f000 f8e7 	bl	800a258 <__errno>
 800a08a:	4602      	mov	r2, r0
 800a08c:	230c      	movs	r3, #12
 800a08e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	e006      	b.n	800a0a4 <_sbrk+0x48>
	}

	heap_end += incr;
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <_sbrk+0x50>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	4a03      	ldr	r2, [pc, #12]	; (800a0ac <_sbrk+0x50>)
 800a0a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20000204 	.word	0x20000204
 800a0b0:	20002a08 	.word	0x20002a08

0800a0b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a0b8:	4b16      	ldr	r3, [pc, #88]	; (800a114 <SystemInit+0x60>)
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	4a15      	ldr	r2, [pc, #84]	; (800a114 <SystemInit+0x60>)
 800a0c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <SystemInit+0x64>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a12      	ldr	r2, [pc, #72]	; (800a118 <SystemInit+0x64>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a0d4:	4b10      	ldr	r3, [pc, #64]	; (800a118 <SystemInit+0x64>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <SystemInit+0x64>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a0e      	ldr	r2, [pc, #56]	; (800a118 <SystemInit+0x64>)
 800a0e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a0e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	; (800a118 <SystemInit+0x64>)
 800a0ec:	4a0b      	ldr	r2, [pc, #44]	; (800a11c <SystemInit+0x68>)
 800a0ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a0f0:	4b09      	ldr	r3, [pc, #36]	; (800a118 <SystemInit+0x64>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a08      	ldr	r2, [pc, #32]	; (800a118 <SystemInit+0x64>)
 800a0f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <SystemInit+0x64>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a102:	4b04      	ldr	r3, [pc, #16]	; (800a114 <SystemInit+0x60>)
 800a104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a108:	609a      	str	r2, [r3, #8]
#endif
}
 800a10a:	bf00      	nop
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	e000ed00 	.word	0xe000ed00
 800a118:	40023800 	.word	0x40023800
 800a11c:	24003010 	.word	0x24003010

0800a120 <Buzzer_PWM_OUT>:
// [argument] pwm,period (0 ~ 1000)
// [Substitutiong] nothing
// [return] nothing
///////////////////////////////////////////////////////////////////////
void Buzzer_PWM_OUT( uint32_t pwm, uint32_t period )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  if ( buzzer_period_buff != period ){
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <Buzzer_PWM_OUT+0x70>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	4293      	cmp	r3, r2
 800a134:	d01a      	beq.n	800a16c <Buzzer_PWM_OUT+0x4c>
    htim2.Instance = TIM2;
 800a136:	4b17      	ldr	r3, [pc, #92]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a13c:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = period;
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	6053      	str	r3, [r2, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a144:	4b13      	ldr	r3, [pc, #76]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a146:	2200      	movs	r2, #0
 800a148:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 99;
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a14c:	2263      	movs	r2, #99	; 0x63
 800a14e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a150:	4b10      	ldr	r3, [pc, #64]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a152:	2200      	movs	r2, #0
 800a154:	611a      	str	r2, [r3, #16]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a156:	480f      	ldr	r0, [pc, #60]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a158:	f7f9 fe9b 	bl	8003e92 <HAL_TIM_PWM_Init>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <Buzzer_PWM_OUT+0x46>
    {
      Error_Handler();
 800a162:	f7fd fcb5 	bl	8007ad0 <Error_Handler>
    }
    buzzer_period_buff = period;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	4a09      	ldr	r2, [pc, #36]	; (800a190 <Buzzer_PWM_OUT+0x70>)
 800a16a:	6013      	str	r3, [r2, #0]
  }

  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	635a      	str	r2, [r3, #52]	; 0x34

	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK){
 800a174:	2100      	movs	r1, #0
 800a176:	4807      	ldr	r0, [pc, #28]	; (800a194 <Buzzer_PWM_OUT+0x74>)
 800a178:	f7f9 feb6 	bl	8003ee8 <HAL_TIM_PWM_Start>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <Buzzer_PWM_OUT+0x66>
		Error_Handler();
 800a182:	f7fd fca5 	bl	8007ad0 <Error_Handler>
	}
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000208 	.word	0x20000208
 800a194:	20002770 	.word	0x20002770

0800a198 <Buzzer_Scale>:



void Buzzer_Scale( uint16_t scale, uint16_t time_beep )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	460a      	mov	r2, r1
 800a1a2:	80fb      	strh	r3, [r7, #6]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	80bb      	strh	r3, [r7, #4]
	Buzzer_PWM_OUT( 99, scale );
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	2063      	movs	r0, #99	; 0x63
 800a1ae:	f7ff ffb7 	bl	800a120 <Buzzer_PWM_OUT>
    buzzer_counter = 0;
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <Buzzer_Scale+0x30>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	801a      	strh	r2, [r3, #0]
    beep_time = time_beep;
 800a1b8:	4a04      	ldr	r2, [pc, #16]	; (800a1cc <Buzzer_Scale+0x34>)
 800a1ba:	88bb      	ldrh	r3, [r7, #4]
 800a1bc:	8013      	strh	r3, [r2, #0]
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	200025ec 	.word	0x200025ec
 800a1cc:	20002744 	.word	0x20002744

0800a1d0 <Buzzer_Control>:

void Buzzer_Control( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  if ( buzzer_counter > beep_time ){
 800a1d4:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <Buzzer_Control+0x2c>)
 800a1d6:	881a      	ldrh	r2, [r3, #0]
 800a1d8:	4b09      	ldr	r3, [pc, #36]	; (800a200 <Buzzer_Control+0x30>)
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d905      	bls.n	800a1ec <Buzzer_Control+0x1c>
    Buzzer_PWM_OUT( 0, NORMAL );
 800a1e0:	f240 311f 	movw	r1, #799	; 0x31f
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f7ff ff9b 	bl	800a120 <Buzzer_PWM_OUT>
  } else {
    buzzer_counter++;
  }
}
 800a1ea:	e005      	b.n	800a1f8 <Buzzer_Control+0x28>
    buzzer_counter++;
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <Buzzer_Control+0x2c>)
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	4b01      	ldr	r3, [pc, #4]	; (800a1fc <Buzzer_Control+0x2c>)
 800a1f6:	801a      	strh	r2, [r3, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200025ec 	.word	0x200025ec
 800a200:	20002744 	.word	0x20002744

0800a204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a23c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a20a:	e003      	b.n	800a214 <LoopCopyDataInit>

0800a20c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a20c:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a20e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a212:	3104      	adds	r1, #4

0800a214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a214:	480b      	ldr	r0, [pc, #44]	; (800a244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a216:	4b0c      	ldr	r3, [pc, #48]	; (800a248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a21a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a21c:	d3f6      	bcc.n	800a20c <CopyDataInit>
  ldr  r2, =_sbss
 800a21e:	4a0b      	ldr	r2, [pc, #44]	; (800a24c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a220:	e002      	b.n	800a228 <LoopFillZerobss>

0800a222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a224:	f842 3b04 	str.w	r3, [r2], #4

0800a228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a22a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a22c:	d3f9      	bcc.n	800a222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a22e:	f7ff ff41 	bl	800a0b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a232:	f000 f817 	bl	800a264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a236:	f7fc ff45 	bl	80070c4 <main>
  bx  lr    
 800a23a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a23c:	20003000 	.word	0x20003000
  ldr  r3, =_sidata
 800a240:	0800d060 	.word	0x0800d060
  ldr  r0, =_sdata
 800a244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a248:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800a24c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800a250:	20002a08 	.word	0x20002a08

0800a254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a254:	e7fe      	b.n	800a254 <ADC_IRQHandler>
	...

0800a258 <__errno>:
 800a258:	4b01      	ldr	r3, [pc, #4]	; (800a260 <__errno+0x8>)
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	2000000c 	.word	0x2000000c

0800a264 <__libc_init_array>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	4e0d      	ldr	r6, [pc, #52]	; (800a29c <__libc_init_array+0x38>)
 800a268:	4c0d      	ldr	r4, [pc, #52]	; (800a2a0 <__libc_init_array+0x3c>)
 800a26a:	1ba4      	subs	r4, r4, r6
 800a26c:	10a4      	asrs	r4, r4, #2
 800a26e:	2500      	movs	r5, #0
 800a270:	42a5      	cmp	r5, r4
 800a272:	d109      	bne.n	800a288 <__libc_init_array+0x24>
 800a274:	4e0b      	ldr	r6, [pc, #44]	; (800a2a4 <__libc_init_array+0x40>)
 800a276:	4c0c      	ldr	r4, [pc, #48]	; (800a2a8 <__libc_init_array+0x44>)
 800a278:	f002 fc60 	bl	800cb3c <_init>
 800a27c:	1ba4      	subs	r4, r4, r6
 800a27e:	10a4      	asrs	r4, r4, #2
 800a280:	2500      	movs	r5, #0
 800a282:	42a5      	cmp	r5, r4
 800a284:	d105      	bne.n	800a292 <__libc_init_array+0x2e>
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a28c:	4798      	blx	r3
 800a28e:	3501      	adds	r5, #1
 800a290:	e7ee      	b.n	800a270 <__libc_init_array+0xc>
 800a292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a296:	4798      	blx	r3
 800a298:	3501      	adds	r5, #1
 800a29a:	e7f2      	b.n	800a282 <__libc_init_array+0x1e>
 800a29c:	0800d058 	.word	0x0800d058
 800a2a0:	0800d058 	.word	0x0800d058
 800a2a4:	0800d058 	.word	0x0800d058
 800a2a8:	0800d05c 	.word	0x0800d05c

0800a2ac <memset>:
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d100      	bne.n	800a2b6 <memset+0xa>
 800a2b4:	4770      	bx	lr
 800a2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ba:	e7f9      	b.n	800a2b0 <memset+0x4>

0800a2bc <__cvt>:
 800a2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	ec55 4b10 	vmov	r4, r5, d0
 800a2c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a2c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	460e      	mov	r6, r1
 800a2ce:	4691      	mov	r9, r2
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	bfb8      	it	lt
 800a2d4:	4622      	movlt	r2, r4
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	f027 0720 	bic.w	r7, r7, #32
 800a2dc:	bfbb      	ittet	lt
 800a2de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a2e2:	461d      	movlt	r5, r3
 800a2e4:	2300      	movge	r3, #0
 800a2e6:	232d      	movlt	r3, #45	; 0x2d
 800a2e8:	bfb8      	it	lt
 800a2ea:	4614      	movlt	r4, r2
 800a2ec:	2f46      	cmp	r7, #70	; 0x46
 800a2ee:	700b      	strb	r3, [r1, #0]
 800a2f0:	d004      	beq.n	800a2fc <__cvt+0x40>
 800a2f2:	2f45      	cmp	r7, #69	; 0x45
 800a2f4:	d100      	bne.n	800a2f8 <__cvt+0x3c>
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	2102      	movs	r1, #2
 800a2fa:	e000      	b.n	800a2fe <__cvt+0x42>
 800a2fc:	2103      	movs	r1, #3
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	ab02      	add	r3, sp, #8
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	4632      	mov	r2, r6
 800a308:	4653      	mov	r3, sl
 800a30a:	ec45 4b10 	vmov	d0, r4, r5
 800a30e:	f000 feaf 	bl	800b070 <_dtoa_r>
 800a312:	2f47      	cmp	r7, #71	; 0x47
 800a314:	4680      	mov	r8, r0
 800a316:	d102      	bne.n	800a31e <__cvt+0x62>
 800a318:	f019 0f01 	tst.w	r9, #1
 800a31c:	d026      	beq.n	800a36c <__cvt+0xb0>
 800a31e:	2f46      	cmp	r7, #70	; 0x46
 800a320:	eb08 0906 	add.w	r9, r8, r6
 800a324:	d111      	bne.n	800a34a <__cvt+0x8e>
 800a326:	f898 3000 	ldrb.w	r3, [r8]
 800a32a:	2b30      	cmp	r3, #48	; 0x30
 800a32c:	d10a      	bne.n	800a344 <__cvt+0x88>
 800a32e:	2200      	movs	r2, #0
 800a330:	2300      	movs	r3, #0
 800a332:	4620      	mov	r0, r4
 800a334:	4629      	mov	r1, r5
 800a336:	f7f6 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a33a:	b918      	cbnz	r0, 800a344 <__cvt+0x88>
 800a33c:	f1c6 0601 	rsb	r6, r6, #1
 800a340:	f8ca 6000 	str.w	r6, [sl]
 800a344:	f8da 3000 	ldr.w	r3, [sl]
 800a348:	4499      	add	r9, r3
 800a34a:	2200      	movs	r2, #0
 800a34c:	2300      	movs	r3, #0
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f6 fbb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a356:	b938      	cbnz	r0, 800a368 <__cvt+0xac>
 800a358:	2230      	movs	r2, #48	; 0x30
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	454b      	cmp	r3, r9
 800a35e:	d205      	bcs.n	800a36c <__cvt+0xb0>
 800a360:	1c59      	adds	r1, r3, #1
 800a362:	9103      	str	r1, [sp, #12]
 800a364:	701a      	strb	r2, [r3, #0]
 800a366:	e7f8      	b.n	800a35a <__cvt+0x9e>
 800a368:	f8cd 900c 	str.w	r9, [sp, #12]
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a370:	eba3 0308 	sub.w	r3, r3, r8
 800a374:	4640      	mov	r0, r8
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	b004      	add	sp, #16
 800a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a37e <__exponent>:
 800a37e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a380:	2900      	cmp	r1, #0
 800a382:	4604      	mov	r4, r0
 800a384:	bfba      	itte	lt
 800a386:	4249      	neglt	r1, r1
 800a388:	232d      	movlt	r3, #45	; 0x2d
 800a38a:	232b      	movge	r3, #43	; 0x2b
 800a38c:	2909      	cmp	r1, #9
 800a38e:	f804 2b02 	strb.w	r2, [r4], #2
 800a392:	7043      	strb	r3, [r0, #1]
 800a394:	dd20      	ble.n	800a3d8 <__exponent+0x5a>
 800a396:	f10d 0307 	add.w	r3, sp, #7
 800a39a:	461f      	mov	r7, r3
 800a39c:	260a      	movs	r6, #10
 800a39e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a3a2:	fb06 1115 	mls	r1, r6, r5, r1
 800a3a6:	3130      	adds	r1, #48	; 0x30
 800a3a8:	2d09      	cmp	r5, #9
 800a3aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3ae:	f103 32ff 	add.w	r2, r3, #4294967295
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	dc09      	bgt.n	800a3ca <__exponent+0x4c>
 800a3b6:	3130      	adds	r1, #48	; 0x30
 800a3b8:	3b02      	subs	r3, #2
 800a3ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a3be:	42bb      	cmp	r3, r7
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	d304      	bcc.n	800a3ce <__exponent+0x50>
 800a3c4:	1a10      	subs	r0, r2, r0
 800a3c6:	b003      	add	sp, #12
 800a3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	e7e7      	b.n	800a39e <__exponent+0x20>
 800a3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d2:	f804 2b01 	strb.w	r2, [r4], #1
 800a3d6:	e7f2      	b.n	800a3be <__exponent+0x40>
 800a3d8:	2330      	movs	r3, #48	; 0x30
 800a3da:	4419      	add	r1, r3
 800a3dc:	7083      	strb	r3, [r0, #2]
 800a3de:	1d02      	adds	r2, r0, #4
 800a3e0:	70c1      	strb	r1, [r0, #3]
 800a3e2:	e7ef      	b.n	800a3c4 <__exponent+0x46>

0800a3e4 <_printf_float>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	b08d      	sub	sp, #52	; 0x34
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	f001 fd6d 	bl	800bed4 <_localeconv_r>
 800a3fa:	6803      	ldr	r3, [r0, #0]
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f5 fee6 	bl	80001d0 <strlen>
 800a404:	2300      	movs	r3, #0
 800a406:	930a      	str	r3, [sp, #40]	; 0x28
 800a408:	f8d8 3000 	ldr.w	r3, [r8]
 800a40c:	9005      	str	r0, [sp, #20]
 800a40e:	3307      	adds	r3, #7
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	f103 0208 	add.w	r2, r3, #8
 800a418:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a41c:	f8d4 b000 	ldr.w	fp, [r4]
 800a420:	f8c8 2000 	str.w	r2, [r8]
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a42c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a430:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a434:	9307      	str	r3, [sp, #28]
 800a436:	f8cd 8018 	str.w	r8, [sp, #24]
 800a43a:	f04f 32ff 	mov.w	r2, #4294967295
 800a43e:	4ba7      	ldr	r3, [pc, #668]	; (800a6dc <_printf_float+0x2f8>)
 800a440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a444:	f7f6 fb72 	bl	8000b2c <__aeabi_dcmpun>
 800a448:	bb70      	cbnz	r0, 800a4a8 <_printf_float+0xc4>
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	4ba3      	ldr	r3, [pc, #652]	; (800a6dc <_printf_float+0x2f8>)
 800a450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a454:	f7f6 fb4c 	bl	8000af0 <__aeabi_dcmple>
 800a458:	bb30      	cbnz	r0, 800a4a8 <_printf_float+0xc4>
 800a45a:	2200      	movs	r2, #0
 800a45c:	2300      	movs	r3, #0
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	f7f6 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800a466:	b110      	cbz	r0, 800a46e <_printf_float+0x8a>
 800a468:	232d      	movs	r3, #45	; 0x2d
 800a46a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a46e:	4a9c      	ldr	r2, [pc, #624]	; (800a6e0 <_printf_float+0x2fc>)
 800a470:	4b9c      	ldr	r3, [pc, #624]	; (800a6e4 <_printf_float+0x300>)
 800a472:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a476:	bf8c      	ite	hi
 800a478:	4690      	movhi	r8, r2
 800a47a:	4698      	movls	r8, r3
 800a47c:	2303      	movs	r3, #3
 800a47e:	f02b 0204 	bic.w	r2, fp, #4
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	6022      	str	r2, [r4, #0]
 800a486:	f04f 0900 	mov.w	r9, #0
 800a48a:	9700      	str	r7, [sp, #0]
 800a48c:	4633      	mov	r3, r6
 800a48e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a490:	4621      	mov	r1, r4
 800a492:	4628      	mov	r0, r5
 800a494:	f000 f9e6 	bl	800a864 <_printf_common>
 800a498:	3001      	adds	r0, #1
 800a49a:	f040 808d 	bne.w	800a5b8 <_printf_float+0x1d4>
 800a49e:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a2:	b00d      	add	sp, #52	; 0x34
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	f7f6 fb3c 	bl	8000b2c <__aeabi_dcmpun>
 800a4b4:	b110      	cbz	r0, 800a4bc <_printf_float+0xd8>
 800a4b6:	4a8c      	ldr	r2, [pc, #560]	; (800a6e8 <_printf_float+0x304>)
 800a4b8:	4b8c      	ldr	r3, [pc, #560]	; (800a6ec <_printf_float+0x308>)
 800a4ba:	e7da      	b.n	800a472 <_printf_float+0x8e>
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	1c4b      	adds	r3, r1, #1
 800a4c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a4c4:	a80a      	add	r0, sp, #40	; 0x28
 800a4c6:	d13e      	bne.n	800a546 <_printf_float+0x162>
 800a4c8:	2306      	movs	r3, #6
 800a4ca:	6063      	str	r3, [r4, #4]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a4d2:	ab09      	add	r3, sp, #36	; 0x24
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	ec49 8b10 	vmov	d0, r8, r9
 800a4da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	f8cd a004 	str.w	sl, [sp, #4]
 800a4e4:	6861      	ldr	r1, [r4, #4]
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f7ff fee8 	bl	800a2bc <__cvt>
 800a4ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a4f0:	2b47      	cmp	r3, #71	; 0x47
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	d109      	bne.n	800a50a <_printf_float+0x126>
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	1cd8      	adds	r0, r3, #3
 800a4fa:	db02      	blt.n	800a502 <_printf_float+0x11e>
 800a4fc:	6862      	ldr	r2, [r4, #4]
 800a4fe:	4293      	cmp	r3, r2
 800a500:	dd47      	ble.n	800a592 <_printf_float+0x1ae>
 800a502:	f1aa 0a02 	sub.w	sl, sl, #2
 800a506:	fa5f fa8a 	uxtb.w	sl, sl
 800a50a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a50e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a510:	d824      	bhi.n	800a55c <_printf_float+0x178>
 800a512:	3901      	subs	r1, #1
 800a514:	4652      	mov	r2, sl
 800a516:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a51a:	9109      	str	r1, [sp, #36]	; 0x24
 800a51c:	f7ff ff2f 	bl	800a37e <__exponent>
 800a520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a522:	1813      	adds	r3, r2, r0
 800a524:	2a01      	cmp	r2, #1
 800a526:	4681      	mov	r9, r0
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	dc02      	bgt.n	800a532 <_printf_float+0x14e>
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	07d1      	lsls	r1, r2, #31
 800a530:	d501      	bpl.n	800a536 <_printf_float+0x152>
 800a532:	3301      	adds	r3, #1
 800a534:	6123      	str	r3, [r4, #16]
 800a536:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0a5      	beq.n	800a48a <_printf_float+0xa6>
 800a53e:	232d      	movs	r3, #45	; 0x2d
 800a540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a544:	e7a1      	b.n	800a48a <_printf_float+0xa6>
 800a546:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a54a:	f000 8177 	beq.w	800a83c <_printf_float+0x458>
 800a54e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a552:	d1bb      	bne.n	800a4cc <_printf_float+0xe8>
 800a554:	2900      	cmp	r1, #0
 800a556:	d1b9      	bne.n	800a4cc <_printf_float+0xe8>
 800a558:	2301      	movs	r3, #1
 800a55a:	e7b6      	b.n	800a4ca <_printf_float+0xe6>
 800a55c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a560:	d119      	bne.n	800a596 <_printf_float+0x1b2>
 800a562:	2900      	cmp	r1, #0
 800a564:	6863      	ldr	r3, [r4, #4]
 800a566:	dd0c      	ble.n	800a582 <_printf_float+0x19e>
 800a568:	6121      	str	r1, [r4, #16]
 800a56a:	b913      	cbnz	r3, 800a572 <_printf_float+0x18e>
 800a56c:	6822      	ldr	r2, [r4, #0]
 800a56e:	07d2      	lsls	r2, r2, #31
 800a570:	d502      	bpl.n	800a578 <_printf_float+0x194>
 800a572:	3301      	adds	r3, #1
 800a574:	440b      	add	r3, r1
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a57c:	f04f 0900 	mov.w	r9, #0
 800a580:	e7d9      	b.n	800a536 <_printf_float+0x152>
 800a582:	b913      	cbnz	r3, 800a58a <_printf_float+0x1a6>
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	07d0      	lsls	r0, r2, #31
 800a588:	d501      	bpl.n	800a58e <_printf_float+0x1aa>
 800a58a:	3302      	adds	r3, #2
 800a58c:	e7f3      	b.n	800a576 <_printf_float+0x192>
 800a58e:	2301      	movs	r3, #1
 800a590:	e7f1      	b.n	800a576 <_printf_float+0x192>
 800a592:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a596:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a59a:	4293      	cmp	r3, r2
 800a59c:	db05      	blt.n	800a5aa <_printf_float+0x1c6>
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	07d1      	lsls	r1, r2, #31
 800a5a4:	d5e8      	bpl.n	800a578 <_printf_float+0x194>
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	e7e5      	b.n	800a576 <_printf_float+0x192>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bfd4      	ite	le
 800a5ae:	f1c3 0302 	rsble	r3, r3, #2
 800a5b2:	2301      	movgt	r3, #1
 800a5b4:	4413      	add	r3, r2
 800a5b6:	e7de      	b.n	800a576 <_printf_float+0x192>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	055a      	lsls	r2, r3, #21
 800a5bc:	d407      	bmi.n	800a5ce <_printf_float+0x1ea>
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b8      	blx	r7
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d12b      	bne.n	800a624 <_printf_float+0x240>
 800a5cc:	e767      	b.n	800a49e <_printf_float+0xba>
 800a5ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a5d2:	f240 80dc 	bls.w	800a78e <_printf_float+0x3aa>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5de:	f7f6 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d033      	beq.n	800a64e <_printf_float+0x26a>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	4a41      	ldr	r2, [pc, #260]	; (800a6f0 <_printf_float+0x30c>)
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	f43f af54 	beq.w	800a49e <_printf_float+0xba>
 800a5f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	db02      	blt.n	800a604 <_printf_float+0x220>
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	07d8      	lsls	r0, r3, #31
 800a602:	d50f      	bpl.n	800a624 <_printf_float+0x240>
 800a604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	f43f af45 	beq.w	800a49e <_printf_float+0xba>
 800a614:	f04f 0800 	mov.w	r8, #0
 800a618:	f104 091a 	add.w	r9, r4, #26
 800a61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61e:	3b01      	subs	r3, #1
 800a620:	4543      	cmp	r3, r8
 800a622:	dc09      	bgt.n	800a638 <_printf_float+0x254>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	079b      	lsls	r3, r3, #30
 800a628:	f100 8103 	bmi.w	800a832 <_printf_float+0x44e>
 800a62c:	68e0      	ldr	r0, [r4, #12]
 800a62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a630:	4298      	cmp	r0, r3
 800a632:	bfb8      	it	lt
 800a634:	4618      	movlt	r0, r3
 800a636:	e734      	b.n	800a4a2 <_printf_float+0xbe>
 800a638:	2301      	movs	r3, #1
 800a63a:	464a      	mov	r2, r9
 800a63c:	4631      	mov	r1, r6
 800a63e:	4628      	mov	r0, r5
 800a640:	47b8      	blx	r7
 800a642:	3001      	adds	r0, #1
 800a644:	f43f af2b 	beq.w	800a49e <_printf_float+0xba>
 800a648:	f108 0801 	add.w	r8, r8, #1
 800a64c:	e7e6      	b.n	800a61c <_printf_float+0x238>
 800a64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a650:	2b00      	cmp	r3, #0
 800a652:	dc2b      	bgt.n	800a6ac <_printf_float+0x2c8>
 800a654:	2301      	movs	r3, #1
 800a656:	4a26      	ldr	r2, [pc, #152]	; (800a6f0 <_printf_float+0x30c>)
 800a658:	4631      	mov	r1, r6
 800a65a:	4628      	mov	r0, r5
 800a65c:	47b8      	blx	r7
 800a65e:	3001      	adds	r0, #1
 800a660:	f43f af1d 	beq.w	800a49e <_printf_float+0xba>
 800a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a666:	b923      	cbnz	r3, 800a672 <_printf_float+0x28e>
 800a668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66a:	b913      	cbnz	r3, 800a672 <_printf_float+0x28e>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	07d9      	lsls	r1, r3, #31
 800a670:	d5d8      	bpl.n	800a624 <_printf_float+0x240>
 800a672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f af0e 	beq.w	800a49e <_printf_float+0xba>
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	f104 0a1a 	add.w	sl, r4, #26
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	425b      	negs	r3, r3
 800a68e:	454b      	cmp	r3, r9
 800a690:	dc01      	bgt.n	800a696 <_printf_float+0x2b2>
 800a692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a694:	e794      	b.n	800a5c0 <_printf_float+0x1dc>
 800a696:	2301      	movs	r3, #1
 800a698:	4652      	mov	r2, sl
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f aefc 	beq.w	800a49e <_printf_float+0xba>
 800a6a6:	f109 0901 	add.w	r9, r9, #1
 800a6aa:	e7ee      	b.n	800a68a <_printf_float+0x2a6>
 800a6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	bfa8      	it	ge
 800a6b4:	461a      	movge	r2, r3
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	4691      	mov	r9, r2
 800a6ba:	dd07      	ble.n	800a6cc <_printf_float+0x2e8>
 800a6bc:	4613      	mov	r3, r2
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f43f aee9 	beq.w	800a49e <_printf_float+0xba>
 800a6cc:	f104 031a 	add.w	r3, r4, #26
 800a6d0:	f04f 0b00 	mov.w	fp, #0
 800a6d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6d8:	9306      	str	r3, [sp, #24]
 800a6da:	e015      	b.n	800a708 <_printf_float+0x324>
 800a6dc:	7fefffff 	.word	0x7fefffff
 800a6e0:	0800cd94 	.word	0x0800cd94
 800a6e4:	0800cd90 	.word	0x0800cd90
 800a6e8:	0800cd9c 	.word	0x0800cd9c
 800a6ec:	0800cd98 	.word	0x0800cd98
 800a6f0:	0800cda0 	.word	0x0800cda0
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	9a06      	ldr	r2, [sp, #24]
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f aecd 	beq.w	800a49e <_printf_float+0xba>
 800a704:	f10b 0b01 	add.w	fp, fp, #1
 800a708:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a70c:	ebaa 0309 	sub.w	r3, sl, r9
 800a710:	455b      	cmp	r3, fp
 800a712:	dcef      	bgt.n	800a6f4 <_printf_float+0x310>
 800a714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a718:	429a      	cmp	r2, r3
 800a71a:	44d0      	add	r8, sl
 800a71c:	db15      	blt.n	800a74a <_printf_float+0x366>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	07da      	lsls	r2, r3, #31
 800a722:	d412      	bmi.n	800a74a <_printf_float+0x366>
 800a724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a726:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a728:	eba3 020a 	sub.w	r2, r3, sl
 800a72c:	eba3 0a01 	sub.w	sl, r3, r1
 800a730:	4592      	cmp	sl, r2
 800a732:	bfa8      	it	ge
 800a734:	4692      	movge	sl, r2
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	dc0e      	bgt.n	800a75a <_printf_float+0x376>
 800a73c:	f04f 0800 	mov.w	r8, #0
 800a740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a744:	f104 091a 	add.w	r9, r4, #26
 800a748:	e019      	b.n	800a77e <_printf_float+0x39a>
 800a74a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a74e:	4631      	mov	r1, r6
 800a750:	4628      	mov	r0, r5
 800a752:	47b8      	blx	r7
 800a754:	3001      	adds	r0, #1
 800a756:	d1e5      	bne.n	800a724 <_printf_float+0x340>
 800a758:	e6a1      	b.n	800a49e <_printf_float+0xba>
 800a75a:	4653      	mov	r3, sl
 800a75c:	4642      	mov	r2, r8
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	d1e9      	bne.n	800a73c <_printf_float+0x358>
 800a768:	e699      	b.n	800a49e <_printf_float+0xba>
 800a76a:	2301      	movs	r3, #1
 800a76c:	464a      	mov	r2, r9
 800a76e:	4631      	mov	r1, r6
 800a770:	4628      	mov	r0, r5
 800a772:	47b8      	blx	r7
 800a774:	3001      	adds	r0, #1
 800a776:	f43f ae92 	beq.w	800a49e <_printf_float+0xba>
 800a77a:	f108 0801 	add.w	r8, r8, #1
 800a77e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a782:	1a9b      	subs	r3, r3, r2
 800a784:	eba3 030a 	sub.w	r3, r3, sl
 800a788:	4543      	cmp	r3, r8
 800a78a:	dcee      	bgt.n	800a76a <_printf_float+0x386>
 800a78c:	e74a      	b.n	800a624 <_printf_float+0x240>
 800a78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a790:	2a01      	cmp	r2, #1
 800a792:	dc01      	bgt.n	800a798 <_printf_float+0x3b4>
 800a794:	07db      	lsls	r3, r3, #31
 800a796:	d53a      	bpl.n	800a80e <_printf_float+0x42a>
 800a798:	2301      	movs	r3, #1
 800a79a:	4642      	mov	r2, r8
 800a79c:	4631      	mov	r1, r6
 800a79e:	4628      	mov	r0, r5
 800a7a0:	47b8      	blx	r7
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	f43f ae7b 	beq.w	800a49e <_printf_float+0xba>
 800a7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f108 0801 	add.w	r8, r8, #1
 800a7b8:	f43f ae71 	beq.w	800a49e <_printf_float+0xba>
 800a7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f103 3aff 	add.w	sl, r3, #4294967295
 800a7c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f7f6 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7ce:	b9c8      	cbnz	r0, 800a804 <_printf_float+0x420>
 800a7d0:	4653      	mov	r3, sl
 800a7d2:	4642      	mov	r2, r8
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	d10e      	bne.n	800a7fc <_printf_float+0x418>
 800a7de:	e65e      	b.n	800a49e <_printf_float+0xba>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	47b8      	blx	r7
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f43f ae57 	beq.w	800a49e <_printf_float+0xba>
 800a7f0:	f108 0801 	add.w	r8, r8, #1
 800a7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	4543      	cmp	r3, r8
 800a7fa:	dcf1      	bgt.n	800a7e0 <_printf_float+0x3fc>
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a802:	e6de      	b.n	800a5c2 <_printf_float+0x1de>
 800a804:	f04f 0800 	mov.w	r8, #0
 800a808:	f104 0a1a 	add.w	sl, r4, #26
 800a80c:	e7f2      	b.n	800a7f4 <_printf_float+0x410>
 800a80e:	2301      	movs	r3, #1
 800a810:	e7df      	b.n	800a7d2 <_printf_float+0x3ee>
 800a812:	2301      	movs	r3, #1
 800a814:	464a      	mov	r2, r9
 800a816:	4631      	mov	r1, r6
 800a818:	4628      	mov	r0, r5
 800a81a:	47b8      	blx	r7
 800a81c:	3001      	adds	r0, #1
 800a81e:	f43f ae3e 	beq.w	800a49e <_printf_float+0xba>
 800a822:	f108 0801 	add.w	r8, r8, #1
 800a826:	68e3      	ldr	r3, [r4, #12]
 800a828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	4543      	cmp	r3, r8
 800a82e:	dcf0      	bgt.n	800a812 <_printf_float+0x42e>
 800a830:	e6fc      	b.n	800a62c <_printf_float+0x248>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	f104 0919 	add.w	r9, r4, #25
 800a83a:	e7f4      	b.n	800a826 <_printf_float+0x442>
 800a83c:	2900      	cmp	r1, #0
 800a83e:	f43f ae8b 	beq.w	800a558 <_printf_float+0x174>
 800a842:	2300      	movs	r3, #0
 800a844:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a848:	ab09      	add	r3, sp, #36	; 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	ec49 8b10 	vmov	d0, r8, r9
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	f8cd a004 	str.w	sl, [sp, #4]
 800a856:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a85a:	4628      	mov	r0, r5
 800a85c:	f7ff fd2e 	bl	800a2bc <__cvt>
 800a860:	4680      	mov	r8, r0
 800a862:	e648      	b.n	800a4f6 <_printf_float+0x112>

0800a864 <_printf_common>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	4691      	mov	r9, r2
 800a86a:	461f      	mov	r7, r3
 800a86c:	688a      	ldr	r2, [r1, #8]
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a874:	4293      	cmp	r3, r2
 800a876:	bfb8      	it	lt
 800a878:	4613      	movlt	r3, r2
 800a87a:	f8c9 3000 	str.w	r3, [r9]
 800a87e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a882:	4606      	mov	r6, r0
 800a884:	460c      	mov	r4, r1
 800a886:	b112      	cbz	r2, 800a88e <_printf_common+0x2a>
 800a888:	3301      	adds	r3, #1
 800a88a:	f8c9 3000 	str.w	r3, [r9]
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	0699      	lsls	r1, r3, #26
 800a892:	bf42      	ittt	mi
 800a894:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a898:	3302      	addmi	r3, #2
 800a89a:	f8c9 3000 	strmi.w	r3, [r9]
 800a89e:	6825      	ldr	r5, [r4, #0]
 800a8a0:	f015 0506 	ands.w	r5, r5, #6
 800a8a4:	d107      	bne.n	800a8b6 <_printf_common+0x52>
 800a8a6:	f104 0a19 	add.w	sl, r4, #25
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	42ab      	cmp	r3, r5
 800a8b4:	dc28      	bgt.n	800a908 <_printf_common+0xa4>
 800a8b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	3300      	adds	r3, #0
 800a8be:	bf18      	it	ne
 800a8c0:	2301      	movne	r3, #1
 800a8c2:	0692      	lsls	r2, r2, #26
 800a8c4:	d42d      	bmi.n	800a922 <_printf_common+0xbe>
 800a8c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	47c0      	blx	r8
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	d020      	beq.n	800a916 <_printf_common+0xb2>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	68e5      	ldr	r5, [r4, #12]
 800a8d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a8dc:	f003 0306 	and.w	r3, r3, #6
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	bf08      	it	eq
 800a8e4:	1aad      	subeq	r5, r5, r2
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	bf0c      	ite	eq
 800a8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8f0:	2500      	movne	r5, #0
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	bfc4      	itt	gt
 800a8f6:	1a9b      	subgt	r3, r3, r2
 800a8f8:	18ed      	addgt	r5, r5, r3
 800a8fa:	f04f 0900 	mov.w	r9, #0
 800a8fe:	341a      	adds	r4, #26
 800a900:	454d      	cmp	r5, r9
 800a902:	d11a      	bne.n	800a93a <_printf_common+0xd6>
 800a904:	2000      	movs	r0, #0
 800a906:	e008      	b.n	800a91a <_printf_common+0xb6>
 800a908:	2301      	movs	r3, #1
 800a90a:	4652      	mov	r2, sl
 800a90c:	4639      	mov	r1, r7
 800a90e:	4630      	mov	r0, r6
 800a910:	47c0      	blx	r8
 800a912:	3001      	adds	r0, #1
 800a914:	d103      	bne.n	800a91e <_printf_common+0xba>
 800a916:	f04f 30ff 	mov.w	r0, #4294967295
 800a91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91e:	3501      	adds	r5, #1
 800a920:	e7c3      	b.n	800a8aa <_printf_common+0x46>
 800a922:	18e1      	adds	r1, r4, r3
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	2030      	movs	r0, #48	; 0x30
 800a928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a92c:	4422      	add	r2, r4
 800a92e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a936:	3302      	adds	r3, #2
 800a938:	e7c5      	b.n	800a8c6 <_printf_common+0x62>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4622      	mov	r2, r4
 800a93e:	4639      	mov	r1, r7
 800a940:	4630      	mov	r0, r6
 800a942:	47c0      	blx	r8
 800a944:	3001      	adds	r0, #1
 800a946:	d0e6      	beq.n	800a916 <_printf_common+0xb2>
 800a948:	f109 0901 	add.w	r9, r9, #1
 800a94c:	e7d8      	b.n	800a900 <_printf_common+0x9c>
	...

0800a950 <_printf_i>:
 800a950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a954:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a958:	460c      	mov	r4, r1
 800a95a:	7e09      	ldrb	r1, [r1, #24]
 800a95c:	b085      	sub	sp, #20
 800a95e:	296e      	cmp	r1, #110	; 0x6e
 800a960:	4617      	mov	r7, r2
 800a962:	4606      	mov	r6, r0
 800a964:	4698      	mov	r8, r3
 800a966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a968:	f000 80b3 	beq.w	800aad2 <_printf_i+0x182>
 800a96c:	d822      	bhi.n	800a9b4 <_printf_i+0x64>
 800a96e:	2963      	cmp	r1, #99	; 0x63
 800a970:	d036      	beq.n	800a9e0 <_printf_i+0x90>
 800a972:	d80a      	bhi.n	800a98a <_printf_i+0x3a>
 800a974:	2900      	cmp	r1, #0
 800a976:	f000 80b9 	beq.w	800aaec <_printf_i+0x19c>
 800a97a:	2958      	cmp	r1, #88	; 0x58
 800a97c:	f000 8083 	beq.w	800aa86 <_printf_i+0x136>
 800a980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a984:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a988:	e032      	b.n	800a9f0 <_printf_i+0xa0>
 800a98a:	2964      	cmp	r1, #100	; 0x64
 800a98c:	d001      	beq.n	800a992 <_printf_i+0x42>
 800a98e:	2969      	cmp	r1, #105	; 0x69
 800a990:	d1f6      	bne.n	800a980 <_printf_i+0x30>
 800a992:	6820      	ldr	r0, [r4, #0]
 800a994:	6813      	ldr	r3, [r2, #0]
 800a996:	0605      	lsls	r5, r0, #24
 800a998:	f103 0104 	add.w	r1, r3, #4
 800a99c:	d52a      	bpl.n	800a9f4 <_printf_i+0xa4>
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6011      	str	r1, [r2, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da03      	bge.n	800a9ae <_printf_i+0x5e>
 800a9a6:	222d      	movs	r2, #45	; 0x2d
 800a9a8:	425b      	negs	r3, r3
 800a9aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a9ae:	486f      	ldr	r0, [pc, #444]	; (800ab6c <_printf_i+0x21c>)
 800a9b0:	220a      	movs	r2, #10
 800a9b2:	e039      	b.n	800aa28 <_printf_i+0xd8>
 800a9b4:	2973      	cmp	r1, #115	; 0x73
 800a9b6:	f000 809d 	beq.w	800aaf4 <_printf_i+0x1a4>
 800a9ba:	d808      	bhi.n	800a9ce <_printf_i+0x7e>
 800a9bc:	296f      	cmp	r1, #111	; 0x6f
 800a9be:	d020      	beq.n	800aa02 <_printf_i+0xb2>
 800a9c0:	2970      	cmp	r1, #112	; 0x70
 800a9c2:	d1dd      	bne.n	800a980 <_printf_i+0x30>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	f043 0320 	orr.w	r3, r3, #32
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	e003      	b.n	800a9d6 <_printf_i+0x86>
 800a9ce:	2975      	cmp	r1, #117	; 0x75
 800a9d0:	d017      	beq.n	800aa02 <_printf_i+0xb2>
 800a9d2:	2978      	cmp	r1, #120	; 0x78
 800a9d4:	d1d4      	bne.n	800a980 <_printf_i+0x30>
 800a9d6:	2378      	movs	r3, #120	; 0x78
 800a9d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9dc:	4864      	ldr	r0, [pc, #400]	; (800ab70 <_printf_i+0x220>)
 800a9de:	e055      	b.n	800aa8c <_printf_i+0x13c>
 800a9e0:	6813      	ldr	r3, [r2, #0]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6011      	str	r1, [r2, #0]
 800a9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e08c      	b.n	800ab0e <_printf_i+0x1be>
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6011      	str	r1, [r2, #0]
 800a9f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9fc:	bf18      	it	ne
 800a9fe:	b21b      	sxthne	r3, r3
 800aa00:	e7cf      	b.n	800a9a2 <_printf_i+0x52>
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	1d18      	adds	r0, r3, #4
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	0628      	lsls	r0, r5, #24
 800aa0c:	d501      	bpl.n	800aa12 <_printf_i+0xc2>
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	e002      	b.n	800aa18 <_printf_i+0xc8>
 800aa12:	0668      	lsls	r0, r5, #25
 800aa14:	d5fb      	bpl.n	800aa0e <_printf_i+0xbe>
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	4854      	ldr	r0, [pc, #336]	; (800ab6c <_printf_i+0x21c>)
 800aa1a:	296f      	cmp	r1, #111	; 0x6f
 800aa1c:	bf14      	ite	ne
 800aa1e:	220a      	movne	r2, #10
 800aa20:	2208      	moveq	r2, #8
 800aa22:	2100      	movs	r1, #0
 800aa24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa28:	6865      	ldr	r5, [r4, #4]
 800aa2a:	60a5      	str	r5, [r4, #8]
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	f2c0 8095 	blt.w	800ab5c <_printf_i+0x20c>
 800aa32:	6821      	ldr	r1, [r4, #0]
 800aa34:	f021 0104 	bic.w	r1, r1, #4
 800aa38:	6021      	str	r1, [r4, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d13d      	bne.n	800aaba <_printf_i+0x16a>
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	f040 808e 	bne.w	800ab60 <_printf_i+0x210>
 800aa44:	4665      	mov	r5, ip
 800aa46:	2a08      	cmp	r2, #8
 800aa48:	d10b      	bne.n	800aa62 <_printf_i+0x112>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	07db      	lsls	r3, r3, #31
 800aa4e:	d508      	bpl.n	800aa62 <_printf_i+0x112>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bfde      	ittt	le
 800aa58:	2330      	movle	r3, #48	; 0x30
 800aa5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa62:	ebac 0305 	sub.w	r3, ip, r5
 800aa66:	6123      	str	r3, [r4, #16]
 800aa68:	f8cd 8000 	str.w	r8, [sp]
 800aa6c:	463b      	mov	r3, r7
 800aa6e:	aa03      	add	r2, sp, #12
 800aa70:	4621      	mov	r1, r4
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff fef6 	bl	800a864 <_printf_common>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d14d      	bne.n	800ab18 <_printf_i+0x1c8>
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	b005      	add	sp, #20
 800aa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa86:	4839      	ldr	r0, [pc, #228]	; (800ab6c <_printf_i+0x21c>)
 800aa88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa8c:	6813      	ldr	r3, [r2, #0]
 800aa8e:	6821      	ldr	r1, [r4, #0]
 800aa90:	1d1d      	adds	r5, r3, #4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6015      	str	r5, [r2, #0]
 800aa96:	060a      	lsls	r2, r1, #24
 800aa98:	d50b      	bpl.n	800aab2 <_printf_i+0x162>
 800aa9a:	07ca      	lsls	r2, r1, #31
 800aa9c:	bf44      	itt	mi
 800aa9e:	f041 0120 	orrmi.w	r1, r1, #32
 800aaa2:	6021      	strmi	r1, [r4, #0]
 800aaa4:	b91b      	cbnz	r3, 800aaae <_printf_i+0x15e>
 800aaa6:	6822      	ldr	r2, [r4, #0]
 800aaa8:	f022 0220 	bic.w	r2, r2, #32
 800aaac:	6022      	str	r2, [r4, #0]
 800aaae:	2210      	movs	r2, #16
 800aab0:	e7b7      	b.n	800aa22 <_printf_i+0xd2>
 800aab2:	064d      	lsls	r5, r1, #25
 800aab4:	bf48      	it	mi
 800aab6:	b29b      	uxthmi	r3, r3
 800aab8:	e7ef      	b.n	800aa9a <_printf_i+0x14a>
 800aaba:	4665      	mov	r5, ip
 800aabc:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac0:	fb02 3311 	mls	r3, r2, r1, r3
 800aac4:	5cc3      	ldrb	r3, [r0, r3]
 800aac6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aaca:	460b      	mov	r3, r1
 800aacc:	2900      	cmp	r1, #0
 800aace:	d1f5      	bne.n	800aabc <_printf_i+0x16c>
 800aad0:	e7b9      	b.n	800aa46 <_printf_i+0xf6>
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	6825      	ldr	r5, [r4, #0]
 800aad6:	6961      	ldr	r1, [r4, #20]
 800aad8:	1d18      	adds	r0, r3, #4
 800aada:	6010      	str	r0, [r2, #0]
 800aadc:	0628      	lsls	r0, r5, #24
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	d501      	bpl.n	800aae6 <_printf_i+0x196>
 800aae2:	6019      	str	r1, [r3, #0]
 800aae4:	e002      	b.n	800aaec <_printf_i+0x19c>
 800aae6:	066a      	lsls	r2, r5, #25
 800aae8:	d5fb      	bpl.n	800aae2 <_printf_i+0x192>
 800aaea:	8019      	strh	r1, [r3, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	4665      	mov	r5, ip
 800aaf2:	e7b9      	b.n	800aa68 <_printf_i+0x118>
 800aaf4:	6813      	ldr	r3, [r2, #0]
 800aaf6:	1d19      	adds	r1, r3, #4
 800aaf8:	6011      	str	r1, [r2, #0]
 800aafa:	681d      	ldr	r5, [r3, #0]
 800aafc:	6862      	ldr	r2, [r4, #4]
 800aafe:	2100      	movs	r1, #0
 800ab00:	4628      	mov	r0, r5
 800ab02:	f7f5 fb6d 	bl	80001e0 <memchr>
 800ab06:	b108      	cbz	r0, 800ab0c <_printf_i+0x1bc>
 800ab08:	1b40      	subs	r0, r0, r5
 800ab0a:	6060      	str	r0, [r4, #4]
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	2300      	movs	r3, #0
 800ab12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab16:	e7a7      	b.n	800aa68 <_printf_i+0x118>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4630      	mov	r0, r6
 800ab20:	47c0      	blx	r8
 800ab22:	3001      	adds	r0, #1
 800ab24:	d0aa      	beq.n	800aa7c <_printf_i+0x12c>
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	079b      	lsls	r3, r3, #30
 800ab2a:	d413      	bmi.n	800ab54 <_printf_i+0x204>
 800ab2c:	68e0      	ldr	r0, [r4, #12]
 800ab2e:	9b03      	ldr	r3, [sp, #12]
 800ab30:	4298      	cmp	r0, r3
 800ab32:	bfb8      	it	lt
 800ab34:	4618      	movlt	r0, r3
 800ab36:	e7a3      	b.n	800aa80 <_printf_i+0x130>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	464a      	mov	r2, r9
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4630      	mov	r0, r6
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d09a      	beq.n	800aa7c <_printf_i+0x12c>
 800ab46:	3501      	adds	r5, #1
 800ab48:	68e3      	ldr	r3, [r4, #12]
 800ab4a:	9a03      	ldr	r2, [sp, #12]
 800ab4c:	1a9b      	subs	r3, r3, r2
 800ab4e:	42ab      	cmp	r3, r5
 800ab50:	dcf2      	bgt.n	800ab38 <_printf_i+0x1e8>
 800ab52:	e7eb      	b.n	800ab2c <_printf_i+0x1dc>
 800ab54:	2500      	movs	r5, #0
 800ab56:	f104 0919 	add.w	r9, r4, #25
 800ab5a:	e7f5      	b.n	800ab48 <_printf_i+0x1f8>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1ac      	bne.n	800aaba <_printf_i+0x16a>
 800ab60:	7803      	ldrb	r3, [r0, #0]
 800ab62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab6a:	e76c      	b.n	800aa46 <_printf_i+0xf6>
 800ab6c:	0800cda2 	.word	0x0800cda2
 800ab70:	0800cdb3 	.word	0x0800cdb3

0800ab74 <iprintf>:
 800ab74:	b40f      	push	{r0, r1, r2, r3}
 800ab76:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <iprintf+0x2c>)
 800ab78:	b513      	push	{r0, r1, r4, lr}
 800ab7a:	681c      	ldr	r4, [r3, #0]
 800ab7c:	b124      	cbz	r4, 800ab88 <iprintf+0x14>
 800ab7e:	69a3      	ldr	r3, [r4, #24]
 800ab80:	b913      	cbnz	r3, 800ab88 <iprintf+0x14>
 800ab82:	4620      	mov	r0, r4
 800ab84:	f001 f91c 	bl	800bdc0 <__sinit>
 800ab88:	ab05      	add	r3, sp, #20
 800ab8a:	9a04      	ldr	r2, [sp, #16]
 800ab8c:	68a1      	ldr	r1, [r4, #8]
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f001 fddf 	bl	800c754 <_vfiprintf_r>
 800ab96:	b002      	add	sp, #8
 800ab98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab9c:	b004      	add	sp, #16
 800ab9e:	4770      	bx	lr
 800aba0:	2000000c 	.word	0x2000000c

0800aba4 <_puts_r>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	460e      	mov	r6, r1
 800aba8:	4605      	mov	r5, r0
 800abaa:	b118      	cbz	r0, 800abb4 <_puts_r+0x10>
 800abac:	6983      	ldr	r3, [r0, #24]
 800abae:	b90b      	cbnz	r3, 800abb4 <_puts_r+0x10>
 800abb0:	f001 f906 	bl	800bdc0 <__sinit>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	68ac      	ldr	r4, [r5, #8]
 800abb8:	b913      	cbnz	r3, 800abc0 <_puts_r+0x1c>
 800abba:	4628      	mov	r0, r5
 800abbc:	f001 f900 	bl	800bdc0 <__sinit>
 800abc0:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <_puts_r+0xac>)
 800abc2:	429c      	cmp	r4, r3
 800abc4:	d117      	bne.n	800abf6 <_puts_r+0x52>
 800abc6:	686c      	ldr	r4, [r5, #4]
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	071b      	lsls	r3, r3, #28
 800abcc:	d51d      	bpl.n	800ac0a <_puts_r+0x66>
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	b1db      	cbz	r3, 800ac0a <_puts_r+0x66>
 800abd2:	3e01      	subs	r6, #1
 800abd4:	68a3      	ldr	r3, [r4, #8]
 800abd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abda:	3b01      	subs	r3, #1
 800abdc:	60a3      	str	r3, [r4, #8]
 800abde:	b9e9      	cbnz	r1, 800ac1c <_puts_r+0x78>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da2e      	bge.n	800ac42 <_puts_r+0x9e>
 800abe4:	4622      	mov	r2, r4
 800abe6:	210a      	movs	r1, #10
 800abe8:	4628      	mov	r0, r5
 800abea:	f000 f8f5 	bl	800add8 <__swbuf_r>
 800abee:	3001      	adds	r0, #1
 800abf0:	d011      	beq.n	800ac16 <_puts_r+0x72>
 800abf2:	200a      	movs	r0, #10
 800abf4:	e011      	b.n	800ac1a <_puts_r+0x76>
 800abf6:	4b17      	ldr	r3, [pc, #92]	; (800ac54 <_puts_r+0xb0>)
 800abf8:	429c      	cmp	r4, r3
 800abfa:	d101      	bne.n	800ac00 <_puts_r+0x5c>
 800abfc:	68ac      	ldr	r4, [r5, #8]
 800abfe:	e7e3      	b.n	800abc8 <_puts_r+0x24>
 800ac00:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <_puts_r+0xb4>)
 800ac02:	429c      	cmp	r4, r3
 800ac04:	bf08      	it	eq
 800ac06:	68ec      	ldreq	r4, [r5, #12]
 800ac08:	e7de      	b.n	800abc8 <_puts_r+0x24>
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f000 f935 	bl	800ae7c <__swsetup_r>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0dd      	beq.n	800abd2 <_puts_r+0x2e>
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	da04      	bge.n	800ac2a <_puts_r+0x86>
 800ac20:	69a2      	ldr	r2, [r4, #24]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	dc06      	bgt.n	800ac34 <_puts_r+0x90>
 800ac26:	290a      	cmp	r1, #10
 800ac28:	d004      	beq.n	800ac34 <_puts_r+0x90>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	7019      	strb	r1, [r3, #0]
 800ac32:	e7cf      	b.n	800abd4 <_puts_r+0x30>
 800ac34:	4622      	mov	r2, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f000 f8ce 	bl	800add8 <__swbuf_r>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d1c9      	bne.n	800abd4 <_puts_r+0x30>
 800ac40:	e7e9      	b.n	800ac16 <_puts_r+0x72>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	200a      	movs	r0, #10
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	6022      	str	r2, [r4, #0]
 800ac4a:	7018      	strb	r0, [r3, #0]
 800ac4c:	e7e5      	b.n	800ac1a <_puts_r+0x76>
 800ac4e:	bf00      	nop
 800ac50:	0800cdf4 	.word	0x0800cdf4
 800ac54:	0800ce14 	.word	0x0800ce14
 800ac58:	0800cdd4 	.word	0x0800cdd4

0800ac5c <puts>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <puts+0xc>)
 800ac5e:	4601      	mov	r1, r0
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f7ff bf9f 	b.w	800aba4 <_puts_r>
 800ac66:	bf00      	nop
 800ac68:	2000000c 	.word	0x2000000c

0800ac6c <setbuf>:
 800ac6c:	2900      	cmp	r1, #0
 800ac6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac72:	bf0c      	ite	eq
 800ac74:	2202      	moveq	r2, #2
 800ac76:	2200      	movne	r2, #0
 800ac78:	f000 b800 	b.w	800ac7c <setvbuf>

0800ac7c <setvbuf>:
 800ac7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac80:	461d      	mov	r5, r3
 800ac82:	4b51      	ldr	r3, [pc, #324]	; (800adc8 <setvbuf+0x14c>)
 800ac84:	681e      	ldr	r6, [r3, #0]
 800ac86:	4604      	mov	r4, r0
 800ac88:	460f      	mov	r7, r1
 800ac8a:	4690      	mov	r8, r2
 800ac8c:	b126      	cbz	r6, 800ac98 <setvbuf+0x1c>
 800ac8e:	69b3      	ldr	r3, [r6, #24]
 800ac90:	b913      	cbnz	r3, 800ac98 <setvbuf+0x1c>
 800ac92:	4630      	mov	r0, r6
 800ac94:	f001 f894 	bl	800bdc0 <__sinit>
 800ac98:	4b4c      	ldr	r3, [pc, #304]	; (800adcc <setvbuf+0x150>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	d152      	bne.n	800ad44 <setvbuf+0xc8>
 800ac9e:	6874      	ldr	r4, [r6, #4]
 800aca0:	f1b8 0f02 	cmp.w	r8, #2
 800aca4:	d006      	beq.n	800acb4 <setvbuf+0x38>
 800aca6:	f1b8 0f01 	cmp.w	r8, #1
 800acaa:	f200 8089 	bhi.w	800adc0 <setvbuf+0x144>
 800acae:	2d00      	cmp	r5, #0
 800acb0:	f2c0 8086 	blt.w	800adc0 <setvbuf+0x144>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4630      	mov	r0, r6
 800acb8:	f001 f818 	bl	800bcec <_fflush_r>
 800acbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acbe:	b141      	cbz	r1, 800acd2 <setvbuf+0x56>
 800acc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acc4:	4299      	cmp	r1, r3
 800acc6:	d002      	beq.n	800acce <setvbuf+0x52>
 800acc8:	4630      	mov	r0, r6
 800acca:	f001 fc71 	bl	800c5b0 <_free_r>
 800acce:	2300      	movs	r3, #0
 800acd0:	6363      	str	r3, [r4, #52]	; 0x34
 800acd2:	2300      	movs	r3, #0
 800acd4:	61a3      	str	r3, [r4, #24]
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	061b      	lsls	r3, r3, #24
 800acdc:	d503      	bpl.n	800ace6 <setvbuf+0x6a>
 800acde:	6921      	ldr	r1, [r4, #16]
 800ace0:	4630      	mov	r0, r6
 800ace2:	f001 fc65 	bl	800c5b0 <_free_r>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800acec:	f023 0303 	bic.w	r3, r3, #3
 800acf0:	f1b8 0f02 	cmp.w	r8, #2
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	d05d      	beq.n	800adb4 <setvbuf+0x138>
 800acf8:	ab01      	add	r3, sp, #4
 800acfa:	466a      	mov	r2, sp
 800acfc:	4621      	mov	r1, r4
 800acfe:	4630      	mov	r0, r6
 800ad00:	f001 f8f6 	bl	800bef0 <__swhatbuf_r>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	4318      	orrs	r0, r3
 800ad08:	81a0      	strh	r0, [r4, #12]
 800ad0a:	bb2d      	cbnz	r5, 800ad58 <setvbuf+0xdc>
 800ad0c:	9d00      	ldr	r5, [sp, #0]
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f001 f952 	bl	800bfb8 <malloc>
 800ad14:	4607      	mov	r7, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d14e      	bne.n	800adb8 <setvbuf+0x13c>
 800ad1a:	f8dd 9000 	ldr.w	r9, [sp]
 800ad1e:	45a9      	cmp	r9, r5
 800ad20:	d13c      	bne.n	800ad9c <setvbuf+0x120>
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f043 0302 	orr.w	r3, r3, #2
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60a3      	str	r3, [r4, #8]
 800ad32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	6163      	str	r3, [r4, #20]
 800ad3e:	b003      	add	sp, #12
 800ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad44:	4b22      	ldr	r3, [pc, #136]	; (800add0 <setvbuf+0x154>)
 800ad46:	429c      	cmp	r4, r3
 800ad48:	d101      	bne.n	800ad4e <setvbuf+0xd2>
 800ad4a:	68b4      	ldr	r4, [r6, #8]
 800ad4c:	e7a8      	b.n	800aca0 <setvbuf+0x24>
 800ad4e:	4b21      	ldr	r3, [pc, #132]	; (800add4 <setvbuf+0x158>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	bf08      	it	eq
 800ad54:	68f4      	ldreq	r4, [r6, #12]
 800ad56:	e7a3      	b.n	800aca0 <setvbuf+0x24>
 800ad58:	2f00      	cmp	r7, #0
 800ad5a:	d0d8      	beq.n	800ad0e <setvbuf+0x92>
 800ad5c:	69b3      	ldr	r3, [r6, #24]
 800ad5e:	b913      	cbnz	r3, 800ad66 <setvbuf+0xea>
 800ad60:	4630      	mov	r0, r6
 800ad62:	f001 f82d 	bl	800bdc0 <__sinit>
 800ad66:	f1b8 0f01 	cmp.w	r8, #1
 800ad6a:	bf08      	it	eq
 800ad6c:	89a3      	ldrheq	r3, [r4, #12]
 800ad6e:	6027      	str	r7, [r4, #0]
 800ad70:	bf04      	itt	eq
 800ad72:	f043 0301 	orreq.w	r3, r3, #1
 800ad76:	81a3      	strheq	r3, [r4, #12]
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f013 0008 	ands.w	r0, r3, #8
 800ad7e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800ad82:	d01b      	beq.n	800adbc <setvbuf+0x140>
 800ad84:	f013 0001 	ands.w	r0, r3, #1
 800ad88:	bf18      	it	ne
 800ad8a:	426d      	negne	r5, r5
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	bf1d      	ittte	ne
 800ad92:	60a3      	strne	r3, [r4, #8]
 800ad94:	61a5      	strne	r5, [r4, #24]
 800ad96:	4618      	movne	r0, r3
 800ad98:	60a5      	streq	r5, [r4, #8]
 800ad9a:	e7d0      	b.n	800ad3e <setvbuf+0xc2>
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f001 f90b 	bl	800bfb8 <malloc>
 800ada2:	4607      	mov	r7, r0
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d0bc      	beq.n	800ad22 <setvbuf+0xa6>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	464d      	mov	r5, r9
 800adb2:	e7d3      	b.n	800ad5c <setvbuf+0xe0>
 800adb4:	2000      	movs	r0, #0
 800adb6:	e7b6      	b.n	800ad26 <setvbuf+0xaa>
 800adb8:	46a9      	mov	r9, r5
 800adba:	e7f5      	b.n	800ada8 <setvbuf+0x12c>
 800adbc:	60a0      	str	r0, [r4, #8]
 800adbe:	e7be      	b.n	800ad3e <setvbuf+0xc2>
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	e7bb      	b.n	800ad3e <setvbuf+0xc2>
 800adc6:	bf00      	nop
 800adc8:	2000000c 	.word	0x2000000c
 800adcc:	0800cdf4 	.word	0x0800cdf4
 800add0:	0800ce14 	.word	0x0800ce14
 800add4:	0800cdd4 	.word	0x0800cdd4

0800add8 <__swbuf_r>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	460e      	mov	r6, r1
 800addc:	4614      	mov	r4, r2
 800adde:	4605      	mov	r5, r0
 800ade0:	b118      	cbz	r0, 800adea <__swbuf_r+0x12>
 800ade2:	6983      	ldr	r3, [r0, #24]
 800ade4:	b90b      	cbnz	r3, 800adea <__swbuf_r+0x12>
 800ade6:	f000 ffeb 	bl	800bdc0 <__sinit>
 800adea:	4b21      	ldr	r3, [pc, #132]	; (800ae70 <__swbuf_r+0x98>)
 800adec:	429c      	cmp	r4, r3
 800adee:	d12a      	bne.n	800ae46 <__swbuf_r+0x6e>
 800adf0:	686c      	ldr	r4, [r5, #4]
 800adf2:	69a3      	ldr	r3, [r4, #24]
 800adf4:	60a3      	str	r3, [r4, #8]
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	071a      	lsls	r2, r3, #28
 800adfa:	d52e      	bpl.n	800ae5a <__swbuf_r+0x82>
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	b363      	cbz	r3, 800ae5a <__swbuf_r+0x82>
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	6820      	ldr	r0, [r4, #0]
 800ae04:	1ac0      	subs	r0, r0, r3
 800ae06:	6963      	ldr	r3, [r4, #20]
 800ae08:	b2f6      	uxtb	r6, r6
 800ae0a:	4283      	cmp	r3, r0
 800ae0c:	4637      	mov	r7, r6
 800ae0e:	dc04      	bgt.n	800ae1a <__swbuf_r+0x42>
 800ae10:	4621      	mov	r1, r4
 800ae12:	4628      	mov	r0, r5
 800ae14:	f000 ff6a 	bl	800bcec <_fflush_r>
 800ae18:	bb28      	cbnz	r0, 800ae66 <__swbuf_r+0x8e>
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	60a3      	str	r3, [r4, #8]
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	6022      	str	r2, [r4, #0]
 800ae26:	701e      	strb	r6, [r3, #0]
 800ae28:	6963      	ldr	r3, [r4, #20]
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	4283      	cmp	r3, r0
 800ae2e:	d004      	beq.n	800ae3a <__swbuf_r+0x62>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	07db      	lsls	r3, r3, #31
 800ae34:	d519      	bpl.n	800ae6a <__swbuf_r+0x92>
 800ae36:	2e0a      	cmp	r6, #10
 800ae38:	d117      	bne.n	800ae6a <__swbuf_r+0x92>
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f000 ff55 	bl	800bcec <_fflush_r>
 800ae42:	b190      	cbz	r0, 800ae6a <__swbuf_r+0x92>
 800ae44:	e00f      	b.n	800ae66 <__swbuf_r+0x8e>
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <__swbuf_r+0x9c>)
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d101      	bne.n	800ae50 <__swbuf_r+0x78>
 800ae4c:	68ac      	ldr	r4, [r5, #8]
 800ae4e:	e7d0      	b.n	800adf2 <__swbuf_r+0x1a>
 800ae50:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <__swbuf_r+0xa0>)
 800ae52:	429c      	cmp	r4, r3
 800ae54:	bf08      	it	eq
 800ae56:	68ec      	ldreq	r4, [r5, #12]
 800ae58:	e7cb      	b.n	800adf2 <__swbuf_r+0x1a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f80d 	bl	800ae7c <__swsetup_r>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0cc      	beq.n	800ae00 <__swbuf_r+0x28>
 800ae66:	f04f 37ff 	mov.w	r7, #4294967295
 800ae6a:	4638      	mov	r0, r7
 800ae6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800cdf4 	.word	0x0800cdf4
 800ae74:	0800ce14 	.word	0x0800ce14
 800ae78:	0800cdd4 	.word	0x0800cdd4

0800ae7c <__swsetup_r>:
 800ae7c:	4b32      	ldr	r3, [pc, #200]	; (800af48 <__swsetup_r+0xcc>)
 800ae7e:	b570      	push	{r4, r5, r6, lr}
 800ae80:	681d      	ldr	r5, [r3, #0]
 800ae82:	4606      	mov	r6, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	b125      	cbz	r5, 800ae92 <__swsetup_r+0x16>
 800ae88:	69ab      	ldr	r3, [r5, #24]
 800ae8a:	b913      	cbnz	r3, 800ae92 <__swsetup_r+0x16>
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 ff97 	bl	800bdc0 <__sinit>
 800ae92:	4b2e      	ldr	r3, [pc, #184]	; (800af4c <__swsetup_r+0xd0>)
 800ae94:	429c      	cmp	r4, r3
 800ae96:	d10f      	bne.n	800aeb8 <__swsetup_r+0x3c>
 800ae98:	686c      	ldr	r4, [r5, #4]
 800ae9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	0715      	lsls	r5, r2, #28
 800aea2:	d42c      	bmi.n	800aefe <__swsetup_r+0x82>
 800aea4:	06d0      	lsls	r0, r2, #27
 800aea6:	d411      	bmi.n	800aecc <__swsetup_r+0x50>
 800aea8:	2209      	movs	r2, #9
 800aeaa:	6032      	str	r2, [r6, #0]
 800aeac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb6:	e03e      	b.n	800af36 <__swsetup_r+0xba>
 800aeb8:	4b25      	ldr	r3, [pc, #148]	; (800af50 <__swsetup_r+0xd4>)
 800aeba:	429c      	cmp	r4, r3
 800aebc:	d101      	bne.n	800aec2 <__swsetup_r+0x46>
 800aebe:	68ac      	ldr	r4, [r5, #8]
 800aec0:	e7eb      	b.n	800ae9a <__swsetup_r+0x1e>
 800aec2:	4b24      	ldr	r3, [pc, #144]	; (800af54 <__swsetup_r+0xd8>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	bf08      	it	eq
 800aec8:	68ec      	ldreq	r4, [r5, #12]
 800aeca:	e7e6      	b.n	800ae9a <__swsetup_r+0x1e>
 800aecc:	0751      	lsls	r1, r2, #29
 800aece:	d512      	bpl.n	800aef6 <__swsetup_r+0x7a>
 800aed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aed2:	b141      	cbz	r1, 800aee6 <__swsetup_r+0x6a>
 800aed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed8:	4299      	cmp	r1, r3
 800aeda:	d002      	beq.n	800aee2 <__swsetup_r+0x66>
 800aedc:	4630      	mov	r0, r6
 800aede:	f001 fb67 	bl	800c5b0 <_free_r>
 800aee2:	2300      	movs	r3, #0
 800aee4:	6363      	str	r3, [r4, #52]	; 0x34
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	2300      	movs	r3, #0
 800aef0:	6063      	str	r3, [r4, #4]
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f043 0308 	orr.w	r3, r3, #8
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	b94b      	cbnz	r3, 800af16 <__swsetup_r+0x9a>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af0c:	d003      	beq.n	800af16 <__swsetup_r+0x9a>
 800af0e:	4621      	mov	r1, r4
 800af10:	4630      	mov	r0, r6
 800af12:	f001 f811 	bl	800bf38 <__smakebuf_r>
 800af16:	89a2      	ldrh	r2, [r4, #12]
 800af18:	f012 0301 	ands.w	r3, r2, #1
 800af1c:	d00c      	beq.n	800af38 <__swsetup_r+0xbc>
 800af1e:	2300      	movs	r3, #0
 800af20:	60a3      	str	r3, [r4, #8]
 800af22:	6963      	ldr	r3, [r4, #20]
 800af24:	425b      	negs	r3, r3
 800af26:	61a3      	str	r3, [r4, #24]
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b953      	cbnz	r3, 800af42 <__swsetup_r+0xc6>
 800af2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800af34:	d1ba      	bne.n	800aeac <__swsetup_r+0x30>
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	0792      	lsls	r2, r2, #30
 800af3a:	bf58      	it	pl
 800af3c:	6963      	ldrpl	r3, [r4, #20]
 800af3e:	60a3      	str	r3, [r4, #8]
 800af40:	e7f2      	b.n	800af28 <__swsetup_r+0xac>
 800af42:	2000      	movs	r0, #0
 800af44:	e7f7      	b.n	800af36 <__swsetup_r+0xba>
 800af46:	bf00      	nop
 800af48:	2000000c 	.word	0x2000000c
 800af4c:	0800cdf4 	.word	0x0800cdf4
 800af50:	0800ce14 	.word	0x0800ce14
 800af54:	0800cdd4 	.word	0x0800cdd4

0800af58 <quorem>:
 800af58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	6903      	ldr	r3, [r0, #16]
 800af5e:	690c      	ldr	r4, [r1, #16]
 800af60:	42a3      	cmp	r3, r4
 800af62:	4680      	mov	r8, r0
 800af64:	f2c0 8082 	blt.w	800b06c <quorem+0x114>
 800af68:	3c01      	subs	r4, #1
 800af6a:	f101 0714 	add.w	r7, r1, #20
 800af6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800af72:	f100 0614 	add.w	r6, r0, #20
 800af76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800af7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800af7e:	eb06 030c 	add.w	r3, r6, ip
 800af82:	3501      	adds	r5, #1
 800af84:	eb07 090c 	add.w	r9, r7, ip
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	fbb0 f5f5 	udiv	r5, r0, r5
 800af8e:	b395      	cbz	r5, 800aff6 <quorem+0x9e>
 800af90:	f04f 0a00 	mov.w	sl, #0
 800af94:	4638      	mov	r0, r7
 800af96:	46b6      	mov	lr, r6
 800af98:	46d3      	mov	fp, sl
 800af9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800af9e:	b293      	uxth	r3, r2
 800afa0:	fb05 a303 	mla	r3, r5, r3, sl
 800afa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	ebab 0303 	sub.w	r3, fp, r3
 800afae:	0c12      	lsrs	r2, r2, #16
 800afb0:	f8de b000 	ldr.w	fp, [lr]
 800afb4:	fb05 a202 	mla	r2, r5, r2, sl
 800afb8:	fa13 f38b 	uxtah	r3, r3, fp
 800afbc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800afc0:	fa1f fb82 	uxth.w	fp, r2
 800afc4:	f8de 2000 	ldr.w	r2, [lr]
 800afc8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800afcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afd6:	4581      	cmp	r9, r0
 800afd8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800afdc:	f84e 3b04 	str.w	r3, [lr], #4
 800afe0:	d2db      	bcs.n	800af9a <quorem+0x42>
 800afe2:	f856 300c 	ldr.w	r3, [r6, ip]
 800afe6:	b933      	cbnz	r3, 800aff6 <quorem+0x9e>
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	3b04      	subs	r3, #4
 800afec:	429e      	cmp	r6, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	d330      	bcc.n	800b054 <quorem+0xfc>
 800aff2:	f8c8 4010 	str.w	r4, [r8, #16]
 800aff6:	4640      	mov	r0, r8
 800aff8:	f001 fa06 	bl	800c408 <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	db25      	blt.n	800b04c <quorem+0xf4>
 800b000:	3501      	adds	r5, #1
 800b002:	4630      	mov	r0, r6
 800b004:	f04f 0c00 	mov.w	ip, #0
 800b008:	f857 2b04 	ldr.w	r2, [r7], #4
 800b00c:	f8d0 e000 	ldr.w	lr, [r0]
 800b010:	b293      	uxth	r3, r2
 800b012:	ebac 0303 	sub.w	r3, ip, r3
 800b016:	0c12      	lsrs	r2, r2, #16
 800b018:	fa13 f38e 	uxtah	r3, r3, lr
 800b01c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b024:	b29b      	uxth	r3, r3
 800b026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b02a:	45b9      	cmp	r9, r7
 800b02c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b030:	f840 3b04 	str.w	r3, [r0], #4
 800b034:	d2e8      	bcs.n	800b008 <quorem+0xb0>
 800b036:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b03a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b03e:	b92a      	cbnz	r2, 800b04c <quorem+0xf4>
 800b040:	3b04      	subs	r3, #4
 800b042:	429e      	cmp	r6, r3
 800b044:	461a      	mov	r2, r3
 800b046:	d30b      	bcc.n	800b060 <quorem+0x108>
 800b048:	f8c8 4010 	str.w	r4, [r8, #16]
 800b04c:	4628      	mov	r0, r5
 800b04e:	b003      	add	sp, #12
 800b050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b054:	6812      	ldr	r2, [r2, #0]
 800b056:	3b04      	subs	r3, #4
 800b058:	2a00      	cmp	r2, #0
 800b05a:	d1ca      	bne.n	800aff2 <quorem+0x9a>
 800b05c:	3c01      	subs	r4, #1
 800b05e:	e7c5      	b.n	800afec <quorem+0x94>
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	3b04      	subs	r3, #4
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1ef      	bne.n	800b048 <quorem+0xf0>
 800b068:	3c01      	subs	r4, #1
 800b06a:	e7ea      	b.n	800b042 <quorem+0xea>
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7ee      	b.n	800b04e <quorem+0xf6>

0800b070 <_dtoa_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ec57 6b10 	vmov	r6, r7, d0
 800b078:	b097      	sub	sp, #92	; 0x5c
 800b07a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b07c:	9106      	str	r1, [sp, #24]
 800b07e:	4604      	mov	r4, r0
 800b080:	920b      	str	r2, [sp, #44]	; 0x2c
 800b082:	9312      	str	r3, [sp, #72]	; 0x48
 800b084:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b088:	e9cd 6700 	strd	r6, r7, [sp]
 800b08c:	b93d      	cbnz	r5, 800b09e <_dtoa_r+0x2e>
 800b08e:	2010      	movs	r0, #16
 800b090:	f000 ff92 	bl	800bfb8 <malloc>
 800b094:	6260      	str	r0, [r4, #36]	; 0x24
 800b096:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b09a:	6005      	str	r5, [r0, #0]
 800b09c:	60c5      	str	r5, [r0, #12]
 800b09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a0:	6819      	ldr	r1, [r3, #0]
 800b0a2:	b151      	cbz	r1, 800b0ba <_dtoa_r+0x4a>
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	604a      	str	r2, [r1, #4]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4093      	lsls	r3, r2
 800b0ac:	608b      	str	r3, [r1, #8]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 ffc9 	bl	800c046 <_Bfree>
 800b0b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	1e3b      	subs	r3, r7, #0
 800b0bc:	bfbb      	ittet	lt
 800b0be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b0c2:	9301      	strlt	r3, [sp, #4]
 800b0c4:	2300      	movge	r3, #0
 800b0c6:	2201      	movlt	r2, #1
 800b0c8:	bfac      	ite	ge
 800b0ca:	f8c8 3000 	strge.w	r3, [r8]
 800b0ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b0d2:	4baf      	ldr	r3, [pc, #700]	; (800b390 <_dtoa_r+0x320>)
 800b0d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b0d8:	ea33 0308 	bics.w	r3, r3, r8
 800b0dc:	d114      	bne.n	800b108 <_dtoa_r+0x98>
 800b0de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	9b00      	ldr	r3, [sp, #0]
 800b0e8:	b923      	cbnz	r3, 800b0f4 <_dtoa_r+0x84>
 800b0ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f000 8542 	beq.w	800bb78 <_dtoa_r+0xb08>
 800b0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b3a4 <_dtoa_r+0x334>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 8544 	beq.w	800bb88 <_dtoa_r+0xb18>
 800b100:	f10b 0303 	add.w	r3, fp, #3
 800b104:	f000 bd3e 	b.w	800bb84 <_dtoa_r+0xb14>
 800b108:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b118:	4681      	mov	r9, r0
 800b11a:	b168      	cbz	r0, 800b138 <_dtoa_r+0xc8>
 800b11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b11e:	2301      	movs	r3, #1
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 8524 	beq.w	800bb72 <_dtoa_r+0xb02>
 800b12a:	4b9a      	ldr	r3, [pc, #616]	; (800b394 <_dtoa_r+0x324>)
 800b12c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b12e:	f103 3bff 	add.w	fp, r3, #4294967295
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	f000 bd28 	b.w	800bb88 <_dtoa_r+0xb18>
 800b138:	aa14      	add	r2, sp, #80	; 0x50
 800b13a:	a915      	add	r1, sp, #84	; 0x54
 800b13c:	ec47 6b10 	vmov	d0, r6, r7
 800b140:	4620      	mov	r0, r4
 800b142:	f001 f9d8 	bl	800c4f6 <__d2b>
 800b146:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b14a:	9004      	str	r0, [sp, #16]
 800b14c:	2d00      	cmp	r5, #0
 800b14e:	d07c      	beq.n	800b24a <_dtoa_r+0x1da>
 800b150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b154:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b158:	46b2      	mov	sl, r6
 800b15a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b15e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b162:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b166:	2200      	movs	r2, #0
 800b168:	4b8b      	ldr	r3, [pc, #556]	; (800b398 <_dtoa_r+0x328>)
 800b16a:	4650      	mov	r0, sl
 800b16c:	4659      	mov	r1, fp
 800b16e:	f7f5 f88b 	bl	8000288 <__aeabi_dsub>
 800b172:	a381      	add	r3, pc, #516	; (adr r3, 800b378 <_dtoa_r+0x308>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 fa3e 	bl	80005f8 <__aeabi_dmul>
 800b17c:	a380      	add	r3, pc, #512	; (adr r3, 800b380 <_dtoa_r+0x310>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f883 	bl	800028c <__adddf3>
 800b186:	4606      	mov	r6, r0
 800b188:	4628      	mov	r0, r5
 800b18a:	460f      	mov	r7, r1
 800b18c:	f7f5 f9ca 	bl	8000524 <__aeabi_i2d>
 800b190:	a37d      	add	r3, pc, #500	; (adr r3, 800b388 <_dtoa_r+0x318>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 fa2f 	bl	80005f8 <__aeabi_dmul>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 f873 	bl	800028c <__adddf3>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	f7f5 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 fc90 	bl	8000adc <__aeabi_dcmplt>
 800b1bc:	b148      	cbz	r0, 800b1d2 <_dtoa_r+0x162>
 800b1be:	4650      	mov	r0, sl
 800b1c0:	f7f5 f9b0 	bl	8000524 <__aeabi_i2d>
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	f7f5 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1cc:	b908      	cbnz	r0, 800b1d2 <_dtoa_r+0x162>
 800b1ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1d2:	f1ba 0f16 	cmp.w	sl, #22
 800b1d6:	d859      	bhi.n	800b28c <_dtoa_r+0x21c>
 800b1d8:	4970      	ldr	r1, [pc, #448]	; (800b39c <_dtoa_r+0x32c>)
 800b1da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e6:	f7f5 fc97 	bl	8000b18 <__aeabi_dcmpgt>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d050      	beq.n	800b290 <_dtoa_r+0x220>
 800b1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1f8:	1b5d      	subs	r5, r3, r5
 800b1fa:	f1b5 0801 	subs.w	r8, r5, #1
 800b1fe:	bf49      	itett	mi
 800b200:	f1c5 0301 	rsbmi	r3, r5, #1
 800b204:	2300      	movpl	r3, #0
 800b206:	9305      	strmi	r3, [sp, #20]
 800b208:	f04f 0800 	movmi.w	r8, #0
 800b20c:	bf58      	it	pl
 800b20e:	9305      	strpl	r3, [sp, #20]
 800b210:	f1ba 0f00 	cmp.w	sl, #0
 800b214:	db3e      	blt.n	800b294 <_dtoa_r+0x224>
 800b216:	2300      	movs	r3, #0
 800b218:	44d0      	add	r8, sl
 800b21a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b21e:	9307      	str	r3, [sp, #28]
 800b220:	9b06      	ldr	r3, [sp, #24]
 800b222:	2b09      	cmp	r3, #9
 800b224:	f200 8090 	bhi.w	800b348 <_dtoa_r+0x2d8>
 800b228:	2b05      	cmp	r3, #5
 800b22a:	bfc4      	itt	gt
 800b22c:	3b04      	subgt	r3, #4
 800b22e:	9306      	strgt	r3, [sp, #24]
 800b230:	9b06      	ldr	r3, [sp, #24]
 800b232:	f1a3 0302 	sub.w	r3, r3, #2
 800b236:	bfcc      	ite	gt
 800b238:	2500      	movgt	r5, #0
 800b23a:	2501      	movle	r5, #1
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	f200 808f 	bhi.w	800b360 <_dtoa_r+0x2f0>
 800b242:	e8df f003 	tbb	[pc, r3]
 800b246:	7f7d      	.short	0x7f7d
 800b248:	7131      	.short	0x7131
 800b24a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b24e:	441d      	add	r5, r3
 800b250:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b254:	2820      	cmp	r0, #32
 800b256:	dd13      	ble.n	800b280 <_dtoa_r+0x210>
 800b258:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	fa08 f800 	lsl.w	r8, r8, r0
 800b262:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b266:	fa23 f000 	lsr.w	r0, r3, r0
 800b26a:	ea48 0000 	orr.w	r0, r8, r0
 800b26e:	f7f5 f949 	bl	8000504 <__aeabi_ui2d>
 800b272:	2301      	movs	r3, #1
 800b274:	4682      	mov	sl, r0
 800b276:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b27a:	3d01      	subs	r5, #1
 800b27c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b27e:	e772      	b.n	800b166 <_dtoa_r+0xf6>
 800b280:	9b00      	ldr	r3, [sp, #0]
 800b282:	f1c0 0020 	rsb	r0, r0, #32
 800b286:	fa03 f000 	lsl.w	r0, r3, r0
 800b28a:	e7f0      	b.n	800b26e <_dtoa_r+0x1fe>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e7b1      	b.n	800b1f4 <_dtoa_r+0x184>
 800b290:	900f      	str	r0, [sp, #60]	; 0x3c
 800b292:	e7b0      	b.n	800b1f6 <_dtoa_r+0x186>
 800b294:	9b05      	ldr	r3, [sp, #20]
 800b296:	eba3 030a 	sub.w	r3, r3, sl
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	f1ca 0300 	rsb	r3, sl, #0
 800b2a0:	9307      	str	r3, [sp, #28]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a6:	e7bb      	b.n	800b220 <_dtoa_r+0x1b0>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dd59      	ble.n	800b366 <_dtoa_r+0x2f6>
 800b2b2:	9302      	str	r3, [sp, #8]
 800b2b4:	4699      	mov	r9, r3
 800b2b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	6072      	str	r2, [r6, #4]
 800b2bc:	2204      	movs	r2, #4
 800b2be:	f102 0014 	add.w	r0, r2, #20
 800b2c2:	4298      	cmp	r0, r3
 800b2c4:	6871      	ldr	r1, [r6, #4]
 800b2c6:	d953      	bls.n	800b370 <_dtoa_r+0x300>
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fe88 	bl	800bfde <_Balloc>
 800b2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d0:	6030      	str	r0, [r6, #0]
 800b2d2:	f1b9 0f0e 	cmp.w	r9, #14
 800b2d6:	f8d3 b000 	ldr.w	fp, [r3]
 800b2da:	f200 80e6 	bhi.w	800b4aa <_dtoa_r+0x43a>
 800b2de:	2d00      	cmp	r5, #0
 800b2e0:	f000 80e3 	beq.w	800b4aa <_dtoa_r+0x43a>
 800b2e4:	ed9d 7b00 	vldr	d7, [sp]
 800b2e8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b2f0:	dd74      	ble.n	800b3dc <_dtoa_r+0x36c>
 800b2f2:	4a2a      	ldr	r2, [pc, #168]	; (800b39c <_dtoa_r+0x32c>)
 800b2f4:	f00a 030f 	and.w	r3, sl, #15
 800b2f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2fc:	ed93 7b00 	vldr	d7, [r3]
 800b300:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b304:	06f0      	lsls	r0, r6, #27
 800b306:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b30a:	d565      	bpl.n	800b3d8 <_dtoa_r+0x368>
 800b30c:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <_dtoa_r+0x330>)
 800b30e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b312:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b316:	f7f5 fa99 	bl	800084c <__aeabi_ddiv>
 800b31a:	e9cd 0100 	strd	r0, r1, [sp]
 800b31e:	f006 060f 	and.w	r6, r6, #15
 800b322:	2503      	movs	r5, #3
 800b324:	4f1e      	ldr	r7, [pc, #120]	; (800b3a0 <_dtoa_r+0x330>)
 800b326:	e04c      	b.n	800b3c2 <_dtoa_r+0x352>
 800b328:	2301      	movs	r3, #1
 800b32a:	930a      	str	r3, [sp, #40]	; 0x28
 800b32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b32e:	4453      	add	r3, sl
 800b330:	f103 0901 	add.w	r9, r3, #1
 800b334:	9302      	str	r3, [sp, #8]
 800b336:	464b      	mov	r3, r9
 800b338:	2b01      	cmp	r3, #1
 800b33a:	bfb8      	it	lt
 800b33c:	2301      	movlt	r3, #1
 800b33e:	e7ba      	b.n	800b2b6 <_dtoa_r+0x246>
 800b340:	2300      	movs	r3, #0
 800b342:	e7b2      	b.n	800b2aa <_dtoa_r+0x23a>
 800b344:	2300      	movs	r3, #0
 800b346:	e7f0      	b.n	800b32a <_dtoa_r+0x2ba>
 800b348:	2501      	movs	r5, #1
 800b34a:	2300      	movs	r3, #0
 800b34c:	9306      	str	r3, [sp, #24]
 800b34e:	950a      	str	r5, [sp, #40]	; 0x28
 800b350:	f04f 33ff 	mov.w	r3, #4294967295
 800b354:	9302      	str	r3, [sp, #8]
 800b356:	4699      	mov	r9, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	2312      	movs	r3, #18
 800b35c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b35e:	e7aa      	b.n	800b2b6 <_dtoa_r+0x246>
 800b360:	2301      	movs	r3, #1
 800b362:	930a      	str	r3, [sp, #40]	; 0x28
 800b364:	e7f4      	b.n	800b350 <_dtoa_r+0x2e0>
 800b366:	2301      	movs	r3, #1
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	4699      	mov	r9, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	e7f5      	b.n	800b35c <_dtoa_r+0x2ec>
 800b370:	3101      	adds	r1, #1
 800b372:	6071      	str	r1, [r6, #4]
 800b374:	0052      	lsls	r2, r2, #1
 800b376:	e7a2      	b.n	800b2be <_dtoa_r+0x24e>
 800b378:	636f4361 	.word	0x636f4361
 800b37c:	3fd287a7 	.word	0x3fd287a7
 800b380:	8b60c8b3 	.word	0x8b60c8b3
 800b384:	3fc68a28 	.word	0x3fc68a28
 800b388:	509f79fb 	.word	0x509f79fb
 800b38c:	3fd34413 	.word	0x3fd34413
 800b390:	7ff00000 	.word	0x7ff00000
 800b394:	0800cda1 	.word	0x0800cda1
 800b398:	3ff80000 	.word	0x3ff80000
 800b39c:	0800ce60 	.word	0x0800ce60
 800b3a0:	0800ce38 	.word	0x0800ce38
 800b3a4:	0800cdcd 	.word	0x0800cdcd
 800b3a8:	07f1      	lsls	r1, r6, #31
 800b3aa:	d508      	bpl.n	800b3be <_dtoa_r+0x34e>
 800b3ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3b4:	f7f5 f920 	bl	80005f8 <__aeabi_dmul>
 800b3b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3bc:	3501      	adds	r5, #1
 800b3be:	1076      	asrs	r6, r6, #1
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	2e00      	cmp	r6, #0
 800b3c4:	d1f0      	bne.n	800b3a8 <_dtoa_r+0x338>
 800b3c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ce:	f7f5 fa3d 	bl	800084c <__aeabi_ddiv>
 800b3d2:	e9cd 0100 	strd	r0, r1, [sp]
 800b3d6:	e01a      	b.n	800b40e <_dtoa_r+0x39e>
 800b3d8:	2502      	movs	r5, #2
 800b3da:	e7a3      	b.n	800b324 <_dtoa_r+0x2b4>
 800b3dc:	f000 80a0 	beq.w	800b520 <_dtoa_r+0x4b0>
 800b3e0:	f1ca 0600 	rsb	r6, sl, #0
 800b3e4:	4b9f      	ldr	r3, [pc, #636]	; (800b664 <_dtoa_r+0x5f4>)
 800b3e6:	4fa0      	ldr	r7, [pc, #640]	; (800b668 <_dtoa_r+0x5f8>)
 800b3e8:	f006 020f 	and.w	r2, r6, #15
 800b3ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3f8:	f7f5 f8fe 	bl	80005f8 <__aeabi_dmul>
 800b3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800b400:	1136      	asrs	r6, r6, #4
 800b402:	2300      	movs	r3, #0
 800b404:	2502      	movs	r5, #2
 800b406:	2e00      	cmp	r6, #0
 800b408:	d17f      	bne.n	800b50a <_dtoa_r+0x49a>
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e1      	bne.n	800b3d2 <_dtoa_r+0x362>
 800b40e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 8087 	beq.w	800b524 <_dtoa_r+0x4b4>
 800b416:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b93      	ldr	r3, [pc, #588]	; (800b66c <_dtoa_r+0x5fc>)
 800b41e:	4630      	mov	r0, r6
 800b420:	4639      	mov	r1, r7
 800b422:	f7f5 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	d07c      	beq.n	800b524 <_dtoa_r+0x4b4>
 800b42a:	f1b9 0f00 	cmp.w	r9, #0
 800b42e:	d079      	beq.n	800b524 <_dtoa_r+0x4b4>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	dd35      	ble.n	800b4a2 <_dtoa_r+0x432>
 800b436:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b43a:	9308      	str	r3, [sp, #32]
 800b43c:	4639      	mov	r1, r7
 800b43e:	2200      	movs	r2, #0
 800b440:	4b8b      	ldr	r3, [pc, #556]	; (800b670 <_dtoa_r+0x600>)
 800b442:	4630      	mov	r0, r6
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	e9cd 0100 	strd	r0, r1, [sp]
 800b44c:	9f02      	ldr	r7, [sp, #8]
 800b44e:	3501      	adds	r5, #1
 800b450:	4628      	mov	r0, r5
 800b452:	f7f5 f867 	bl	8000524 <__aeabi_i2d>
 800b456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b45a:	f7f5 f8cd 	bl	80005f8 <__aeabi_dmul>
 800b45e:	2200      	movs	r2, #0
 800b460:	4b84      	ldr	r3, [pc, #528]	; (800b674 <_dtoa_r+0x604>)
 800b462:	f7f4 ff13 	bl	800028c <__adddf3>
 800b466:	4605      	mov	r5, r0
 800b468:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b46c:	2f00      	cmp	r7, #0
 800b46e:	d15d      	bne.n	800b52c <_dtoa_r+0x4bc>
 800b470:	2200      	movs	r2, #0
 800b472:	4b81      	ldr	r3, [pc, #516]	; (800b678 <_dtoa_r+0x608>)
 800b474:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b478:	f7f4 ff06 	bl	8000288 <__aeabi_dsub>
 800b47c:	462a      	mov	r2, r5
 800b47e:	4633      	mov	r3, r6
 800b480:	e9cd 0100 	strd	r0, r1, [sp]
 800b484:	f7f5 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f040 8288 	bne.w	800b99e <_dtoa_r+0x92e>
 800b48e:	462a      	mov	r2, r5
 800b490:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b498:	f7f5 fb20 	bl	8000adc <__aeabi_dcmplt>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f040 827c 	bne.w	800b99a <_dtoa_r+0x92a>
 800b4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4a6:	e9cd 2300 	strd	r2, r3, [sp]
 800b4aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f2c0 8150 	blt.w	800b752 <_dtoa_r+0x6e2>
 800b4b2:	f1ba 0f0e 	cmp.w	sl, #14
 800b4b6:	f300 814c 	bgt.w	800b752 <_dtoa_r+0x6e2>
 800b4ba:	4b6a      	ldr	r3, [pc, #424]	; (800b664 <_dtoa_r+0x5f4>)
 800b4bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4c0:	ed93 7b00 	vldr	d7, [r3]
 800b4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4cc:	f280 80d8 	bge.w	800b680 <_dtoa_r+0x610>
 800b4d0:	f1b9 0f00 	cmp.w	r9, #0
 800b4d4:	f300 80d4 	bgt.w	800b680 <_dtoa_r+0x610>
 800b4d8:	f040 825e 	bne.w	800b998 <_dtoa_r+0x928>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4b66      	ldr	r3, [pc, #408]	; (800b678 <_dtoa_r+0x608>)
 800b4e0:	ec51 0b17 	vmov	r0, r1, d7
 800b4e4:	f7f5 f888 	bl	80005f8 <__aeabi_dmul>
 800b4e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ec:	f7f5 fb0a 	bl	8000b04 <__aeabi_dcmpge>
 800b4f0:	464f      	mov	r7, r9
 800b4f2:	464e      	mov	r6, r9
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f040 8234 	bne.w	800b962 <_dtoa_r+0x8f2>
 800b4fa:	2331      	movs	r3, #49	; 0x31
 800b4fc:	f10b 0501 	add.w	r5, fp, #1
 800b500:	f88b 3000 	strb.w	r3, [fp]
 800b504:	f10a 0a01 	add.w	sl, sl, #1
 800b508:	e22f      	b.n	800b96a <_dtoa_r+0x8fa>
 800b50a:	07f2      	lsls	r2, r6, #31
 800b50c:	d505      	bpl.n	800b51a <_dtoa_r+0x4aa>
 800b50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b512:	f7f5 f871 	bl	80005f8 <__aeabi_dmul>
 800b516:	3501      	adds	r5, #1
 800b518:	2301      	movs	r3, #1
 800b51a:	1076      	asrs	r6, r6, #1
 800b51c:	3708      	adds	r7, #8
 800b51e:	e772      	b.n	800b406 <_dtoa_r+0x396>
 800b520:	2502      	movs	r5, #2
 800b522:	e774      	b.n	800b40e <_dtoa_r+0x39e>
 800b524:	f8cd a020 	str.w	sl, [sp, #32]
 800b528:	464f      	mov	r7, r9
 800b52a:	e791      	b.n	800b450 <_dtoa_r+0x3e0>
 800b52c:	4b4d      	ldr	r3, [pc, #308]	; (800b664 <_dtoa_r+0x5f4>)
 800b52e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b532:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d047      	beq.n	800b5cc <_dtoa_r+0x55c>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	2000      	movs	r0, #0
 800b542:	494e      	ldr	r1, [pc, #312]	; (800b67c <_dtoa_r+0x60c>)
 800b544:	f7f5 f982 	bl	800084c <__aeabi_ddiv>
 800b548:	462a      	mov	r2, r5
 800b54a:	4633      	mov	r3, r6
 800b54c:	f7f4 fe9c 	bl	8000288 <__aeabi_dsub>
 800b550:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b554:	465d      	mov	r5, fp
 800b556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b55a:	f7f5 fafd 	bl	8000b58 <__aeabi_d2iz>
 800b55e:	4606      	mov	r6, r0
 800b560:	f7f4 ffe0 	bl	8000524 <__aeabi_i2d>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	3630      	adds	r6, #48	; 0x30
 800b572:	f805 6b01 	strb.w	r6, [r5], #1
 800b576:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b57a:	e9cd 0100 	strd	r0, r1, [sp]
 800b57e:	f7f5 faad 	bl	8000adc <__aeabi_dcmplt>
 800b582:	2800      	cmp	r0, #0
 800b584:	d163      	bne.n	800b64e <_dtoa_r+0x5de>
 800b586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b58a:	2000      	movs	r0, #0
 800b58c:	4937      	ldr	r1, [pc, #220]	; (800b66c <_dtoa_r+0x5fc>)
 800b58e:	f7f4 fe7b 	bl	8000288 <__aeabi_dsub>
 800b592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b596:	f7f5 faa1 	bl	8000adc <__aeabi_dcmplt>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f040 80b7 	bne.w	800b70e <_dtoa_r+0x69e>
 800b5a0:	eba5 030b 	sub.w	r3, r5, fp
 800b5a4:	429f      	cmp	r7, r3
 800b5a6:	f77f af7c 	ble.w	800b4a2 <_dtoa_r+0x432>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	4b30      	ldr	r3, [pc, #192]	; (800b670 <_dtoa_r+0x600>)
 800b5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <_dtoa_r+0x600>)
 800b5be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5c2:	f7f5 f819 	bl	80005f8 <__aeabi_dmul>
 800b5c6:	e9cd 0100 	strd	r0, r1, [sp]
 800b5ca:	e7c4      	b.n	800b556 <_dtoa_r+0x4e6>
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4633      	mov	r3, r6
 800b5d0:	f7f5 f812 	bl	80005f8 <__aeabi_dmul>
 800b5d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b5d8:	eb0b 0507 	add.w	r5, fp, r7
 800b5dc:	465e      	mov	r6, fp
 800b5de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5e2:	f7f5 fab9 	bl	8000b58 <__aeabi_d2iz>
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	f7f4 ff9c 	bl	8000524 <__aeabi_i2d>
 800b5ec:	3730      	adds	r7, #48	; 0x30
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f6:	f7f4 fe47 	bl	8000288 <__aeabi_dsub>
 800b5fa:	f806 7b01 	strb.w	r7, [r6], #1
 800b5fe:	42ae      	cmp	r6, r5
 800b600:	e9cd 0100 	strd	r0, r1, [sp]
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	d126      	bne.n	800b658 <_dtoa_r+0x5e8>
 800b60a:	4b1c      	ldr	r3, [pc, #112]	; (800b67c <_dtoa_r+0x60c>)
 800b60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b610:	f7f4 fe3c 	bl	800028c <__adddf3>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b61c:	f7f5 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 800b620:	2800      	cmp	r0, #0
 800b622:	d174      	bne.n	800b70e <_dtoa_r+0x69e>
 800b624:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b628:	2000      	movs	r0, #0
 800b62a:	4914      	ldr	r1, [pc, #80]	; (800b67c <_dtoa_r+0x60c>)
 800b62c:	f7f4 fe2c 	bl	8000288 <__aeabi_dsub>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b638:	f7f5 fa50 	bl	8000adc <__aeabi_dcmplt>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f43f af30 	beq.w	800b4a2 <_dtoa_r+0x432>
 800b642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b646:	2b30      	cmp	r3, #48	; 0x30
 800b648:	f105 32ff 	add.w	r2, r5, #4294967295
 800b64c:	d002      	beq.n	800b654 <_dtoa_r+0x5e4>
 800b64e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b652:	e04a      	b.n	800b6ea <_dtoa_r+0x67a>
 800b654:	4615      	mov	r5, r2
 800b656:	e7f4      	b.n	800b642 <_dtoa_r+0x5d2>
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <_dtoa_r+0x600>)
 800b65a:	f7f4 ffcd 	bl	80005f8 <__aeabi_dmul>
 800b65e:	e9cd 0100 	strd	r0, r1, [sp]
 800b662:	e7bc      	b.n	800b5de <_dtoa_r+0x56e>
 800b664:	0800ce60 	.word	0x0800ce60
 800b668:	0800ce38 	.word	0x0800ce38
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	40240000 	.word	0x40240000
 800b674:	401c0000 	.word	0x401c0000
 800b678:	40140000 	.word	0x40140000
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b684:	465d      	mov	r5, fp
 800b686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b68a:	4630      	mov	r0, r6
 800b68c:	4639      	mov	r1, r7
 800b68e:	f7f5 f8dd 	bl	800084c <__aeabi_ddiv>
 800b692:	f7f5 fa61 	bl	8000b58 <__aeabi_d2iz>
 800b696:	4680      	mov	r8, r0
 800b698:	f7f4 ff44 	bl	8000524 <__aeabi_i2d>
 800b69c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6a0:	f7f4 ffaa 	bl	80005f8 <__aeabi_dmul>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b6b0:	f7f4 fdea 	bl	8000288 <__aeabi_dsub>
 800b6b4:	f805 6b01 	strb.w	r6, [r5], #1
 800b6b8:	eba5 060b 	sub.w	r6, r5, fp
 800b6bc:	45b1      	cmp	r9, r6
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	d139      	bne.n	800b738 <_dtoa_r+0x6c8>
 800b6c4:	f7f4 fde2 	bl	800028c <__adddf3>
 800b6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	460f      	mov	r7, r1
 800b6d0:	f7f5 fa22 	bl	8000b18 <__aeabi_dcmpgt>
 800b6d4:	b9c8      	cbnz	r0, 800b70a <_dtoa_r+0x69a>
 800b6d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6da:	4630      	mov	r0, r6
 800b6dc:	4639      	mov	r1, r7
 800b6de:	f7f5 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6e2:	b110      	cbz	r0, 800b6ea <_dtoa_r+0x67a>
 800b6e4:	f018 0f01 	tst.w	r8, #1
 800b6e8:	d10f      	bne.n	800b70a <_dtoa_r+0x69a>
 800b6ea:	9904      	ldr	r1, [sp, #16]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fcaa 	bl	800c046 <_Bfree>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6f6:	702b      	strb	r3, [r5, #0]
 800b6f8:	f10a 0301 	add.w	r3, sl, #1
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 8241 	beq.w	800bb88 <_dtoa_r+0xb18>
 800b706:	601d      	str	r5, [r3, #0]
 800b708:	e23e      	b.n	800bb88 <_dtoa_r+0xb18>
 800b70a:	f8cd a020 	str.w	sl, [sp, #32]
 800b70e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b712:	2a39      	cmp	r2, #57	; 0x39
 800b714:	f105 33ff 	add.w	r3, r5, #4294967295
 800b718:	d108      	bne.n	800b72c <_dtoa_r+0x6bc>
 800b71a:	459b      	cmp	fp, r3
 800b71c:	d10a      	bne.n	800b734 <_dtoa_r+0x6c4>
 800b71e:	9b08      	ldr	r3, [sp, #32]
 800b720:	3301      	adds	r3, #1
 800b722:	9308      	str	r3, [sp, #32]
 800b724:	2330      	movs	r3, #48	; 0x30
 800b726:	f88b 3000 	strb.w	r3, [fp]
 800b72a:	465b      	mov	r3, fp
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	3201      	adds	r2, #1
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	e78c      	b.n	800b64e <_dtoa_r+0x5de>
 800b734:	461d      	mov	r5, r3
 800b736:	e7ea      	b.n	800b70e <_dtoa_r+0x69e>
 800b738:	2200      	movs	r2, #0
 800b73a:	4b9b      	ldr	r3, [pc, #620]	; (800b9a8 <_dtoa_r+0x938>)
 800b73c:	f7f4 ff5c 	bl	80005f8 <__aeabi_dmul>
 800b740:	2200      	movs	r2, #0
 800b742:	2300      	movs	r3, #0
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	f7f5 f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d09a      	beq.n	800b686 <_dtoa_r+0x616>
 800b750:	e7cb      	b.n	800b6ea <_dtoa_r+0x67a>
 800b752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b754:	2a00      	cmp	r2, #0
 800b756:	f000 808b 	beq.w	800b870 <_dtoa_r+0x800>
 800b75a:	9a06      	ldr	r2, [sp, #24]
 800b75c:	2a01      	cmp	r2, #1
 800b75e:	dc6e      	bgt.n	800b83e <_dtoa_r+0x7ce>
 800b760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b762:	2a00      	cmp	r2, #0
 800b764:	d067      	beq.n	800b836 <_dtoa_r+0x7c6>
 800b766:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b76a:	9f07      	ldr	r7, [sp, #28]
 800b76c:	9d05      	ldr	r5, [sp, #20]
 800b76e:	9a05      	ldr	r2, [sp, #20]
 800b770:	2101      	movs	r1, #1
 800b772:	441a      	add	r2, r3
 800b774:	4620      	mov	r0, r4
 800b776:	9205      	str	r2, [sp, #20]
 800b778:	4498      	add	r8, r3
 800b77a:	f000 fd04 	bl	800c186 <__i2b>
 800b77e:	4606      	mov	r6, r0
 800b780:	2d00      	cmp	r5, #0
 800b782:	dd0c      	ble.n	800b79e <_dtoa_r+0x72e>
 800b784:	f1b8 0f00 	cmp.w	r8, #0
 800b788:	dd09      	ble.n	800b79e <_dtoa_r+0x72e>
 800b78a:	4545      	cmp	r5, r8
 800b78c:	9a05      	ldr	r2, [sp, #20]
 800b78e:	462b      	mov	r3, r5
 800b790:	bfa8      	it	ge
 800b792:	4643      	movge	r3, r8
 800b794:	1ad2      	subs	r2, r2, r3
 800b796:	9205      	str	r2, [sp, #20]
 800b798:	1aed      	subs	r5, r5, r3
 800b79a:	eba8 0803 	sub.w	r8, r8, r3
 800b79e:	9b07      	ldr	r3, [sp, #28]
 800b7a0:	b1eb      	cbz	r3, 800b7de <_dtoa_r+0x76e>
 800b7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d067      	beq.n	800b878 <_dtoa_r+0x808>
 800b7a8:	b18f      	cbz	r7, 800b7ce <_dtoa_r+0x75e>
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	463a      	mov	r2, r7
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 fd88 	bl	800c2c4 <__pow5mult>
 800b7b4:	9a04      	ldr	r2, [sp, #16]
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fcec 	bl	800c198 <__multiply>
 800b7c0:	9904      	ldr	r1, [sp, #16]
 800b7c2:	9008      	str	r0, [sp, #32]
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 fc3e 	bl	800c046 <_Bfree>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	9b07      	ldr	r3, [sp, #28]
 800b7d0:	1bda      	subs	r2, r3, r7
 800b7d2:	d004      	beq.n	800b7de <_dtoa_r+0x76e>
 800b7d4:	9904      	ldr	r1, [sp, #16]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 fd74 	bl	800c2c4 <__pow5mult>
 800b7dc:	9004      	str	r0, [sp, #16]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 fcd0 	bl	800c186 <__i2b>
 800b7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 81d0 	beq.w	800bb90 <_dtoa_r+0xb20>
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fd65 	bl	800c2c4 <__pow5mult>
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	4607      	mov	r7, r0
 800b800:	dc40      	bgt.n	800b884 <_dtoa_r+0x814>
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d139      	bne.n	800b87c <_dtoa_r+0x80c>
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d136      	bne.n	800b880 <_dtoa_r+0x810>
 800b812:	9b01      	ldr	r3, [sp, #4]
 800b814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b818:	0d1b      	lsrs	r3, r3, #20
 800b81a:	051b      	lsls	r3, r3, #20
 800b81c:	b12b      	cbz	r3, 800b82a <_dtoa_r+0x7ba>
 800b81e:	9b05      	ldr	r3, [sp, #20]
 800b820:	3301      	adds	r3, #1
 800b822:	9305      	str	r3, [sp, #20]
 800b824:	f108 0801 	add.w	r8, r8, #1
 800b828:	2301      	movs	r3, #1
 800b82a:	9307      	str	r3, [sp, #28]
 800b82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d12a      	bne.n	800b888 <_dtoa_r+0x818>
 800b832:	2001      	movs	r0, #1
 800b834:	e030      	b.n	800b898 <_dtoa_r+0x828>
 800b836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b838:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b83c:	e795      	b.n	800b76a <_dtoa_r+0x6fa>
 800b83e:	9b07      	ldr	r3, [sp, #28]
 800b840:	f109 37ff 	add.w	r7, r9, #4294967295
 800b844:	42bb      	cmp	r3, r7
 800b846:	bfbf      	itttt	lt
 800b848:	9b07      	ldrlt	r3, [sp, #28]
 800b84a:	9707      	strlt	r7, [sp, #28]
 800b84c:	1afa      	sublt	r2, r7, r3
 800b84e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b850:	bfbb      	ittet	lt
 800b852:	189b      	addlt	r3, r3, r2
 800b854:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b856:	1bdf      	subge	r7, r3, r7
 800b858:	2700      	movlt	r7, #0
 800b85a:	f1b9 0f00 	cmp.w	r9, #0
 800b85e:	bfb5      	itete	lt
 800b860:	9b05      	ldrlt	r3, [sp, #20]
 800b862:	9d05      	ldrge	r5, [sp, #20]
 800b864:	eba3 0509 	sublt.w	r5, r3, r9
 800b868:	464b      	movge	r3, r9
 800b86a:	bfb8      	it	lt
 800b86c:	2300      	movlt	r3, #0
 800b86e:	e77e      	b.n	800b76e <_dtoa_r+0x6fe>
 800b870:	9f07      	ldr	r7, [sp, #28]
 800b872:	9d05      	ldr	r5, [sp, #20]
 800b874:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b876:	e783      	b.n	800b780 <_dtoa_r+0x710>
 800b878:	9a07      	ldr	r2, [sp, #28]
 800b87a:	e7ab      	b.n	800b7d4 <_dtoa_r+0x764>
 800b87c:	2300      	movs	r3, #0
 800b87e:	e7d4      	b.n	800b82a <_dtoa_r+0x7ba>
 800b880:	9b00      	ldr	r3, [sp, #0]
 800b882:	e7d2      	b.n	800b82a <_dtoa_r+0x7ba>
 800b884:	2300      	movs	r3, #0
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b88e:	6918      	ldr	r0, [r3, #16]
 800b890:	f000 fc2b 	bl	800c0ea <__hi0bits>
 800b894:	f1c0 0020 	rsb	r0, r0, #32
 800b898:	4440      	add	r0, r8
 800b89a:	f010 001f 	ands.w	r0, r0, #31
 800b89e:	d047      	beq.n	800b930 <_dtoa_r+0x8c0>
 800b8a0:	f1c0 0320 	rsb	r3, r0, #32
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	dd3b      	ble.n	800b920 <_dtoa_r+0x8b0>
 800b8a8:	9b05      	ldr	r3, [sp, #20]
 800b8aa:	f1c0 001c 	rsb	r0, r0, #28
 800b8ae:	4403      	add	r3, r0
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	4405      	add	r5, r0
 800b8b4:	4480      	add	r8, r0
 800b8b6:	9b05      	ldr	r3, [sp, #20]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd05      	ble.n	800b8c8 <_dtoa_r+0x858>
 800b8bc:	461a      	mov	r2, r3
 800b8be:	9904      	ldr	r1, [sp, #16]
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 fd4d 	bl	800c360 <__lshift>
 800b8c6:	9004      	str	r0, [sp, #16]
 800b8c8:	f1b8 0f00 	cmp.w	r8, #0
 800b8cc:	dd05      	ble.n	800b8da <_dtoa_r+0x86a>
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	4642      	mov	r2, r8
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fd44 	bl	800c360 <__lshift>
 800b8d8:	4607      	mov	r7, r0
 800b8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8dc:	b353      	cbz	r3, 800b934 <_dtoa_r+0x8c4>
 800b8de:	4639      	mov	r1, r7
 800b8e0:	9804      	ldr	r0, [sp, #16]
 800b8e2:	f000 fd91 	bl	800c408 <__mcmp>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	da24      	bge.n	800b934 <_dtoa_r+0x8c4>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	220a      	movs	r2, #10
 800b8ee:	9904      	ldr	r1, [sp, #16]
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 fbbf 	bl	800c074 <__multadd>
 800b8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f8:	9004      	str	r0, [sp, #16]
 800b8fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 814d 	beq.w	800bb9e <_dtoa_r+0xb2e>
 800b904:	2300      	movs	r3, #0
 800b906:	4631      	mov	r1, r6
 800b908:	220a      	movs	r2, #10
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fbb2 	bl	800c074 <__multadd>
 800b910:	9b02      	ldr	r3, [sp, #8]
 800b912:	2b00      	cmp	r3, #0
 800b914:	4606      	mov	r6, r0
 800b916:	dc4f      	bgt.n	800b9b8 <_dtoa_r+0x948>
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	dd4c      	ble.n	800b9b8 <_dtoa_r+0x948>
 800b91e:	e011      	b.n	800b944 <_dtoa_r+0x8d4>
 800b920:	d0c9      	beq.n	800b8b6 <_dtoa_r+0x846>
 800b922:	9a05      	ldr	r2, [sp, #20]
 800b924:	331c      	adds	r3, #28
 800b926:	441a      	add	r2, r3
 800b928:	9205      	str	r2, [sp, #20]
 800b92a:	441d      	add	r5, r3
 800b92c:	4498      	add	r8, r3
 800b92e:	e7c2      	b.n	800b8b6 <_dtoa_r+0x846>
 800b930:	4603      	mov	r3, r0
 800b932:	e7f6      	b.n	800b922 <_dtoa_r+0x8b2>
 800b934:	f1b9 0f00 	cmp.w	r9, #0
 800b938:	dc38      	bgt.n	800b9ac <_dtoa_r+0x93c>
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	dd35      	ble.n	800b9ac <_dtoa_r+0x93c>
 800b940:	f8cd 9008 	str.w	r9, [sp, #8]
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	b963      	cbnz	r3, 800b962 <_dtoa_r+0x8f2>
 800b948:	4639      	mov	r1, r7
 800b94a:	2205      	movs	r2, #5
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fb91 	bl	800c074 <__multadd>
 800b952:	4601      	mov	r1, r0
 800b954:	4607      	mov	r7, r0
 800b956:	9804      	ldr	r0, [sp, #16]
 800b958:	f000 fd56 	bl	800c408 <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f73f adcc 	bgt.w	800b4fa <_dtoa_r+0x48a>
 800b962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b964:	465d      	mov	r5, fp
 800b966:	ea6f 0a03 	mvn.w	sl, r3
 800b96a:	f04f 0900 	mov.w	r9, #0
 800b96e:	4639      	mov	r1, r7
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fb68 	bl	800c046 <_Bfree>
 800b976:	2e00      	cmp	r6, #0
 800b978:	f43f aeb7 	beq.w	800b6ea <_dtoa_r+0x67a>
 800b97c:	f1b9 0f00 	cmp.w	r9, #0
 800b980:	d005      	beq.n	800b98e <_dtoa_r+0x91e>
 800b982:	45b1      	cmp	r9, r6
 800b984:	d003      	beq.n	800b98e <_dtoa_r+0x91e>
 800b986:	4649      	mov	r1, r9
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fb5c 	bl	800c046 <_Bfree>
 800b98e:	4631      	mov	r1, r6
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fb58 	bl	800c046 <_Bfree>
 800b996:	e6a8      	b.n	800b6ea <_dtoa_r+0x67a>
 800b998:	2700      	movs	r7, #0
 800b99a:	463e      	mov	r6, r7
 800b99c:	e7e1      	b.n	800b962 <_dtoa_r+0x8f2>
 800b99e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b9a2:	463e      	mov	r6, r7
 800b9a4:	e5a9      	b.n	800b4fa <_dtoa_r+0x48a>
 800b9a6:	bf00      	nop
 800b9a8:	40240000 	.word	0x40240000
 800b9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 80fa 	beq.w	800bbac <_dtoa_r+0xb3c>
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	dd05      	ble.n	800b9c8 <_dtoa_r+0x958>
 800b9bc:	4631      	mov	r1, r6
 800b9be:	462a      	mov	r2, r5
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 fccd 	bl	800c360 <__lshift>
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d04c      	beq.n	800ba68 <_dtoa_r+0x9f8>
 800b9ce:	6871      	ldr	r1, [r6, #4]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fb04 	bl	800bfde <_Balloc>
 800b9d6:	6932      	ldr	r2, [r6, #16]
 800b9d8:	3202      	adds	r2, #2
 800b9da:	4605      	mov	r5, r0
 800b9dc:	0092      	lsls	r2, r2, #2
 800b9de:	f106 010c 	add.w	r1, r6, #12
 800b9e2:	300c      	adds	r0, #12
 800b9e4:	f000 faf0 	bl	800bfc8 <memcpy>
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f000 fcb7 	bl	800c360 <__lshift>
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	f8cd b014 	str.w	fp, [sp, #20]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	46b1      	mov	r9, r6
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	4606      	mov	r6, r0
 800ba02:	4639      	mov	r1, r7
 800ba04:	9804      	ldr	r0, [sp, #16]
 800ba06:	f7ff faa7 	bl	800af58 <quorem>
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ba12:	9804      	ldr	r0, [sp, #16]
 800ba14:	f000 fcf8 	bl	800c408 <__mcmp>
 800ba18:	4632      	mov	r2, r6
 800ba1a:	9000      	str	r0, [sp, #0]
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fd0c 	bl	800c43c <__mdiff>
 800ba24:	68c3      	ldr	r3, [r0, #12]
 800ba26:	4602      	mov	r2, r0
 800ba28:	bb03      	cbnz	r3, 800ba6c <_dtoa_r+0x9fc>
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	9008      	str	r0, [sp, #32]
 800ba2e:	9804      	ldr	r0, [sp, #16]
 800ba30:	f000 fcea 	bl	800c408 <__mcmp>
 800ba34:	9a08      	ldr	r2, [sp, #32]
 800ba36:	4603      	mov	r3, r0
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	9308      	str	r3, [sp, #32]
 800ba3e:	f000 fb02 	bl	800c046 <_Bfree>
 800ba42:	9b08      	ldr	r3, [sp, #32]
 800ba44:	b9a3      	cbnz	r3, 800ba70 <_dtoa_r+0xa00>
 800ba46:	9a06      	ldr	r2, [sp, #24]
 800ba48:	b992      	cbnz	r2, 800ba70 <_dtoa_r+0xa00>
 800ba4a:	9a07      	ldr	r2, [sp, #28]
 800ba4c:	b982      	cbnz	r2, 800ba70 <_dtoa_r+0xa00>
 800ba4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba52:	d029      	beq.n	800baa8 <_dtoa_r+0xa38>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dd01      	ble.n	800ba5e <_dtoa_r+0x9ee>
 800ba5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	1c5d      	adds	r5, r3, #1
 800ba62:	f883 8000 	strb.w	r8, [r3]
 800ba66:	e782      	b.n	800b96e <_dtoa_r+0x8fe>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	e7c2      	b.n	800b9f2 <_dtoa_r+0x982>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7e3      	b.n	800ba38 <_dtoa_r+0x9c8>
 800ba70:	9a00      	ldr	r2, [sp, #0]
 800ba72:	2a00      	cmp	r2, #0
 800ba74:	db04      	blt.n	800ba80 <_dtoa_r+0xa10>
 800ba76:	d125      	bne.n	800bac4 <_dtoa_r+0xa54>
 800ba78:	9a06      	ldr	r2, [sp, #24]
 800ba7a:	bb1a      	cbnz	r2, 800bac4 <_dtoa_r+0xa54>
 800ba7c:	9a07      	ldr	r2, [sp, #28]
 800ba7e:	bb0a      	cbnz	r2, 800bac4 <_dtoa_r+0xa54>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	ddec      	ble.n	800ba5e <_dtoa_r+0x9ee>
 800ba84:	2201      	movs	r2, #1
 800ba86:	9904      	ldr	r1, [sp, #16]
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 fc69 	bl	800c360 <__lshift>
 800ba8e:	4639      	mov	r1, r7
 800ba90:	9004      	str	r0, [sp, #16]
 800ba92:	f000 fcb9 	bl	800c408 <__mcmp>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	dc03      	bgt.n	800baa2 <_dtoa_r+0xa32>
 800ba9a:	d1e0      	bne.n	800ba5e <_dtoa_r+0x9ee>
 800ba9c:	f018 0f01 	tst.w	r8, #1
 800baa0:	d0dd      	beq.n	800ba5e <_dtoa_r+0x9ee>
 800baa2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800baa6:	d1d8      	bne.n	800ba5a <_dtoa_r+0x9ea>
 800baa8:	9b05      	ldr	r3, [sp, #20]
 800baaa:	9a05      	ldr	r2, [sp, #20]
 800baac:	1c5d      	adds	r5, r3, #1
 800baae:	2339      	movs	r3, #57	; 0x39
 800bab0:	7013      	strb	r3, [r2, #0]
 800bab2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bab6:	2b39      	cmp	r3, #57	; 0x39
 800bab8:	f105 32ff 	add.w	r2, r5, #4294967295
 800babc:	d04f      	beq.n	800bb5e <_dtoa_r+0xaee>
 800babe:	3301      	adds	r3, #1
 800bac0:	7013      	strb	r3, [r2, #0]
 800bac2:	e754      	b.n	800b96e <_dtoa_r+0x8fe>
 800bac4:	9a05      	ldr	r2, [sp, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f102 0501 	add.w	r5, r2, #1
 800bacc:	dd06      	ble.n	800badc <_dtoa_r+0xa6c>
 800bace:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bad2:	d0e9      	beq.n	800baa8 <_dtoa_r+0xa38>
 800bad4:	f108 0801 	add.w	r8, r8, #1
 800bad8:	9b05      	ldr	r3, [sp, #20]
 800bada:	e7c2      	b.n	800ba62 <_dtoa_r+0x9f2>
 800badc:	9a02      	ldr	r2, [sp, #8]
 800bade:	f805 8c01 	strb.w	r8, [r5, #-1]
 800bae2:	eba5 030b 	sub.w	r3, r5, fp
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d021      	beq.n	800bb2e <_dtoa_r+0xabe>
 800baea:	2300      	movs	r3, #0
 800baec:	220a      	movs	r2, #10
 800baee:	9904      	ldr	r1, [sp, #16]
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fabf 	bl	800c074 <__multadd>
 800baf6:	45b1      	cmp	r9, r6
 800baf8:	9004      	str	r0, [sp, #16]
 800bafa:	f04f 0300 	mov.w	r3, #0
 800bafe:	f04f 020a 	mov.w	r2, #10
 800bb02:	4649      	mov	r1, r9
 800bb04:	4620      	mov	r0, r4
 800bb06:	d105      	bne.n	800bb14 <_dtoa_r+0xaa4>
 800bb08:	f000 fab4 	bl	800c074 <__multadd>
 800bb0c:	4681      	mov	r9, r0
 800bb0e:	4606      	mov	r6, r0
 800bb10:	9505      	str	r5, [sp, #20]
 800bb12:	e776      	b.n	800ba02 <_dtoa_r+0x992>
 800bb14:	f000 faae 	bl	800c074 <__multadd>
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	220a      	movs	r2, #10
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 faa7 	bl	800c074 <__multadd>
 800bb26:	4606      	mov	r6, r0
 800bb28:	e7f2      	b.n	800bb10 <_dtoa_r+0xaa0>
 800bb2a:	f04f 0900 	mov.w	r9, #0
 800bb2e:	2201      	movs	r2, #1
 800bb30:	9904      	ldr	r1, [sp, #16]
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 fc14 	bl	800c360 <__lshift>
 800bb38:	4639      	mov	r1, r7
 800bb3a:	9004      	str	r0, [sp, #16]
 800bb3c:	f000 fc64 	bl	800c408 <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	dcb6      	bgt.n	800bab2 <_dtoa_r+0xa42>
 800bb44:	d102      	bne.n	800bb4c <_dtoa_r+0xadc>
 800bb46:	f018 0f01 	tst.w	r8, #1
 800bb4a:	d1b2      	bne.n	800bab2 <_dtoa_r+0xa42>
 800bb4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb50:	2b30      	cmp	r3, #48	; 0x30
 800bb52:	f105 32ff 	add.w	r2, r5, #4294967295
 800bb56:	f47f af0a 	bne.w	800b96e <_dtoa_r+0x8fe>
 800bb5a:	4615      	mov	r5, r2
 800bb5c:	e7f6      	b.n	800bb4c <_dtoa_r+0xadc>
 800bb5e:	4593      	cmp	fp, r2
 800bb60:	d105      	bne.n	800bb6e <_dtoa_r+0xafe>
 800bb62:	2331      	movs	r3, #49	; 0x31
 800bb64:	f10a 0a01 	add.w	sl, sl, #1
 800bb68:	f88b 3000 	strb.w	r3, [fp]
 800bb6c:	e6ff      	b.n	800b96e <_dtoa_r+0x8fe>
 800bb6e:	4615      	mov	r5, r2
 800bb70:	e79f      	b.n	800bab2 <_dtoa_r+0xa42>
 800bb72:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bbd8 <_dtoa_r+0xb68>
 800bb76:	e007      	b.n	800bb88 <_dtoa_r+0xb18>
 800bb78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bbdc <_dtoa_r+0xb6c>
 800bb7e:	b11b      	cbz	r3, 800bb88 <_dtoa_r+0xb18>
 800bb80:	f10b 0308 	add.w	r3, fp, #8
 800bb84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	4658      	mov	r0, fp
 800bb8a:	b017      	add	sp, #92	; 0x5c
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	f77f ae35 	ble.w	800b802 <_dtoa_r+0x792>
 800bb98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb9a:	9307      	str	r3, [sp, #28]
 800bb9c:	e649      	b.n	800b832 <_dtoa_r+0x7c2>
 800bb9e:	9b02      	ldr	r3, [sp, #8]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	dc03      	bgt.n	800bbac <_dtoa_r+0xb3c>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	f73f aecc 	bgt.w	800b944 <_dtoa_r+0x8d4>
 800bbac:	465d      	mov	r5, fp
 800bbae:	4639      	mov	r1, r7
 800bbb0:	9804      	ldr	r0, [sp, #16]
 800bbb2:	f7ff f9d1 	bl	800af58 <quorem>
 800bbb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bbba:	f805 8b01 	strb.w	r8, [r5], #1
 800bbbe:	9a02      	ldr	r2, [sp, #8]
 800bbc0:	eba5 030b 	sub.w	r3, r5, fp
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	ddb0      	ble.n	800bb2a <_dtoa_r+0xaba>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	220a      	movs	r2, #10
 800bbcc:	9904      	ldr	r1, [sp, #16]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 fa50 	bl	800c074 <__multadd>
 800bbd4:	9004      	str	r0, [sp, #16]
 800bbd6:	e7ea      	b.n	800bbae <_dtoa_r+0xb3e>
 800bbd8:	0800cda0 	.word	0x0800cda0
 800bbdc:	0800cdc4 	.word	0x0800cdc4

0800bbe0 <__sflush_r>:
 800bbe0:	898a      	ldrh	r2, [r1, #12]
 800bbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	0710      	lsls	r0, r2, #28
 800bbea:	460c      	mov	r4, r1
 800bbec:	d458      	bmi.n	800bca0 <__sflush_r+0xc0>
 800bbee:	684b      	ldr	r3, [r1, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc05      	bgt.n	800bc00 <__sflush_r+0x20>
 800bbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	dc02      	bgt.n	800bc00 <__sflush_r+0x20>
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	d0f9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc0c:	682f      	ldr	r7, [r5, #0]
 800bc0e:	6a21      	ldr	r1, [r4, #32]
 800bc10:	602b      	str	r3, [r5, #0]
 800bc12:	d032      	beq.n	800bc7a <__sflush_r+0x9a>
 800bc14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	075a      	lsls	r2, r3, #29
 800bc1a:	d505      	bpl.n	800bc28 <__sflush_r+0x48>
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	1ac0      	subs	r0, r0, r3
 800bc20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc22:	b10b      	cbz	r3, 800bc28 <__sflush_r+0x48>
 800bc24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc26:	1ac0      	subs	r0, r0, r3
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc2e:	6a21      	ldr	r1, [r4, #32]
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b0      	blx	r6
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	d106      	bne.n	800bc48 <__sflush_r+0x68>
 800bc3a:	6829      	ldr	r1, [r5, #0]
 800bc3c:	291d      	cmp	r1, #29
 800bc3e:	d848      	bhi.n	800bcd2 <__sflush_r+0xf2>
 800bc40:	4a29      	ldr	r2, [pc, #164]	; (800bce8 <__sflush_r+0x108>)
 800bc42:	40ca      	lsrs	r2, r1
 800bc44:	07d6      	lsls	r6, r2, #31
 800bc46:	d544      	bpl.n	800bcd2 <__sflush_r+0xf2>
 800bc48:	2200      	movs	r2, #0
 800bc4a:	6062      	str	r2, [r4, #4]
 800bc4c:	04d9      	lsls	r1, r3, #19
 800bc4e:	6922      	ldr	r2, [r4, #16]
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	d504      	bpl.n	800bc5e <__sflush_r+0x7e>
 800bc54:	1c42      	adds	r2, r0, #1
 800bc56:	d101      	bne.n	800bc5c <__sflush_r+0x7c>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b903      	cbnz	r3, 800bc5e <__sflush_r+0x7e>
 800bc5c:	6560      	str	r0, [r4, #84]	; 0x54
 800bc5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc60:	602f      	str	r7, [r5, #0]
 800bc62:	2900      	cmp	r1, #0
 800bc64:	d0c9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bc66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d002      	beq.n	800bc74 <__sflush_r+0x94>
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 fc9e 	bl	800c5b0 <_free_r>
 800bc74:	2000      	movs	r0, #0
 800bc76:	6360      	str	r0, [r4, #52]	; 0x34
 800bc78:	e7c0      	b.n	800bbfc <__sflush_r+0x1c>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b0      	blx	r6
 800bc80:	1c41      	adds	r1, r0, #1
 800bc82:	d1c8      	bne.n	800bc16 <__sflush_r+0x36>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c5      	beq.n	800bc16 <__sflush_r+0x36>
 800bc8a:	2b1d      	cmp	r3, #29
 800bc8c:	d001      	beq.n	800bc92 <__sflush_r+0xb2>
 800bc8e:	2b16      	cmp	r3, #22
 800bc90:	d101      	bne.n	800bc96 <__sflush_r+0xb6>
 800bc92:	602f      	str	r7, [r5, #0]
 800bc94:	e7b1      	b.n	800bbfa <__sflush_r+0x1a>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9c:	81a3      	strh	r3, [r4, #12]
 800bc9e:	e7ad      	b.n	800bbfc <__sflush_r+0x1c>
 800bca0:	690f      	ldr	r7, [r1, #16]
 800bca2:	2f00      	cmp	r7, #0
 800bca4:	d0a9      	beq.n	800bbfa <__sflush_r+0x1a>
 800bca6:	0793      	lsls	r3, r2, #30
 800bca8:	680e      	ldr	r6, [r1, #0]
 800bcaa:	bf08      	it	eq
 800bcac:	694b      	ldreq	r3, [r1, #20]
 800bcae:	600f      	str	r7, [r1, #0]
 800bcb0:	bf18      	it	ne
 800bcb2:	2300      	movne	r3, #0
 800bcb4:	eba6 0807 	sub.w	r8, r6, r7
 800bcb8:	608b      	str	r3, [r1, #8]
 800bcba:	f1b8 0f00 	cmp.w	r8, #0
 800bcbe:	dd9c      	ble.n	800bbfa <__sflush_r+0x1a>
 800bcc0:	4643      	mov	r3, r8
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	6a21      	ldr	r1, [r4, #32]
 800bcc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcc8:	4628      	mov	r0, r5
 800bcca:	47b0      	blx	r6
 800bccc:	2800      	cmp	r0, #0
 800bcce:	dc06      	bgt.n	800bcde <__sflush_r+0xfe>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e78e      	b.n	800bbfc <__sflush_r+0x1c>
 800bcde:	4407      	add	r7, r0
 800bce0:	eba8 0800 	sub.w	r8, r8, r0
 800bce4:	e7e9      	b.n	800bcba <__sflush_r+0xda>
 800bce6:	bf00      	nop
 800bce8:	20400001 	.word	0x20400001

0800bcec <_fflush_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	690b      	ldr	r3, [r1, #16]
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	b1db      	cbz	r3, 800bd2e <_fflush_r+0x42>
 800bcf6:	b118      	cbz	r0, 800bd00 <_fflush_r+0x14>
 800bcf8:	6983      	ldr	r3, [r0, #24]
 800bcfa:	b90b      	cbnz	r3, 800bd00 <_fflush_r+0x14>
 800bcfc:	f000 f860 	bl	800bdc0 <__sinit>
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <_fflush_r+0x48>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d109      	bne.n	800bd1a <_fflush_r+0x2e>
 800bd06:	686c      	ldr	r4, [r5, #4]
 800bd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0c:	b17b      	cbz	r3, 800bd2e <_fflush_r+0x42>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd16:	f7ff bf63 	b.w	800bbe0 <__sflush_r>
 800bd1a:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <_fflush_r+0x4c>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	d101      	bne.n	800bd24 <_fflush_r+0x38>
 800bd20:	68ac      	ldr	r4, [r5, #8]
 800bd22:	e7f1      	b.n	800bd08 <_fflush_r+0x1c>
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <_fflush_r+0x50>)
 800bd26:	429c      	cmp	r4, r3
 800bd28:	bf08      	it	eq
 800bd2a:	68ec      	ldreq	r4, [r5, #12]
 800bd2c:	e7ec      	b.n	800bd08 <_fflush_r+0x1c>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	bd38      	pop	{r3, r4, r5, pc}
 800bd32:	bf00      	nop
 800bd34:	0800cdf4 	.word	0x0800cdf4
 800bd38:	0800ce14 	.word	0x0800ce14
 800bd3c:	0800cdd4 	.word	0x0800cdd4

0800bd40 <std>:
 800bd40:	2300      	movs	r3, #0
 800bd42:	b510      	push	{r4, lr}
 800bd44:	4604      	mov	r4, r0
 800bd46:	e9c0 3300 	strd	r3, r3, [r0]
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	8181      	strh	r1, [r0, #12]
 800bd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd50:	81c2      	strh	r2, [r0, #14]
 800bd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd56:	6183      	str	r3, [r0, #24]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	2208      	movs	r2, #8
 800bd5c:	305c      	adds	r0, #92	; 0x5c
 800bd5e:	f7fe faa5 	bl	800a2ac <memset>
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <std+0x38>)
 800bd64:	6263      	str	r3, [r4, #36]	; 0x24
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <std+0x3c>)
 800bd68:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x40>)
 800bd6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <std+0x44>)
 800bd70:	6224      	str	r4, [r4, #32]
 800bd72:	6323      	str	r3, [r4, #48]	; 0x30
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	0800c9a1 	.word	0x0800c9a1
 800bd7c:	0800c9c3 	.word	0x0800c9c3
 800bd80:	0800c9fb 	.word	0x0800c9fb
 800bd84:	0800ca1f 	.word	0x0800ca1f

0800bd88 <_cleanup_r>:
 800bd88:	4901      	ldr	r1, [pc, #4]	; (800bd90 <_cleanup_r+0x8>)
 800bd8a:	f000 b885 	b.w	800be98 <_fwalk_reent>
 800bd8e:	bf00      	nop
 800bd90:	0800bced 	.word	0x0800bced

0800bd94 <__sfmoreglue>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	1e4a      	subs	r2, r1, #1
 800bd98:	2568      	movs	r5, #104	; 0x68
 800bd9a:	4355      	muls	r5, r2
 800bd9c:	460e      	mov	r6, r1
 800bd9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bda2:	f000 fc53 	bl	800c64c <_malloc_r>
 800bda6:	4604      	mov	r4, r0
 800bda8:	b140      	cbz	r0, 800bdbc <__sfmoreglue+0x28>
 800bdaa:	2100      	movs	r1, #0
 800bdac:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb0:	300c      	adds	r0, #12
 800bdb2:	60a0      	str	r0, [r4, #8]
 800bdb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdb8:	f7fe fa78 	bl	800a2ac <memset>
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}

0800bdc0 <__sinit>:
 800bdc0:	6983      	ldr	r3, [r0, #24]
 800bdc2:	b510      	push	{r4, lr}
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	bb33      	cbnz	r3, 800be16 <__sinit+0x56>
 800bdc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bdcc:	6503      	str	r3, [r0, #80]	; 0x50
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <__sinit+0x58>)
 800bdd0:	4a12      	ldr	r2, [pc, #72]	; (800be1c <__sinit+0x5c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6282      	str	r2, [r0, #40]	; 0x28
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	bf04      	itt	eq
 800bdda:	2301      	moveq	r3, #1
 800bddc:	6183      	streq	r3, [r0, #24]
 800bdde:	f000 f81f 	bl	800be20 <__sfp>
 800bde2:	6060      	str	r0, [r4, #4]
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 f81b 	bl	800be20 <__sfp>
 800bdea:	60a0      	str	r0, [r4, #8]
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 f817 	bl	800be20 <__sfp>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	60e0      	str	r0, [r4, #12]
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	6860      	ldr	r0, [r4, #4]
 800bdfa:	f7ff ffa1 	bl	800bd40 <std>
 800bdfe:	2201      	movs	r2, #1
 800be00:	2109      	movs	r1, #9
 800be02:	68a0      	ldr	r0, [r4, #8]
 800be04:	f7ff ff9c 	bl	800bd40 <std>
 800be08:	2202      	movs	r2, #2
 800be0a:	2112      	movs	r1, #18
 800be0c:	68e0      	ldr	r0, [r4, #12]
 800be0e:	f7ff ff97 	bl	800bd40 <std>
 800be12:	2301      	movs	r3, #1
 800be14:	61a3      	str	r3, [r4, #24]
 800be16:	bd10      	pop	{r4, pc}
 800be18:	0800cd8c 	.word	0x0800cd8c
 800be1c:	0800bd89 	.word	0x0800bd89

0800be20 <__sfp>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	4b1b      	ldr	r3, [pc, #108]	; (800be90 <__sfp+0x70>)
 800be24:	681e      	ldr	r6, [r3, #0]
 800be26:	69b3      	ldr	r3, [r6, #24]
 800be28:	4607      	mov	r7, r0
 800be2a:	b913      	cbnz	r3, 800be32 <__sfp+0x12>
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7ff ffc7 	bl	800bdc0 <__sinit>
 800be32:	3648      	adds	r6, #72	; 0x48
 800be34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be38:	3b01      	subs	r3, #1
 800be3a:	d503      	bpl.n	800be44 <__sfp+0x24>
 800be3c:	6833      	ldr	r3, [r6, #0]
 800be3e:	b133      	cbz	r3, 800be4e <__sfp+0x2e>
 800be40:	6836      	ldr	r6, [r6, #0]
 800be42:	e7f7      	b.n	800be34 <__sfp+0x14>
 800be44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be48:	b16d      	cbz	r5, 800be66 <__sfp+0x46>
 800be4a:	3468      	adds	r4, #104	; 0x68
 800be4c:	e7f4      	b.n	800be38 <__sfp+0x18>
 800be4e:	2104      	movs	r1, #4
 800be50:	4638      	mov	r0, r7
 800be52:	f7ff ff9f 	bl	800bd94 <__sfmoreglue>
 800be56:	6030      	str	r0, [r6, #0]
 800be58:	2800      	cmp	r0, #0
 800be5a:	d1f1      	bne.n	800be40 <__sfp+0x20>
 800be5c:	230c      	movs	r3, #12
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4604      	mov	r4, r0
 800be62:	4620      	mov	r0, r4
 800be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <__sfp+0x74>)
 800be68:	6665      	str	r5, [r4, #100]	; 0x64
 800be6a:	e9c4 5500 	strd	r5, r5, [r4]
 800be6e:	60a5      	str	r5, [r4, #8]
 800be70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800be74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800be78:	2208      	movs	r2, #8
 800be7a:	4629      	mov	r1, r5
 800be7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be80:	f7fe fa14 	bl	800a2ac <memset>
 800be84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be8c:	e7e9      	b.n	800be62 <__sfp+0x42>
 800be8e:	bf00      	nop
 800be90:	0800cd8c 	.word	0x0800cd8c
 800be94:	ffff0001 	.word	0xffff0001

0800be98 <_fwalk_reent>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	4680      	mov	r8, r0
 800be9e:	4689      	mov	r9, r1
 800bea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bea4:	2600      	movs	r6, #0
 800bea6:	b914      	cbnz	r4, 800beae <_fwalk_reent+0x16>
 800bea8:	4630      	mov	r0, r6
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800beb2:	3f01      	subs	r7, #1
 800beb4:	d501      	bpl.n	800beba <_fwalk_reent+0x22>
 800beb6:	6824      	ldr	r4, [r4, #0]
 800beb8:	e7f5      	b.n	800bea6 <_fwalk_reent+0xe>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d907      	bls.n	800bed0 <_fwalk_reent+0x38>
 800bec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bec4:	3301      	adds	r3, #1
 800bec6:	d003      	beq.n	800bed0 <_fwalk_reent+0x38>
 800bec8:	4629      	mov	r1, r5
 800beca:	4640      	mov	r0, r8
 800becc:	47c8      	blx	r9
 800bece:	4306      	orrs	r6, r0
 800bed0:	3568      	adds	r5, #104	; 0x68
 800bed2:	e7ee      	b.n	800beb2 <_fwalk_reent+0x1a>

0800bed4 <_localeconv_r>:
 800bed4:	4b04      	ldr	r3, [pc, #16]	; (800bee8 <_localeconv_r+0x14>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6a18      	ldr	r0, [r3, #32]
 800beda:	4b04      	ldr	r3, [pc, #16]	; (800beec <_localeconv_r+0x18>)
 800bedc:	2800      	cmp	r0, #0
 800bede:	bf08      	it	eq
 800bee0:	4618      	moveq	r0, r3
 800bee2:	30f0      	adds	r0, #240	; 0xf0
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	2000000c 	.word	0x2000000c
 800beec:	20000070 	.word	0x20000070

0800bef0 <__swhatbuf_r>:
 800bef0:	b570      	push	{r4, r5, r6, lr}
 800bef2:	460e      	mov	r6, r1
 800bef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bef8:	2900      	cmp	r1, #0
 800befa:	b096      	sub	sp, #88	; 0x58
 800befc:	4614      	mov	r4, r2
 800befe:	461d      	mov	r5, r3
 800bf00:	da07      	bge.n	800bf12 <__swhatbuf_r+0x22>
 800bf02:	2300      	movs	r3, #0
 800bf04:	602b      	str	r3, [r5, #0]
 800bf06:	89b3      	ldrh	r3, [r6, #12]
 800bf08:	061a      	lsls	r2, r3, #24
 800bf0a:	d410      	bmi.n	800bf2e <__swhatbuf_r+0x3e>
 800bf0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf10:	e00e      	b.n	800bf30 <__swhatbuf_r+0x40>
 800bf12:	466a      	mov	r2, sp
 800bf14:	f000 fdaa 	bl	800ca6c <_fstat_r>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	dbf2      	blt.n	800bf02 <__swhatbuf_r+0x12>
 800bf1c:	9a01      	ldr	r2, [sp, #4]
 800bf1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf26:	425a      	negs	r2, r3
 800bf28:	415a      	adcs	r2, r3
 800bf2a:	602a      	str	r2, [r5, #0]
 800bf2c:	e7ee      	b.n	800bf0c <__swhatbuf_r+0x1c>
 800bf2e:	2340      	movs	r3, #64	; 0x40
 800bf30:	2000      	movs	r0, #0
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	b016      	add	sp, #88	; 0x58
 800bf36:	bd70      	pop	{r4, r5, r6, pc}

0800bf38 <__smakebuf_r>:
 800bf38:	898b      	ldrh	r3, [r1, #12]
 800bf3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf3c:	079d      	lsls	r5, r3, #30
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460c      	mov	r4, r1
 800bf42:	d507      	bpl.n	800bf54 <__smakebuf_r+0x1c>
 800bf44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	6123      	str	r3, [r4, #16]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	6163      	str	r3, [r4, #20]
 800bf50:	b002      	add	sp, #8
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	ab01      	add	r3, sp, #4
 800bf56:	466a      	mov	r2, sp
 800bf58:	f7ff ffca 	bl	800bef0 <__swhatbuf_r>
 800bf5c:	9900      	ldr	r1, [sp, #0]
 800bf5e:	4605      	mov	r5, r0
 800bf60:	4630      	mov	r0, r6
 800bf62:	f000 fb73 	bl	800c64c <_malloc_r>
 800bf66:	b948      	cbnz	r0, 800bf7c <__smakebuf_r+0x44>
 800bf68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6c:	059a      	lsls	r2, r3, #22
 800bf6e:	d4ef      	bmi.n	800bf50 <__smakebuf_r+0x18>
 800bf70:	f023 0303 	bic.w	r3, r3, #3
 800bf74:	f043 0302 	orr.w	r3, r3, #2
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	e7e3      	b.n	800bf44 <__smakebuf_r+0xc>
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <__smakebuf_r+0x7c>)
 800bf7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	6020      	str	r0, [r4, #0]
 800bf84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	9b00      	ldr	r3, [sp, #0]
 800bf8c:	6163      	str	r3, [r4, #20]
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	6120      	str	r0, [r4, #16]
 800bf92:	b15b      	cbz	r3, 800bfac <__smakebuf_r+0x74>
 800bf94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f000 fd79 	bl	800ca90 <_isatty_r>
 800bf9e:	b128      	cbz	r0, 800bfac <__smakebuf_r+0x74>
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	f043 0301 	orr.w	r3, r3, #1
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	431d      	orrs	r5, r3
 800bfb0:	81a5      	strh	r5, [r4, #12]
 800bfb2:	e7cd      	b.n	800bf50 <__smakebuf_r+0x18>
 800bfb4:	0800bd89 	.word	0x0800bd89

0800bfb8 <malloc>:
 800bfb8:	4b02      	ldr	r3, [pc, #8]	; (800bfc4 <malloc+0xc>)
 800bfba:	4601      	mov	r1, r0
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	f000 bb45 	b.w	800c64c <_malloc_r>
 800bfc2:	bf00      	nop
 800bfc4:	2000000c 	.word	0x2000000c

0800bfc8 <memcpy>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	1e43      	subs	r3, r0, #1
 800bfcc:	440a      	add	r2, r1
 800bfce:	4291      	cmp	r1, r2
 800bfd0:	d100      	bne.n	800bfd4 <memcpy+0xc>
 800bfd2:	bd10      	pop	{r4, pc}
 800bfd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfdc:	e7f7      	b.n	800bfce <memcpy+0x6>

0800bfde <_Balloc>:
 800bfde:	b570      	push	{r4, r5, r6, lr}
 800bfe0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	b93d      	cbnz	r5, 800bff8 <_Balloc+0x1a>
 800bfe8:	2010      	movs	r0, #16
 800bfea:	f7ff ffe5 	bl	800bfb8 <malloc>
 800bfee:	6260      	str	r0, [r4, #36]	; 0x24
 800bff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bff4:	6005      	str	r5, [r0, #0]
 800bff6:	60c5      	str	r5, [r0, #12]
 800bff8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bffa:	68eb      	ldr	r3, [r5, #12]
 800bffc:	b183      	cbz	r3, 800c020 <_Balloc+0x42>
 800bffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c006:	b9b8      	cbnz	r0, 800c038 <_Balloc+0x5a>
 800c008:	2101      	movs	r1, #1
 800c00a:	fa01 f506 	lsl.w	r5, r1, r6
 800c00e:	1d6a      	adds	r2, r5, #5
 800c010:	0092      	lsls	r2, r2, #2
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fabe 	bl	800c594 <_calloc_r>
 800c018:	b160      	cbz	r0, 800c034 <_Balloc+0x56>
 800c01a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c01e:	e00e      	b.n	800c03e <_Balloc+0x60>
 800c020:	2221      	movs	r2, #33	; 0x21
 800c022:	2104      	movs	r1, #4
 800c024:	4620      	mov	r0, r4
 800c026:	f000 fab5 	bl	800c594 <_calloc_r>
 800c02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c02c:	60e8      	str	r0, [r5, #12]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e4      	bne.n	800bffe <_Balloc+0x20>
 800c034:	2000      	movs	r0, #0
 800c036:	bd70      	pop	{r4, r5, r6, pc}
 800c038:	6802      	ldr	r2, [r0, #0]
 800c03a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c03e:	2300      	movs	r3, #0
 800c040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c044:	e7f7      	b.n	800c036 <_Balloc+0x58>

0800c046 <_Bfree>:
 800c046:	b570      	push	{r4, r5, r6, lr}
 800c048:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c04a:	4606      	mov	r6, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	b93c      	cbnz	r4, 800c060 <_Bfree+0x1a>
 800c050:	2010      	movs	r0, #16
 800c052:	f7ff ffb1 	bl	800bfb8 <malloc>
 800c056:	6270      	str	r0, [r6, #36]	; 0x24
 800c058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c05c:	6004      	str	r4, [r0, #0]
 800c05e:	60c4      	str	r4, [r0, #12]
 800c060:	b13d      	cbz	r5, 800c072 <_Bfree+0x2c>
 800c062:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c064:	686a      	ldr	r2, [r5, #4]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c06c:	6029      	str	r1, [r5, #0]
 800c06e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c072:	bd70      	pop	{r4, r5, r6, pc}

0800c074 <__multadd>:
 800c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c078:	690d      	ldr	r5, [r1, #16]
 800c07a:	461f      	mov	r7, r3
 800c07c:	4606      	mov	r6, r0
 800c07e:	460c      	mov	r4, r1
 800c080:	f101 0c14 	add.w	ip, r1, #20
 800c084:	2300      	movs	r3, #0
 800c086:	f8dc 0000 	ldr.w	r0, [ip]
 800c08a:	b281      	uxth	r1, r0
 800c08c:	fb02 7101 	mla	r1, r2, r1, r7
 800c090:	0c0f      	lsrs	r7, r1, #16
 800c092:	0c00      	lsrs	r0, r0, #16
 800c094:	fb02 7000 	mla	r0, r2, r0, r7
 800c098:	b289      	uxth	r1, r1
 800c09a:	3301      	adds	r3, #1
 800c09c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c0a0:	429d      	cmp	r5, r3
 800c0a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c0a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0aa:	dcec      	bgt.n	800c086 <__multadd+0x12>
 800c0ac:	b1d7      	cbz	r7, 800c0e4 <__multadd+0x70>
 800c0ae:	68a3      	ldr	r3, [r4, #8]
 800c0b0:	42ab      	cmp	r3, r5
 800c0b2:	dc12      	bgt.n	800c0da <__multadd+0x66>
 800c0b4:	6861      	ldr	r1, [r4, #4]
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	f7ff ff90 	bl	800bfde <_Balloc>
 800c0be:	6922      	ldr	r2, [r4, #16]
 800c0c0:	3202      	adds	r2, #2
 800c0c2:	f104 010c 	add.w	r1, r4, #12
 800c0c6:	4680      	mov	r8, r0
 800c0c8:	0092      	lsls	r2, r2, #2
 800c0ca:	300c      	adds	r0, #12
 800c0cc:	f7ff ff7c 	bl	800bfc8 <memcpy>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7ff ffb7 	bl	800c046 <_Bfree>
 800c0d8:	4644      	mov	r4, r8
 800c0da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0de:	3501      	adds	r5, #1
 800c0e0:	615f      	str	r7, [r3, #20]
 800c0e2:	6125      	str	r5, [r4, #16]
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0ea <__hi0bits>:
 800c0ea:	0c02      	lsrs	r2, r0, #16
 800c0ec:	0412      	lsls	r2, r2, #16
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	b9b2      	cbnz	r2, 800c120 <__hi0bits+0x36>
 800c0f2:	0403      	lsls	r3, r0, #16
 800c0f4:	2010      	movs	r0, #16
 800c0f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c0fa:	bf04      	itt	eq
 800c0fc:	021b      	lsleq	r3, r3, #8
 800c0fe:	3008      	addeq	r0, #8
 800c100:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c104:	bf04      	itt	eq
 800c106:	011b      	lsleq	r3, r3, #4
 800c108:	3004      	addeq	r0, #4
 800c10a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c10e:	bf04      	itt	eq
 800c110:	009b      	lsleq	r3, r3, #2
 800c112:	3002      	addeq	r0, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	db06      	blt.n	800c126 <__hi0bits+0x3c>
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	d503      	bpl.n	800c124 <__hi0bits+0x3a>
 800c11c:	3001      	adds	r0, #1
 800c11e:	4770      	bx	lr
 800c120:	2000      	movs	r0, #0
 800c122:	e7e8      	b.n	800c0f6 <__hi0bits+0xc>
 800c124:	2020      	movs	r0, #32
 800c126:	4770      	bx	lr

0800c128 <__lo0bits>:
 800c128:	6803      	ldr	r3, [r0, #0]
 800c12a:	f013 0207 	ands.w	r2, r3, #7
 800c12e:	4601      	mov	r1, r0
 800c130:	d00b      	beq.n	800c14a <__lo0bits+0x22>
 800c132:	07da      	lsls	r2, r3, #31
 800c134:	d423      	bmi.n	800c17e <__lo0bits+0x56>
 800c136:	0798      	lsls	r0, r3, #30
 800c138:	bf49      	itett	mi
 800c13a:	085b      	lsrmi	r3, r3, #1
 800c13c:	089b      	lsrpl	r3, r3, #2
 800c13e:	2001      	movmi	r0, #1
 800c140:	600b      	strmi	r3, [r1, #0]
 800c142:	bf5c      	itt	pl
 800c144:	600b      	strpl	r3, [r1, #0]
 800c146:	2002      	movpl	r0, #2
 800c148:	4770      	bx	lr
 800c14a:	b298      	uxth	r0, r3
 800c14c:	b9a8      	cbnz	r0, 800c17a <__lo0bits+0x52>
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	2010      	movs	r0, #16
 800c152:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c156:	bf04      	itt	eq
 800c158:	0a1b      	lsreq	r3, r3, #8
 800c15a:	3008      	addeq	r0, #8
 800c15c:	071a      	lsls	r2, r3, #28
 800c15e:	bf04      	itt	eq
 800c160:	091b      	lsreq	r3, r3, #4
 800c162:	3004      	addeq	r0, #4
 800c164:	079a      	lsls	r2, r3, #30
 800c166:	bf04      	itt	eq
 800c168:	089b      	lsreq	r3, r3, #2
 800c16a:	3002      	addeq	r0, #2
 800c16c:	07da      	lsls	r2, r3, #31
 800c16e:	d402      	bmi.n	800c176 <__lo0bits+0x4e>
 800c170:	085b      	lsrs	r3, r3, #1
 800c172:	d006      	beq.n	800c182 <__lo0bits+0x5a>
 800c174:	3001      	adds	r0, #1
 800c176:	600b      	str	r3, [r1, #0]
 800c178:	4770      	bx	lr
 800c17a:	4610      	mov	r0, r2
 800c17c:	e7e9      	b.n	800c152 <__lo0bits+0x2a>
 800c17e:	2000      	movs	r0, #0
 800c180:	4770      	bx	lr
 800c182:	2020      	movs	r0, #32
 800c184:	4770      	bx	lr

0800c186 <__i2b>:
 800c186:	b510      	push	{r4, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	2101      	movs	r1, #1
 800c18c:	f7ff ff27 	bl	800bfde <_Balloc>
 800c190:	2201      	movs	r2, #1
 800c192:	6144      	str	r4, [r0, #20]
 800c194:	6102      	str	r2, [r0, #16]
 800c196:	bd10      	pop	{r4, pc}

0800c198 <__multiply>:
 800c198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4614      	mov	r4, r2
 800c19e:	690a      	ldr	r2, [r1, #16]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	bfb8      	it	lt
 800c1a6:	460b      	movlt	r3, r1
 800c1a8:	4688      	mov	r8, r1
 800c1aa:	bfbc      	itt	lt
 800c1ac:	46a0      	movlt	r8, r4
 800c1ae:	461c      	movlt	r4, r3
 800c1b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c1b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1c0:	eb07 0609 	add.w	r6, r7, r9
 800c1c4:	42b3      	cmp	r3, r6
 800c1c6:	bfb8      	it	lt
 800c1c8:	3101      	addlt	r1, #1
 800c1ca:	f7ff ff08 	bl	800bfde <_Balloc>
 800c1ce:	f100 0514 	add.w	r5, r0, #20
 800c1d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4573      	cmp	r3, lr
 800c1dc:	d316      	bcc.n	800c20c <__multiply+0x74>
 800c1de:	f104 0214 	add.w	r2, r4, #20
 800c1e2:	f108 0114 	add.w	r1, r8, #20
 800c1e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c1ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	9201      	str	r2, [sp, #4]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d80c      	bhi.n	800c212 <__multiply+0x7a>
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	dd03      	ble.n	800c204 <__multiply+0x6c>
 800c1fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c200:	2b00      	cmp	r3, #0
 800c202:	d05d      	beq.n	800c2c0 <__multiply+0x128>
 800c204:	6106      	str	r6, [r0, #16]
 800c206:	b003      	add	sp, #12
 800c208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20c:	f843 2b04 	str.w	r2, [r3], #4
 800c210:	e7e3      	b.n	800c1da <__multiply+0x42>
 800c212:	f8b2 b000 	ldrh.w	fp, [r2]
 800c216:	f1bb 0f00 	cmp.w	fp, #0
 800c21a:	d023      	beq.n	800c264 <__multiply+0xcc>
 800c21c:	4689      	mov	r9, r1
 800c21e:	46ac      	mov	ip, r5
 800c220:	f04f 0800 	mov.w	r8, #0
 800c224:	f859 4b04 	ldr.w	r4, [r9], #4
 800c228:	f8dc a000 	ldr.w	sl, [ip]
 800c22c:	b2a3      	uxth	r3, r4
 800c22e:	fa1f fa8a 	uxth.w	sl, sl
 800c232:	fb0b a303 	mla	r3, fp, r3, sl
 800c236:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c23a:	f8dc 4000 	ldr.w	r4, [ip]
 800c23e:	4443      	add	r3, r8
 800c240:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c244:	fb0b 840a 	mla	r4, fp, sl, r8
 800c248:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c24c:	46e2      	mov	sl, ip
 800c24e:	b29b      	uxth	r3, r3
 800c250:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c254:	454f      	cmp	r7, r9
 800c256:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c25a:	f84a 3b04 	str.w	r3, [sl], #4
 800c25e:	d82b      	bhi.n	800c2b8 <__multiply+0x120>
 800c260:	f8cc 8004 	str.w	r8, [ip, #4]
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c26a:	3204      	adds	r2, #4
 800c26c:	f1ba 0f00 	cmp.w	sl, #0
 800c270:	d020      	beq.n	800c2b4 <__multiply+0x11c>
 800c272:	682b      	ldr	r3, [r5, #0]
 800c274:	4689      	mov	r9, r1
 800c276:	46a8      	mov	r8, r5
 800c278:	f04f 0b00 	mov.w	fp, #0
 800c27c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c280:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c284:	fb0a 440c 	mla	r4, sl, ip, r4
 800c288:	445c      	add	r4, fp
 800c28a:	46c4      	mov	ip, r8
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c292:	f84c 3b04 	str.w	r3, [ip], #4
 800c296:	f859 3b04 	ldr.w	r3, [r9], #4
 800c29a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c29e:	0c1b      	lsrs	r3, r3, #16
 800c2a0:	fb0a b303 	mla	r3, sl, r3, fp
 800c2a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c2a8:	454f      	cmp	r7, r9
 800c2aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c2ae:	d805      	bhi.n	800c2bc <__multiply+0x124>
 800c2b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c2b4:	3504      	adds	r5, #4
 800c2b6:	e79b      	b.n	800c1f0 <__multiply+0x58>
 800c2b8:	46d4      	mov	ip, sl
 800c2ba:	e7b3      	b.n	800c224 <__multiply+0x8c>
 800c2bc:	46e0      	mov	r8, ip
 800c2be:	e7dd      	b.n	800c27c <__multiply+0xe4>
 800c2c0:	3e01      	subs	r6, #1
 800c2c2:	e799      	b.n	800c1f8 <__multiply+0x60>

0800c2c4 <__pow5mult>:
 800c2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c8:	4615      	mov	r5, r2
 800c2ca:	f012 0203 	ands.w	r2, r2, #3
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	d007      	beq.n	800c2e4 <__pow5mult+0x20>
 800c2d4:	3a01      	subs	r2, #1
 800c2d6:	4c21      	ldr	r4, [pc, #132]	; (800c35c <__pow5mult+0x98>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2de:	f7ff fec9 	bl	800c074 <__multadd>
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	10ad      	asrs	r5, r5, #2
 800c2e6:	d035      	beq.n	800c354 <__pow5mult+0x90>
 800c2e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2ea:	b93c      	cbnz	r4, 800c2fc <__pow5mult+0x38>
 800c2ec:	2010      	movs	r0, #16
 800c2ee:	f7ff fe63 	bl	800bfb8 <malloc>
 800c2f2:	6270      	str	r0, [r6, #36]	; 0x24
 800c2f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2f8:	6004      	str	r4, [r0, #0]
 800c2fa:	60c4      	str	r4, [r0, #12]
 800c2fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c304:	b94c      	cbnz	r4, 800c31a <__pow5mult+0x56>
 800c306:	f240 2171 	movw	r1, #625	; 0x271
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7ff ff3b 	bl	800c186 <__i2b>
 800c310:	2300      	movs	r3, #0
 800c312:	f8c8 0008 	str.w	r0, [r8, #8]
 800c316:	4604      	mov	r4, r0
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	f04f 0800 	mov.w	r8, #0
 800c31e:	07eb      	lsls	r3, r5, #31
 800c320:	d50a      	bpl.n	800c338 <__pow5mult+0x74>
 800c322:	4639      	mov	r1, r7
 800c324:	4622      	mov	r2, r4
 800c326:	4630      	mov	r0, r6
 800c328:	f7ff ff36 	bl	800c198 <__multiply>
 800c32c:	4639      	mov	r1, r7
 800c32e:	4681      	mov	r9, r0
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff fe88 	bl	800c046 <_Bfree>
 800c336:	464f      	mov	r7, r9
 800c338:	106d      	asrs	r5, r5, #1
 800c33a:	d00b      	beq.n	800c354 <__pow5mult+0x90>
 800c33c:	6820      	ldr	r0, [r4, #0]
 800c33e:	b938      	cbnz	r0, 800c350 <__pow5mult+0x8c>
 800c340:	4622      	mov	r2, r4
 800c342:	4621      	mov	r1, r4
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff ff27 	bl	800c198 <__multiply>
 800c34a:	6020      	str	r0, [r4, #0]
 800c34c:	f8c0 8000 	str.w	r8, [r0]
 800c350:	4604      	mov	r4, r0
 800c352:	e7e4      	b.n	800c31e <__pow5mult+0x5a>
 800c354:	4638      	mov	r0, r7
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	bf00      	nop
 800c35c:	0800cf28 	.word	0x0800cf28

0800c360 <__lshift>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	460c      	mov	r4, r1
 800c366:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	6849      	ldr	r1, [r1, #4]
 800c36e:	eb0a 0903 	add.w	r9, sl, r3
 800c372:	68a3      	ldr	r3, [r4, #8]
 800c374:	4607      	mov	r7, r0
 800c376:	4616      	mov	r6, r2
 800c378:	f109 0501 	add.w	r5, r9, #1
 800c37c:	42ab      	cmp	r3, r5
 800c37e:	db32      	blt.n	800c3e6 <__lshift+0x86>
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff fe2c 	bl	800bfde <_Balloc>
 800c386:	2300      	movs	r3, #0
 800c388:	4680      	mov	r8, r0
 800c38a:	f100 0114 	add.w	r1, r0, #20
 800c38e:	461a      	mov	r2, r3
 800c390:	4553      	cmp	r3, sl
 800c392:	db2b      	blt.n	800c3ec <__lshift+0x8c>
 800c394:	6920      	ldr	r0, [r4, #16]
 800c396:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c39a:	f104 0314 	add.w	r3, r4, #20
 800c39e:	f016 021f 	ands.w	r2, r6, #31
 800c3a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3aa:	d025      	beq.n	800c3f8 <__lshift+0x98>
 800c3ac:	f1c2 0e20 	rsb	lr, r2, #32
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	681e      	ldr	r6, [r3, #0]
 800c3b4:	468a      	mov	sl, r1
 800c3b6:	4096      	lsls	r6, r2
 800c3b8:	4330      	orrs	r0, r6
 800c3ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c3be:	f853 0b04 	ldr.w	r0, [r3], #4
 800c3c2:	459c      	cmp	ip, r3
 800c3c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800c3c8:	d814      	bhi.n	800c3f4 <__lshift+0x94>
 800c3ca:	6048      	str	r0, [r1, #4]
 800c3cc:	b108      	cbz	r0, 800c3d2 <__lshift+0x72>
 800c3ce:	f109 0502 	add.w	r5, r9, #2
 800c3d2:	3d01      	subs	r5, #1
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	f7ff fe33 	bl	800c046 <_Bfree>
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e6:	3101      	adds	r1, #1
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	e7c7      	b.n	800c37c <__lshift+0x1c>
 800c3ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	e7cd      	b.n	800c390 <__lshift+0x30>
 800c3f4:	4651      	mov	r1, sl
 800c3f6:	e7dc      	b.n	800c3b2 <__lshift+0x52>
 800c3f8:	3904      	subs	r1, #4
 800c3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800c402:	459c      	cmp	ip, r3
 800c404:	d8f9      	bhi.n	800c3fa <__lshift+0x9a>
 800c406:	e7e4      	b.n	800c3d2 <__lshift+0x72>

0800c408 <__mcmp>:
 800c408:	6903      	ldr	r3, [r0, #16]
 800c40a:	690a      	ldr	r2, [r1, #16]
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	b530      	push	{r4, r5, lr}
 800c410:	d10c      	bne.n	800c42c <__mcmp+0x24>
 800c412:	0092      	lsls	r2, r2, #2
 800c414:	3014      	adds	r0, #20
 800c416:	3114      	adds	r1, #20
 800c418:	1884      	adds	r4, r0, r2
 800c41a:	4411      	add	r1, r2
 800c41c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c424:	4295      	cmp	r5, r2
 800c426:	d003      	beq.n	800c430 <__mcmp+0x28>
 800c428:	d305      	bcc.n	800c436 <__mcmp+0x2e>
 800c42a:	2301      	movs	r3, #1
 800c42c:	4618      	mov	r0, r3
 800c42e:	bd30      	pop	{r4, r5, pc}
 800c430:	42a0      	cmp	r0, r4
 800c432:	d3f3      	bcc.n	800c41c <__mcmp+0x14>
 800c434:	e7fa      	b.n	800c42c <__mcmp+0x24>
 800c436:	f04f 33ff 	mov.w	r3, #4294967295
 800c43a:	e7f7      	b.n	800c42c <__mcmp+0x24>

0800c43c <__mdiff>:
 800c43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c440:	460d      	mov	r5, r1
 800c442:	4607      	mov	r7, r0
 800c444:	4611      	mov	r1, r2
 800c446:	4628      	mov	r0, r5
 800c448:	4614      	mov	r4, r2
 800c44a:	f7ff ffdd 	bl	800c408 <__mcmp>
 800c44e:	1e06      	subs	r6, r0, #0
 800c450:	d108      	bne.n	800c464 <__mdiff+0x28>
 800c452:	4631      	mov	r1, r6
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff fdc2 	bl	800bfde <_Balloc>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c464:	bfa4      	itt	ge
 800c466:	4623      	movge	r3, r4
 800c468:	462c      	movge	r4, r5
 800c46a:	4638      	mov	r0, r7
 800c46c:	6861      	ldr	r1, [r4, #4]
 800c46e:	bfa6      	itte	ge
 800c470:	461d      	movge	r5, r3
 800c472:	2600      	movge	r6, #0
 800c474:	2601      	movlt	r6, #1
 800c476:	f7ff fdb2 	bl	800bfde <_Balloc>
 800c47a:	692b      	ldr	r3, [r5, #16]
 800c47c:	60c6      	str	r6, [r0, #12]
 800c47e:	6926      	ldr	r6, [r4, #16]
 800c480:	f105 0914 	add.w	r9, r5, #20
 800c484:	f104 0214 	add.w	r2, r4, #20
 800c488:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c48c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c490:	f100 0514 	add.w	r5, r0, #20
 800c494:	f04f 0e00 	mov.w	lr, #0
 800c498:	f852 ab04 	ldr.w	sl, [r2], #4
 800c49c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4a0:	fa1e f18a 	uxtah	r1, lr, sl
 800c4a4:	b2a3      	uxth	r3, r4
 800c4a6:	1ac9      	subs	r1, r1, r3
 800c4a8:	0c23      	lsrs	r3, r4, #16
 800c4aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c4ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c4b2:	b289      	uxth	r1, r1
 800c4b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c4b8:	45c8      	cmp	r8, r9
 800c4ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c4be:	4694      	mov	ip, r2
 800c4c0:	f845 3b04 	str.w	r3, [r5], #4
 800c4c4:	d8e8      	bhi.n	800c498 <__mdiff+0x5c>
 800c4c6:	45bc      	cmp	ip, r7
 800c4c8:	d304      	bcc.n	800c4d4 <__mdiff+0x98>
 800c4ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c4ce:	b183      	cbz	r3, 800c4f2 <__mdiff+0xb6>
 800c4d0:	6106      	str	r6, [r0, #16]
 800c4d2:	e7c5      	b.n	800c460 <__mdiff+0x24>
 800c4d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4d8:	fa1e f381 	uxtah	r3, lr, r1
 800c4dc:	141a      	asrs	r2, r3, #16
 800c4de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c4ec:	f845 3b04 	str.w	r3, [r5], #4
 800c4f0:	e7e9      	b.n	800c4c6 <__mdiff+0x8a>
 800c4f2:	3e01      	subs	r6, #1
 800c4f4:	e7e9      	b.n	800c4ca <__mdiff+0x8e>

0800c4f6 <__d2b>:
 800c4f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4fa:	460e      	mov	r6, r1
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	ec59 8b10 	vmov	r8, r9, d0
 800c502:	4615      	mov	r5, r2
 800c504:	f7ff fd6b 	bl	800bfde <_Balloc>
 800c508:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c50c:	4607      	mov	r7, r0
 800c50e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c512:	bb34      	cbnz	r4, 800c562 <__d2b+0x6c>
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f1b8 0300 	subs.w	r3, r8, #0
 800c51a:	d027      	beq.n	800c56c <__d2b+0x76>
 800c51c:	a802      	add	r0, sp, #8
 800c51e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c522:	f7ff fe01 	bl	800c128 <__lo0bits>
 800c526:	9900      	ldr	r1, [sp, #0]
 800c528:	b1f0      	cbz	r0, 800c568 <__d2b+0x72>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	f1c0 0320 	rsb	r3, r0, #32
 800c530:	fa02 f303 	lsl.w	r3, r2, r3
 800c534:	430b      	orrs	r3, r1
 800c536:	40c2      	lsrs	r2, r0
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	9201      	str	r2, [sp, #4]
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	61bb      	str	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	bf14      	ite	ne
 800c544:	2102      	movne	r1, #2
 800c546:	2101      	moveq	r1, #1
 800c548:	6139      	str	r1, [r7, #16]
 800c54a:	b1c4      	cbz	r4, 800c57e <__d2b+0x88>
 800c54c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c550:	4404      	add	r4, r0
 800c552:	6034      	str	r4, [r6, #0]
 800c554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c558:	6028      	str	r0, [r5, #0]
 800c55a:	4638      	mov	r0, r7
 800c55c:	b003      	add	sp, #12
 800c55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c566:	e7d5      	b.n	800c514 <__d2b+0x1e>
 800c568:	6179      	str	r1, [r7, #20]
 800c56a:	e7e7      	b.n	800c53c <__d2b+0x46>
 800c56c:	a801      	add	r0, sp, #4
 800c56e:	f7ff fddb 	bl	800c128 <__lo0bits>
 800c572:	9b01      	ldr	r3, [sp, #4]
 800c574:	617b      	str	r3, [r7, #20]
 800c576:	2101      	movs	r1, #1
 800c578:	6139      	str	r1, [r7, #16]
 800c57a:	3020      	adds	r0, #32
 800c57c:	e7e5      	b.n	800c54a <__d2b+0x54>
 800c57e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c582:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c586:	6030      	str	r0, [r6, #0]
 800c588:	6918      	ldr	r0, [r3, #16]
 800c58a:	f7ff fdae 	bl	800c0ea <__hi0bits>
 800c58e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c592:	e7e1      	b.n	800c558 <__d2b+0x62>

0800c594 <_calloc_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	fb02 f401 	mul.w	r4, r2, r1
 800c59a:	4621      	mov	r1, r4
 800c59c:	f000 f856 	bl	800c64c <_malloc_r>
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	b118      	cbz	r0, 800c5ac <_calloc_r+0x18>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	f7fd fe80 	bl	800a2ac <memset>
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}

0800c5b0 <_free_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	2900      	cmp	r1, #0
 800c5b6:	d045      	beq.n	800c644 <_free_r+0x94>
 800c5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5bc:	1f0c      	subs	r4, r1, #4
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	bfb8      	it	lt
 800c5c2:	18e4      	addlt	r4, r4, r3
 800c5c4:	f000 fa98 	bl	800caf8 <__malloc_lock>
 800c5c8:	4a1f      	ldr	r2, [pc, #124]	; (800c648 <_free_r+0x98>)
 800c5ca:	6813      	ldr	r3, [r2, #0]
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	b933      	cbnz	r3, 800c5de <_free_r+0x2e>
 800c5d0:	6063      	str	r3, [r4, #4]
 800c5d2:	6014      	str	r4, [r2, #0]
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5da:	f000 ba8e 	b.w	800cafa <__malloc_unlock>
 800c5de:	42a3      	cmp	r3, r4
 800c5e0:	d90c      	bls.n	800c5fc <_free_r+0x4c>
 800c5e2:	6821      	ldr	r1, [r4, #0]
 800c5e4:	1862      	adds	r2, r4, r1
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	bf04      	itt	eq
 800c5ea:	681a      	ldreq	r2, [r3, #0]
 800c5ec:	685b      	ldreq	r3, [r3, #4]
 800c5ee:	6063      	str	r3, [r4, #4]
 800c5f0:	bf04      	itt	eq
 800c5f2:	1852      	addeq	r2, r2, r1
 800c5f4:	6022      	streq	r2, [r4, #0]
 800c5f6:	6004      	str	r4, [r0, #0]
 800c5f8:	e7ec      	b.n	800c5d4 <_free_r+0x24>
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	b10a      	cbz	r2, 800c604 <_free_r+0x54>
 800c600:	42a2      	cmp	r2, r4
 800c602:	d9fa      	bls.n	800c5fa <_free_r+0x4a>
 800c604:	6819      	ldr	r1, [r3, #0]
 800c606:	1858      	adds	r0, r3, r1
 800c608:	42a0      	cmp	r0, r4
 800c60a:	d10b      	bne.n	800c624 <_free_r+0x74>
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	4401      	add	r1, r0
 800c610:	1858      	adds	r0, r3, r1
 800c612:	4282      	cmp	r2, r0
 800c614:	6019      	str	r1, [r3, #0]
 800c616:	d1dd      	bne.n	800c5d4 <_free_r+0x24>
 800c618:	6810      	ldr	r0, [r2, #0]
 800c61a:	6852      	ldr	r2, [r2, #4]
 800c61c:	605a      	str	r2, [r3, #4]
 800c61e:	4401      	add	r1, r0
 800c620:	6019      	str	r1, [r3, #0]
 800c622:	e7d7      	b.n	800c5d4 <_free_r+0x24>
 800c624:	d902      	bls.n	800c62c <_free_r+0x7c>
 800c626:	230c      	movs	r3, #12
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	e7d3      	b.n	800c5d4 <_free_r+0x24>
 800c62c:	6820      	ldr	r0, [r4, #0]
 800c62e:	1821      	adds	r1, r4, r0
 800c630:	428a      	cmp	r2, r1
 800c632:	bf04      	itt	eq
 800c634:	6811      	ldreq	r1, [r2, #0]
 800c636:	6852      	ldreq	r2, [r2, #4]
 800c638:	6062      	str	r2, [r4, #4]
 800c63a:	bf04      	itt	eq
 800c63c:	1809      	addeq	r1, r1, r0
 800c63e:	6021      	streq	r1, [r4, #0]
 800c640:	605c      	str	r4, [r3, #4]
 800c642:	e7c7      	b.n	800c5d4 <_free_r+0x24>
 800c644:	bd38      	pop	{r3, r4, r5, pc}
 800c646:	bf00      	nop
 800c648:	2000020c 	.word	0x2000020c

0800c64c <_malloc_r>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	1ccd      	adds	r5, r1, #3
 800c650:	f025 0503 	bic.w	r5, r5, #3
 800c654:	3508      	adds	r5, #8
 800c656:	2d0c      	cmp	r5, #12
 800c658:	bf38      	it	cc
 800c65a:	250c      	movcc	r5, #12
 800c65c:	2d00      	cmp	r5, #0
 800c65e:	4606      	mov	r6, r0
 800c660:	db01      	blt.n	800c666 <_malloc_r+0x1a>
 800c662:	42a9      	cmp	r1, r5
 800c664:	d903      	bls.n	800c66e <_malloc_r+0x22>
 800c666:	230c      	movs	r3, #12
 800c668:	6033      	str	r3, [r6, #0]
 800c66a:	2000      	movs	r0, #0
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	f000 fa43 	bl	800caf8 <__malloc_lock>
 800c672:	4a21      	ldr	r2, [pc, #132]	; (800c6f8 <_malloc_r+0xac>)
 800c674:	6814      	ldr	r4, [r2, #0]
 800c676:	4621      	mov	r1, r4
 800c678:	b991      	cbnz	r1, 800c6a0 <_malloc_r+0x54>
 800c67a:	4c20      	ldr	r4, [pc, #128]	; (800c6fc <_malloc_r+0xb0>)
 800c67c:	6823      	ldr	r3, [r4, #0]
 800c67e:	b91b      	cbnz	r3, 800c688 <_malloc_r+0x3c>
 800c680:	4630      	mov	r0, r6
 800c682:	f000 f97d 	bl	800c980 <_sbrk_r>
 800c686:	6020      	str	r0, [r4, #0]
 800c688:	4629      	mov	r1, r5
 800c68a:	4630      	mov	r0, r6
 800c68c:	f000 f978 	bl	800c980 <_sbrk_r>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d124      	bne.n	800c6de <_malloc_r+0x92>
 800c694:	230c      	movs	r3, #12
 800c696:	6033      	str	r3, [r6, #0]
 800c698:	4630      	mov	r0, r6
 800c69a:	f000 fa2e 	bl	800cafa <__malloc_unlock>
 800c69e:	e7e4      	b.n	800c66a <_malloc_r+0x1e>
 800c6a0:	680b      	ldr	r3, [r1, #0]
 800c6a2:	1b5b      	subs	r3, r3, r5
 800c6a4:	d418      	bmi.n	800c6d8 <_malloc_r+0x8c>
 800c6a6:	2b0b      	cmp	r3, #11
 800c6a8:	d90f      	bls.n	800c6ca <_malloc_r+0x7e>
 800c6aa:	600b      	str	r3, [r1, #0]
 800c6ac:	50cd      	str	r5, [r1, r3]
 800c6ae:	18cc      	adds	r4, r1, r3
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f000 fa22 	bl	800cafa <__malloc_unlock>
 800c6b6:	f104 000b 	add.w	r0, r4, #11
 800c6ba:	1d23      	adds	r3, r4, #4
 800c6bc:	f020 0007 	bic.w	r0, r0, #7
 800c6c0:	1ac3      	subs	r3, r0, r3
 800c6c2:	d0d3      	beq.n	800c66c <_malloc_r+0x20>
 800c6c4:	425a      	negs	r2, r3
 800c6c6:	50e2      	str	r2, [r4, r3]
 800c6c8:	e7d0      	b.n	800c66c <_malloc_r+0x20>
 800c6ca:	428c      	cmp	r4, r1
 800c6cc:	684b      	ldr	r3, [r1, #4]
 800c6ce:	bf16      	itet	ne
 800c6d0:	6063      	strne	r3, [r4, #4]
 800c6d2:	6013      	streq	r3, [r2, #0]
 800c6d4:	460c      	movne	r4, r1
 800c6d6:	e7eb      	b.n	800c6b0 <_malloc_r+0x64>
 800c6d8:	460c      	mov	r4, r1
 800c6da:	6849      	ldr	r1, [r1, #4]
 800c6dc:	e7cc      	b.n	800c678 <_malloc_r+0x2c>
 800c6de:	1cc4      	adds	r4, r0, #3
 800c6e0:	f024 0403 	bic.w	r4, r4, #3
 800c6e4:	42a0      	cmp	r0, r4
 800c6e6:	d005      	beq.n	800c6f4 <_malloc_r+0xa8>
 800c6e8:	1a21      	subs	r1, r4, r0
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f000 f948 	bl	800c980 <_sbrk_r>
 800c6f0:	3001      	adds	r0, #1
 800c6f2:	d0cf      	beq.n	800c694 <_malloc_r+0x48>
 800c6f4:	6025      	str	r5, [r4, #0]
 800c6f6:	e7db      	b.n	800c6b0 <_malloc_r+0x64>
 800c6f8:	2000020c 	.word	0x2000020c
 800c6fc:	20000210 	.word	0x20000210

0800c700 <__sfputc_r>:
 800c700:	6893      	ldr	r3, [r2, #8]
 800c702:	3b01      	subs	r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	b410      	push	{r4}
 800c708:	6093      	str	r3, [r2, #8]
 800c70a:	da08      	bge.n	800c71e <__sfputc_r+0x1e>
 800c70c:	6994      	ldr	r4, [r2, #24]
 800c70e:	42a3      	cmp	r3, r4
 800c710:	db01      	blt.n	800c716 <__sfputc_r+0x16>
 800c712:	290a      	cmp	r1, #10
 800c714:	d103      	bne.n	800c71e <__sfputc_r+0x1e>
 800c716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c71a:	f7fe bb5d 	b.w	800add8 <__swbuf_r>
 800c71e:	6813      	ldr	r3, [r2, #0]
 800c720:	1c58      	adds	r0, r3, #1
 800c722:	6010      	str	r0, [r2, #0]
 800c724:	7019      	strb	r1, [r3, #0]
 800c726:	4608      	mov	r0, r1
 800c728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <__sfputs_r>:
 800c72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c730:	4606      	mov	r6, r0
 800c732:	460f      	mov	r7, r1
 800c734:	4614      	mov	r4, r2
 800c736:	18d5      	adds	r5, r2, r3
 800c738:	42ac      	cmp	r4, r5
 800c73a:	d101      	bne.n	800c740 <__sfputs_r+0x12>
 800c73c:	2000      	movs	r0, #0
 800c73e:	e007      	b.n	800c750 <__sfputs_r+0x22>
 800c740:	463a      	mov	r2, r7
 800c742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ffda 	bl	800c700 <__sfputc_r>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d1f3      	bne.n	800c738 <__sfputs_r+0xa>
 800c750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c754 <_vfiprintf_r>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	460c      	mov	r4, r1
 800c75a:	b09d      	sub	sp, #116	; 0x74
 800c75c:	4617      	mov	r7, r2
 800c75e:	461d      	mov	r5, r3
 800c760:	4606      	mov	r6, r0
 800c762:	b118      	cbz	r0, 800c76c <_vfiprintf_r+0x18>
 800c764:	6983      	ldr	r3, [r0, #24]
 800c766:	b90b      	cbnz	r3, 800c76c <_vfiprintf_r+0x18>
 800c768:	f7ff fb2a 	bl	800bdc0 <__sinit>
 800c76c:	4b7c      	ldr	r3, [pc, #496]	; (800c960 <_vfiprintf_r+0x20c>)
 800c76e:	429c      	cmp	r4, r3
 800c770:	d158      	bne.n	800c824 <_vfiprintf_r+0xd0>
 800c772:	6874      	ldr	r4, [r6, #4]
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	0718      	lsls	r0, r3, #28
 800c778:	d55e      	bpl.n	800c838 <_vfiprintf_r+0xe4>
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d05b      	beq.n	800c838 <_vfiprintf_r+0xe4>
 800c780:	2300      	movs	r3, #0
 800c782:	9309      	str	r3, [sp, #36]	; 0x24
 800c784:	2320      	movs	r3, #32
 800c786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c78a:	2330      	movs	r3, #48	; 0x30
 800c78c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c790:	9503      	str	r5, [sp, #12]
 800c792:	f04f 0b01 	mov.w	fp, #1
 800c796:	46b8      	mov	r8, r7
 800c798:	4645      	mov	r5, r8
 800c79a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c79e:	b10b      	cbz	r3, 800c7a4 <_vfiprintf_r+0x50>
 800c7a0:	2b25      	cmp	r3, #37	; 0x25
 800c7a2:	d154      	bne.n	800c84e <_vfiprintf_r+0xfa>
 800c7a4:	ebb8 0a07 	subs.w	sl, r8, r7
 800c7a8:	d00b      	beq.n	800c7c2 <_vfiprintf_r+0x6e>
 800c7aa:	4653      	mov	r3, sl
 800c7ac:	463a      	mov	r2, r7
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff ffbc 	bl	800c72e <__sfputs_r>
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f000 80c2 	beq.w	800c940 <_vfiprintf_r+0x1ec>
 800c7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7be:	4453      	add	r3, sl
 800c7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c2:	f898 3000 	ldrb.w	r3, [r8]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80ba 	beq.w	800c940 <_vfiprintf_r+0x1ec>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	9307      	str	r3, [sp, #28]
 800c7da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7de:	931a      	str	r3, [sp, #104]	; 0x68
 800c7e0:	46a8      	mov	r8, r5
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c7e8:	485e      	ldr	r0, [pc, #376]	; (800c964 <_vfiprintf_r+0x210>)
 800c7ea:	f7f3 fcf9 	bl	80001e0 <memchr>
 800c7ee:	9b04      	ldr	r3, [sp, #16]
 800c7f0:	bb78      	cbnz	r0, 800c852 <_vfiprintf_r+0xfe>
 800c7f2:	06d9      	lsls	r1, r3, #27
 800c7f4:	bf44      	itt	mi
 800c7f6:	2220      	movmi	r2, #32
 800c7f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c7fc:	071a      	lsls	r2, r3, #28
 800c7fe:	bf44      	itt	mi
 800c800:	222b      	movmi	r2, #43	; 0x2b
 800c802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c806:	782a      	ldrb	r2, [r5, #0]
 800c808:	2a2a      	cmp	r2, #42	; 0x2a
 800c80a:	d02a      	beq.n	800c862 <_vfiprintf_r+0x10e>
 800c80c:	9a07      	ldr	r2, [sp, #28]
 800c80e:	46a8      	mov	r8, r5
 800c810:	2000      	movs	r0, #0
 800c812:	250a      	movs	r5, #10
 800c814:	4641      	mov	r1, r8
 800c816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81a:	3b30      	subs	r3, #48	; 0x30
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	d969      	bls.n	800c8f4 <_vfiprintf_r+0x1a0>
 800c820:	b360      	cbz	r0, 800c87c <_vfiprintf_r+0x128>
 800c822:	e024      	b.n	800c86e <_vfiprintf_r+0x11a>
 800c824:	4b50      	ldr	r3, [pc, #320]	; (800c968 <_vfiprintf_r+0x214>)
 800c826:	429c      	cmp	r4, r3
 800c828:	d101      	bne.n	800c82e <_vfiprintf_r+0xda>
 800c82a:	68b4      	ldr	r4, [r6, #8]
 800c82c:	e7a2      	b.n	800c774 <_vfiprintf_r+0x20>
 800c82e:	4b4f      	ldr	r3, [pc, #316]	; (800c96c <_vfiprintf_r+0x218>)
 800c830:	429c      	cmp	r4, r3
 800c832:	bf08      	it	eq
 800c834:	68f4      	ldreq	r4, [r6, #12]
 800c836:	e79d      	b.n	800c774 <_vfiprintf_r+0x20>
 800c838:	4621      	mov	r1, r4
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7fe fb1e 	bl	800ae7c <__swsetup_r>
 800c840:	2800      	cmp	r0, #0
 800c842:	d09d      	beq.n	800c780 <_vfiprintf_r+0x2c>
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	b01d      	add	sp, #116	; 0x74
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	46a8      	mov	r8, r5
 800c850:	e7a2      	b.n	800c798 <_vfiprintf_r+0x44>
 800c852:	4a44      	ldr	r2, [pc, #272]	; (800c964 <_vfiprintf_r+0x210>)
 800c854:	1a80      	subs	r0, r0, r2
 800c856:	fa0b f000 	lsl.w	r0, fp, r0
 800c85a:	4318      	orrs	r0, r3
 800c85c:	9004      	str	r0, [sp, #16]
 800c85e:	4645      	mov	r5, r8
 800c860:	e7be      	b.n	800c7e0 <_vfiprintf_r+0x8c>
 800c862:	9a03      	ldr	r2, [sp, #12]
 800c864:	1d11      	adds	r1, r2, #4
 800c866:	6812      	ldr	r2, [r2, #0]
 800c868:	9103      	str	r1, [sp, #12]
 800c86a:	2a00      	cmp	r2, #0
 800c86c:	db01      	blt.n	800c872 <_vfiprintf_r+0x11e>
 800c86e:	9207      	str	r2, [sp, #28]
 800c870:	e004      	b.n	800c87c <_vfiprintf_r+0x128>
 800c872:	4252      	negs	r2, r2
 800c874:	f043 0302 	orr.w	r3, r3, #2
 800c878:	9207      	str	r2, [sp, #28]
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	f898 3000 	ldrb.w	r3, [r8]
 800c880:	2b2e      	cmp	r3, #46	; 0x2e
 800c882:	d10e      	bne.n	800c8a2 <_vfiprintf_r+0x14e>
 800c884:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c888:	2b2a      	cmp	r3, #42	; 0x2a
 800c88a:	d138      	bne.n	800c8fe <_vfiprintf_r+0x1aa>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	1d1a      	adds	r2, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	9203      	str	r2, [sp, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfb8      	it	lt
 800c898:	f04f 33ff 	movlt.w	r3, #4294967295
 800c89c:	f108 0802 	add.w	r8, r8, #2
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	4d33      	ldr	r5, [pc, #204]	; (800c970 <_vfiprintf_r+0x21c>)
 800c8a4:	f898 1000 	ldrb.w	r1, [r8]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f7f3 fc98 	bl	80001e0 <memchr>
 800c8b0:	b140      	cbz	r0, 800c8c4 <_vfiprintf_r+0x170>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	1b40      	subs	r0, r0, r5
 800c8b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	4303      	orrs	r3, r0
 800c8be:	f108 0801 	add.w	r8, r8, #1
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	f898 1000 	ldrb.w	r1, [r8]
 800c8c8:	482a      	ldr	r0, [pc, #168]	; (800c974 <_vfiprintf_r+0x220>)
 800c8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ce:	2206      	movs	r2, #6
 800c8d0:	f108 0701 	add.w	r7, r8, #1
 800c8d4:	f7f3 fc84 	bl	80001e0 <memchr>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d037      	beq.n	800c94c <_vfiprintf_r+0x1f8>
 800c8dc:	4b26      	ldr	r3, [pc, #152]	; (800c978 <_vfiprintf_r+0x224>)
 800c8de:	bb1b      	cbnz	r3, 800c928 <_vfiprintf_r+0x1d4>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ee:	444b      	add	r3, r9
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	e750      	b.n	800c796 <_vfiprintf_r+0x42>
 800c8f4:	fb05 3202 	mla	r2, r5, r2, r3
 800c8f8:	2001      	movs	r0, #1
 800c8fa:	4688      	mov	r8, r1
 800c8fc:	e78a      	b.n	800c814 <_vfiprintf_r+0xc0>
 800c8fe:	2300      	movs	r3, #0
 800c900:	f108 0801 	add.w	r8, r8, #1
 800c904:	9305      	str	r3, [sp, #20]
 800c906:	4619      	mov	r1, r3
 800c908:	250a      	movs	r5, #10
 800c90a:	4640      	mov	r0, r8
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	3a30      	subs	r2, #48	; 0x30
 800c912:	2a09      	cmp	r2, #9
 800c914:	d903      	bls.n	800c91e <_vfiprintf_r+0x1ca>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c3      	beq.n	800c8a2 <_vfiprintf_r+0x14e>
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	e7c1      	b.n	800c8a2 <_vfiprintf_r+0x14e>
 800c91e:	fb05 2101 	mla	r1, r5, r1, r2
 800c922:	2301      	movs	r3, #1
 800c924:	4680      	mov	r8, r0
 800c926:	e7f0      	b.n	800c90a <_vfiprintf_r+0x1b6>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	4622      	mov	r2, r4
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <_vfiprintf_r+0x228>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4630      	mov	r0, r6
 800c934:	f7fd fd56 	bl	800a3e4 <_printf_float>
 800c938:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c93c:	4681      	mov	r9, r0
 800c93e:	d1d5      	bne.n	800c8ec <_vfiprintf_r+0x198>
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	065b      	lsls	r3, r3, #25
 800c944:	f53f af7e 	bmi.w	800c844 <_vfiprintf_r+0xf0>
 800c948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c94a:	e77d      	b.n	800c848 <_vfiprintf_r+0xf4>
 800c94c:	ab03      	add	r3, sp, #12
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	4622      	mov	r2, r4
 800c952:	4b0a      	ldr	r3, [pc, #40]	; (800c97c <_vfiprintf_r+0x228>)
 800c954:	a904      	add	r1, sp, #16
 800c956:	4630      	mov	r0, r6
 800c958:	f7fd fffa 	bl	800a950 <_printf_i>
 800c95c:	e7ec      	b.n	800c938 <_vfiprintf_r+0x1e4>
 800c95e:	bf00      	nop
 800c960:	0800cdf4 	.word	0x0800cdf4
 800c964:	0800cf34 	.word	0x0800cf34
 800c968:	0800ce14 	.word	0x0800ce14
 800c96c:	0800cdd4 	.word	0x0800cdd4
 800c970:	0800cf3a 	.word	0x0800cf3a
 800c974:	0800cf3e 	.word	0x0800cf3e
 800c978:	0800a3e5 	.word	0x0800a3e5
 800c97c:	0800c72f 	.word	0x0800c72f

0800c980 <_sbrk_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4c06      	ldr	r4, [pc, #24]	; (800c99c <_sbrk_r+0x1c>)
 800c984:	2300      	movs	r3, #0
 800c986:	4605      	mov	r5, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	f7fd fb66 	bl	800a05c <_sbrk>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_sbrk_r+0x1a>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	b103      	cbz	r3, 800c99a <_sbrk_r+0x1a>
 800c998:	602b      	str	r3, [r5, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20002a04 	.word	0x20002a04

0800c9a0 <__sread>:
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a8:	f000 f8a8 	bl	800cafc <_read_r>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	bfab      	itete	ge
 800c9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9b4:	181b      	addge	r3, r3, r0
 800c9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9ba:	bfac      	ite	ge
 800c9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9be:	81a3      	strhlt	r3, [r4, #12]
 800c9c0:	bd10      	pop	{r4, pc}

0800c9c2 <__swrite>:
 800c9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c6:	461f      	mov	r7, r3
 800c9c8:	898b      	ldrh	r3, [r1, #12]
 800c9ca:	05db      	lsls	r3, r3, #23
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	4616      	mov	r6, r2
 800c9d2:	d505      	bpl.n	800c9e0 <__swrite+0x1e>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9dc:	f000 f868 	bl	800cab0 <_lseek_r>
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9ea:	81a3      	strh	r3, [r4, #12]
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	f000 b817 	b.w	800ca28 <_write_r>

0800c9fa <__sseek>:
 800c9fa:	b510      	push	{r4, lr}
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca02:	f000 f855 	bl	800cab0 <_lseek_r>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	bf15      	itete	ne
 800ca0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca16:	81a3      	strheq	r3, [r4, #12]
 800ca18:	bf18      	it	ne
 800ca1a:	81a3      	strhne	r3, [r4, #12]
 800ca1c:	bd10      	pop	{r4, pc}

0800ca1e <__sclose>:
 800ca1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca22:	f000 b813 	b.w	800ca4c <_close_r>
	...

0800ca28 <_write_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4c07      	ldr	r4, [pc, #28]	; (800ca48 <_write_r+0x20>)
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	4608      	mov	r0, r1
 800ca30:	4611      	mov	r1, r2
 800ca32:	2200      	movs	r2, #0
 800ca34:	6022      	str	r2, [r4, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	f7fd fabf 	bl	8009fba <_write>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d102      	bne.n	800ca46 <_write_r+0x1e>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	b103      	cbz	r3, 800ca46 <_write_r+0x1e>
 800ca44:	602b      	str	r3, [r5, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	20002a04 	.word	0x20002a04

0800ca4c <_close_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	4c06      	ldr	r4, [pc, #24]	; (800ca68 <_close_r+0x1c>)
 800ca50:	2300      	movs	r3, #0
 800ca52:	4605      	mov	r5, r0
 800ca54:	4608      	mov	r0, r1
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	f7fd facb 	bl	8009ff2 <_close>
 800ca5c:	1c43      	adds	r3, r0, #1
 800ca5e:	d102      	bne.n	800ca66 <_close_r+0x1a>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	b103      	cbz	r3, 800ca66 <_close_r+0x1a>
 800ca64:	602b      	str	r3, [r5, #0]
 800ca66:	bd38      	pop	{r3, r4, r5, pc}
 800ca68:	20002a04 	.word	0x20002a04

0800ca6c <_fstat_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	4c07      	ldr	r4, [pc, #28]	; (800ca8c <_fstat_r+0x20>)
 800ca70:	2300      	movs	r3, #0
 800ca72:	4605      	mov	r5, r0
 800ca74:	4608      	mov	r0, r1
 800ca76:	4611      	mov	r1, r2
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	f7fd fac6 	bl	800a00a <_fstat>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	d102      	bne.n	800ca88 <_fstat_r+0x1c>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	b103      	cbz	r3, 800ca88 <_fstat_r+0x1c>
 800ca86:	602b      	str	r3, [r5, #0]
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20002a04 	.word	0x20002a04

0800ca90 <_isatty_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4c06      	ldr	r4, [pc, #24]	; (800caac <_isatty_r+0x1c>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4605      	mov	r5, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	f7fd fac5 	bl	800a02a <_isatty>
 800caa0:	1c43      	adds	r3, r0, #1
 800caa2:	d102      	bne.n	800caaa <_isatty_r+0x1a>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	b103      	cbz	r3, 800caaa <_isatty_r+0x1a>
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	bd38      	pop	{r3, r4, r5, pc}
 800caac:	20002a04 	.word	0x20002a04

0800cab0 <_lseek_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4c07      	ldr	r4, [pc, #28]	; (800cad0 <_lseek_r+0x20>)
 800cab4:	4605      	mov	r5, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	4611      	mov	r1, r2
 800caba:	2200      	movs	r2, #0
 800cabc:	6022      	str	r2, [r4, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	f7fd fabe 	bl	800a040 <_lseek>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_lseek_r+0x1e>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	b103      	cbz	r3, 800cace <_lseek_r+0x1e>
 800cacc:	602b      	str	r3, [r5, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	20002a04 	.word	0x20002a04

0800cad4 <__ascii_mbtowc>:
 800cad4:	b082      	sub	sp, #8
 800cad6:	b901      	cbnz	r1, 800cada <__ascii_mbtowc+0x6>
 800cad8:	a901      	add	r1, sp, #4
 800cada:	b142      	cbz	r2, 800caee <__ascii_mbtowc+0x1a>
 800cadc:	b14b      	cbz	r3, 800caf2 <__ascii_mbtowc+0x1e>
 800cade:	7813      	ldrb	r3, [r2, #0]
 800cae0:	600b      	str	r3, [r1, #0]
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	1c10      	adds	r0, r2, #0
 800cae6:	bf18      	it	ne
 800cae8:	2001      	movne	r0, #1
 800caea:	b002      	add	sp, #8
 800caec:	4770      	bx	lr
 800caee:	4610      	mov	r0, r2
 800caf0:	e7fb      	b.n	800caea <__ascii_mbtowc+0x16>
 800caf2:	f06f 0001 	mvn.w	r0, #1
 800caf6:	e7f8      	b.n	800caea <__ascii_mbtowc+0x16>

0800caf8 <__malloc_lock>:
 800caf8:	4770      	bx	lr

0800cafa <__malloc_unlock>:
 800cafa:	4770      	bx	lr

0800cafc <_read_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4c07      	ldr	r4, [pc, #28]	; (800cb1c <_read_r+0x20>)
 800cb00:	4605      	mov	r5, r0
 800cb02:	4608      	mov	r0, r1
 800cb04:	4611      	mov	r1, r2
 800cb06:	2200      	movs	r2, #0
 800cb08:	6022      	str	r2, [r4, #0]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f7fd fa38 	bl	8009f80 <_read>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_read_r+0x1e>
 800cb14:	6823      	ldr	r3, [r4, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_read_r+0x1e>
 800cb18:	602b      	str	r3, [r5, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	20002a04 	.word	0x20002a04

0800cb20 <__ascii_wctomb>:
 800cb20:	b149      	cbz	r1, 800cb36 <__ascii_wctomb+0x16>
 800cb22:	2aff      	cmp	r2, #255	; 0xff
 800cb24:	bf85      	ittet	hi
 800cb26:	238a      	movhi	r3, #138	; 0x8a
 800cb28:	6003      	strhi	r3, [r0, #0]
 800cb2a:	700a      	strbls	r2, [r1, #0]
 800cb2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb30:	bf98      	it	ls
 800cb32:	2001      	movls	r0, #1
 800cb34:	4770      	bx	lr
 800cb36:	4608      	mov	r0, r1
 800cb38:	4770      	bx	lr
	...

0800cb3c <_init>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	bf00      	nop
 800cb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb42:	bc08      	pop	{r3}
 800cb44:	469e      	mov	lr, r3
 800cb46:	4770      	bx	lr

0800cb48 <_fini>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	bf00      	nop
 800cb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4e:	bc08      	pop	{r3}
 800cb50:	469e      	mov	lr, r3
 800cb52:	4770      	bx	lr
